
temp_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800e480  0800e480  0000f480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9f0  0800e9f0  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9f0  0800e9f0  0000f9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9f8  0800e9f8  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9f8  0800e9f8  0000f9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e9fc  0800e9fc  0000f9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800ea00  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dec  200001dc  0800ebdc  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fc8  0800ebdc  00010fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb4d  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4a  00000000  00000000  0002ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00032ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001550  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a1  00000000  00000000  00035c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d658  00000000  00000000  0003adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f7f  00000000  00000000  00058421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001023a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089a0  00000000  00000000  001023e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e464 	.word	0x0800e464

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800e464 	.word	0x0800e464

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 f81c 	bl	8002034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f882 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 fa72 	bl	80014e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001004:	f000 f8e8 	bl	80011d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001008:	f000 f9ea 	bl	80013e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 800100c:	f000 f936 	bl	800127c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001010:	f000 f962 	bl	80012d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001014:	f000 fa3e 	bl	8001494 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001018:	f000 f996 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Set up LCD
  HAL_TIM_Base_Start(&htim2);
 800101c:	4826      	ldr	r0, [pc, #152]	@ (80010b8 <main+0xc4>)
 800101e:	f004 f82b 	bl	8005078 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // CS HIGH
 8001022:	2201      	movs	r2, #1
 8001024:	2140      	movs	r1, #64	@ 0x40
 8001026:	4825      	ldr	r0, [pc, #148]	@ (80010bc <main+0xc8>)
 8001028:	f001 feee 	bl	8002e08 <HAL_GPIO_WritePin>
  HAL_SPI_Abort(&hspi1);
 800102c:	4824      	ldr	r0, [pc, #144]	@ (80010c0 <main+0xcc>)
 800102e:	f003 fd97 	bl	8004b60 <HAL_SPI_Abort>
  init_lcd();
 8001032:	f000 fa9b 	bl	800156c <init_lcd>
  clr_lcd();
 8001036:	f000 fb3d 	bl	80016b4 <clr_lcd>
  print_lcd("Temperature:");
 800103a:	4822      	ldr	r0, [pc, #136]	@ (80010c4 <main+0xd0>)
 800103c:	f000 fb45 	bl	80016ca <print_lcd>
  write_cmd(SET_LINE_3);   //set cursor to second line
 8001040:	2094      	movs	r0, #148	@ 0x94
 8001042:	f000 fb1d 	bl	8001680 <write_cmd>
  wait_us(40);
 8001046:	2028      	movs	r0, #40	@ 0x28
 8001048:	f000 fb57 	bl	80016fa <wait_us>
  print_lcd("Counter:");
 800104c:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <main+0xd4>)
 800104e:	f000 fb3c 	bl	80016ca <print_lcd>
  HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	2206      	movs	r2, #6
 8001058:	491c      	ldr	r1, [pc, #112]	@ (80010cc <main+0xd8>)
 800105a:	481d      	ldr	r0, [pc, #116]	@ (80010d0 <main+0xdc>)
 800105c:	f005 f858 	bl	8006110 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	2204      	movs	r2, #4
 8001066:	491b      	ldr	r1, [pc, #108]	@ (80010d4 <main+0xe0>)
 8001068:	4819      	ldr	r0, [pc, #100]	@ (80010d0 <main+0xdc>)
 800106a:	f005 f851 	bl	8006110 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800106e:	f005 fc4f 	bl	8006910 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of SPI_Mutex */
  SPI_MutexHandle = osMutexNew(&SPI_Mutex_attributes);
 8001072:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <main+0xe4>)
 8001074:	f005 fd43 	bl	8006afe <osMutexNew>
 8001078:	4603      	mov	r3, r0
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <main+0xe8>)
 800107c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TempRead */
  TempReadHandle = osThreadNew(StartTempRead, NULL, &TempRead_attributes);
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <main+0xec>)
 8001080:	2100      	movs	r1, #0
 8001082:	4818      	ldr	r0, [pc, #96]	@ (80010e4 <main+0xf0>)
 8001084:	f005 fc8e 	bl	80069a4 <osThreadNew>
 8001088:	4603      	mov	r3, r0
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <main+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]

  /* creation of Counter */
  CounterHandle = osThreadNew(StartCounter, NULL, &Counter_attributes);
 800108e:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <main+0xf8>)
 8001090:	2100      	movs	r1, #0
 8001092:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <main+0xfc>)
 8001094:	f005 fc86 	bl	80069a4 <osThreadNew>
 8001098:	4603      	mov	r3, r0
 800109a:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <main+0x100>)
 800109c:	6013      	str	r3, [r2, #0]

  /* creation of CtrlLED */
  CtrlLEDHandle = osThreadNew(StartCtrlLED, NULL, &CtrlLED_attributes);
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <main+0x104>)
 80010a0:	2100      	movs	r1, #0
 80010a2:	4816      	ldr	r0, [pc, #88]	@ (80010fc <main+0x108>)
 80010a4:	f005 fc7e 	bl	80069a4 <osThreadNew>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <main+0x10c>)
 80010ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ae:	f005 fc53 	bl	8006958 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b2:	bf00      	nop
 80010b4:	e7fd      	b.n	80010b2 <main+0xbe>
 80010b6:	bf00      	nop
 80010b8:	200002ec 	.word	0x200002ec
 80010bc:	40020400 	.word	0x40020400
 80010c0:	20000294 	.word	0x20000294
 80010c4:	0800e4a8 	.word	0x0800e4a8
 80010c8:	0800e4b8 	.word	0x0800e4b8
 80010cc:	0800e4c4 	.word	0x0800e4c4
 80010d0:	2000037c 	.word	0x2000037c
 80010d4:	0800e4cc 	.word	0x0800e4cc
 80010d8:	0800e59c 	.word	0x0800e59c
 80010dc:	200003d0 	.word	0x200003d0
 80010e0:	0800e530 	.word	0x0800e530
 80010e4:	08001731 	.word	0x08001731
 80010e8:	200003c4 	.word	0x200003c4
 80010ec:	0800e554 	.word	0x0800e554
 80010f0:	08001855 	.word	0x08001855
 80010f4:	200003c8 	.word	0x200003c8
 80010f8:	0800e578 	.word	0x0800e578
 80010fc:	080018ad 	.word	0x080018ad
 8001100:	200003cc 	.word	0x200003cc

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	@ 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f009 fd79 	bl	800ac0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <SystemClock_Config+0xcc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	4a27      	ldr	r2, [pc, #156]	@ (80011d0 <SystemClock_Config+0xcc>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001150:	4a20      	ldr	r2, [pc, #128]	@ (80011d4 <SystemClock_Config+0xd0>)
 8001152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <SystemClock_Config+0xd0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2310      	movs	r3, #16
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001178:	2308      	movs	r3, #8
 800117a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800117c:	2340      	movs	r3, #64	@ 0x40
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001184:	2307      	movs	r3, #7
 8001186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fe4f 	bl	8003e30 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001198:	f000 fbde 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 f8b1 	bl	8004320 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011c4:	f000 fbc8 	bl	8001958 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	@ 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <MX_ADC1_Init+0x98>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <MX_ADC1_Init+0x9c>)
 80011ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001218:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <MX_ADC1_Init+0xa0>)
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001224:	2201      	movs	r2, #1
 8001226:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001238:	f000 ff62 	bl	8002100 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 fb89 	bl	8001958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800124e:	2301      	movs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_ADC1_Init+0x98>)
 8001258:	f001 f8e2 	bl	8002420 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001262:	f000 fb79 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001f8 	.word	0x200001f8
 8001274:	40012000 	.word	0x40012000
 8001278:	0f000001 	.word	0x0f000001

0800127c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_I2C1_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <MX_I2C1_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_I2C1_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <MX_I2C1_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_I2C1_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_I2C1_Init+0x50>)
 80012ba:	f001 fdbf 	bl	8002e3c <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 fb48 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000240 	.word	0x20000240
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0

080012d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_SPI1_Init+0x68>)
 80012de:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <MX_SPI1_Init+0x6c>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_SPI1_Init+0x68>)
 80012e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <MX_SPI1_Init+0x68>)
 80012ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_SPI1_Init+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI1_Init+0x68>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_SPI1_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI1_Init+0x68>)
 8001306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SPI1_Init+0x68>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SPI1_Init+0x68>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SPI1_Init+0x68>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SPI1_Init+0x68>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI1_Init+0x68>)
 8001326:	220a      	movs	r2, #10
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_SPI1_Init+0x68>)
 800132c:	f003 fa4a 	bl	80047c4 <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001336:	f000 fb0f 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000294 	.word	0x20000294
 8001344:	40013000 	.word	0x40013000

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM2_Init+0x94>)
 800136e:	2204      	movs	r2, #4
 8001370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM2_Init+0x94>)
 800137a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800137e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM2_Init+0x94>)
 800138e:	f003 fe23 	bl	8004fd8 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001398:	f000 fade 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM2_Init+0x94>)
 80013aa:	f004 f9d3 	bl	8005754 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013b4:	f000 fad0 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM2_Init+0x94>)
 80013c6:	f004 fdd1 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 fac2 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200002ec 	.word	0x200002ec

080013e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <MX_TIM3_Init+0xac>)
 8001404:	4a22      	ldr	r2, [pc, #136]	@ (8001490 <MX_TIM3_Init+0xb0>)
 8001406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MX_TIM3_Init+0xac>)
 800140a:	2210      	movs	r2, #16
 800140c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <MX_TIM3_Init+0xac>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_TIM3_Init+0xac>)
 8001416:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800141a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <MX_TIM3_Init+0xac>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <MX_TIM3_Init+0xac>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001428:	4818      	ldr	r0, [pc, #96]	@ (800148c <MX_TIM3_Init+0xac>)
 800142a:	f003 fee1 	bl	80051f0 <HAL_TIM_PWM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001434:	f000 fa90 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_TIM3_Init+0xac>)
 8001448:	f004 fd90 	bl	8005f6c <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001452:	f000 fa81 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001456:	2360      	movs	r3, #96	@ 0x60
 8001458:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	@ (800148c <MX_TIM3_Init+0xac>)
 800146e:	f004 f8af 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001478:	f000 fa6e 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147c:	4803      	ldr	r0, [pc, #12]	@ (800148c <MX_TIM3_Init+0xac>)
 800147e:	f000 fbb3 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	@ 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000334 	.word	0x20000334
 8001490:	40000400 	.word	0x40000400

08001494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <MX_USART2_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014cc:	f004 fdd0 	bl	8006070 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f000 fa3f 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000037c 	.word	0x2000037c
 80014e4:	40004400 	.word	0x40004400

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_GPIO_Init+0x7c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <MX_GPIO_Init+0x7c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_GPIO_Init+0x7c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_GPIO_Init+0x7c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <MX_GPIO_Init+0x7c>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_GPIO_Init+0x7c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	480b      	ldr	r0, [pc, #44]	@ (8001568 <MX_GPIO_Init+0x80>)
 800153c:	f001 fc64 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <MX_GPIO_Init+0x80>)
 8001558:	f001 fad2 	bl	8002b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <init_lcd>:

/* USER CODE BEGIN 4 */
void init_lcd(void) {   //follow designated procedure in data sheet
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8001570:	2028      	movs	r0, #40	@ 0x28
 8001572:	f000 fda1 	bl	80020b8 <HAL_Delay>
    shift_out(0x30);    //function set 8-bit
 8001576:	2030      	movs	r0, #48	@ 0x30
 8001578:	f000 f85e 	bl	8001638 <shift_out>
    wait_us(37);
 800157c:	2025      	movs	r0, #37	@ 0x25
 800157e:	f000 f8bc 	bl	80016fa <wait_us>
    write_cmd(0x20);    //function set
 8001582:	2020      	movs	r0, #32
 8001584:	f000 f87c 	bl	8001680 <write_cmd>
    wait_us(37);
 8001588:	2025      	movs	r0, #37	@ 0x25
 800158a:	f000 f8b6 	bl	80016fa <wait_us>
    write_cmd(0x20);    //function set
 800158e:	2020      	movs	r0, #32
 8001590:	f000 f876 	bl	8001680 <write_cmd>
    wait_us(37);
 8001594:	2025      	movs	r0, #37	@ 0x25
 8001596:	f000 f8b0 	bl	80016fa <wait_us>
    write_cmd(0x0C);    //display ON/OFF
 800159a:	200c      	movs	r0, #12
 800159c:	f000 f870 	bl	8001680 <write_cmd>
    wait_us(37);
 80015a0:	2025      	movs	r0, #37	@ 0x25
 80015a2:	f000 f8aa 	bl	80016fa <wait_us>
    write_cmd(0x01);    //display clear
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 f86a 	bl	8001680 <write_cmd>
    wait_us(1520);
 80015ac:	f44f 60be 	mov.w	r0, #1520	@ 0x5f0
 80015b0:	f000 f8a3 	bl	80016fa <wait_us>
    write_cmd(0x06);    //entry-mode set
 80015b4:	2006      	movs	r0, #6
 80015b6:	f000 f863 	bl	8001680 <write_cmd>
    wait_us(37);
 80015ba:	2025      	movs	r0, #37	@ 0x25
 80015bc:	f000 f89d 	bl	80016fa <wait_us>
    write_cmd(0x28);    //function set
 80015c0:	2028      	movs	r0, #40	@ 0x28
 80015c2:	f000 f85d 	bl	8001680 <write_cmd>
    wait_us(37);
 80015c6:	2025      	movs	r0, #37	@ 0x25
 80015c8:	f000 f897 	bl	80016fa <wait_us>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <write_4bit>:

void write_4bit(int data, int mode) {  //mode is RS line, ie 0 for cmd, 1 for data
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    int hi_n;
    int lo_n;
    hi_n = (data & 0xF0);           //form the two 4-bit nibbles that will be sent
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e0:	60fb      	str	r3, [r7, #12]
    lo_n = ((data << 4) &0xF0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	60bb      	str	r3, [r7, #8]
    shift_out(hi_n | ENABLE | mode); //send each word twice, strobing the Enable line
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f043 0208 	orr.w	r2, r3, #8
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f81f 	bl	8001638 <shift_out>
    wait_us(1);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f000 f87d 	bl	80016fa <wait_us>
    shift_out(hi_n & ~ENABLE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 0308 	bic.w	r3, r3, #8
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f816 	bl	8001638 <shift_out>
    shift_out(lo_n | ENABLE | mode);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f043 0208 	orr.w	r2, r3, #8
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f80e 	bl	8001638 <shift_out>
    wait_us(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f000 f86c 	bl	80016fa <wait_us>
    shift_out(lo_n & ~ENABLE);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f023 0308 	bic.w	r3, r3, #8
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f805 	bl	8001638 <shift_out>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <shift_out>:
void shift_out(int data) {     //Invokes SPI
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS LOW
 8001640:	2200      	movs	r2, #0
 8001642:	2140      	movs	r1, #64	@ 0x40
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <shift_out+0x40>)
 8001646:	f001 fbdf 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100); // SEND BUFFER
 800164a:	1d39      	adds	r1, r7, #4
 800164c:	2364      	movs	r3, #100	@ 0x64
 800164e:	2201      	movs	r2, #1
 8001650:	480a      	ldr	r0, [pc, #40]	@ (800167c <shift_out+0x44>)
 8001652:	f003 f940 	bl	80048d6 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001656:	bf00      	nop
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <shift_out+0x44>)
 800165a:	f003 fb6d 	bl	8004d38 <HAL_SPI_GetState>
 800165e:	4603      	mov	r3, r0
 8001660:	2b01      	cmp	r3, #1
 8001662:	d1f9      	bne.n	8001658 <shift_out+0x20>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // CS HIGH
 8001664:	2201      	movs	r2, #1
 8001666:	2140      	movs	r1, #64	@ 0x40
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <shift_out+0x40>)
 800166a:	f001 fbcd 	bl	8002e08 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020400 	.word	0x40020400
 800167c:	20000294 	.word	0x20000294

08001680 <write_cmd>:

void write_cmd(int cmd) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    write_4bit(cmd, COMMAND_MODE);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa0 	bl	80015d0 <write_4bit>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <write_data>:

void write_data(char c) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
    write_4bit(c, DATA_MODE);    //1 for data mode
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2104      	movs	r1, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff92 	bl	80015d0 <write_4bit>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <clr_lcd>:

void clr_lcd(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    write_cmd(0x01);    //display clear
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff ffe1 	bl	8001680 <write_cmd>
    wait_us(1520);
 80016be:	f44f 60be 	mov.w	r0, #1520	@ 0x5f0
 80016c2:	f000 f81a 	bl	80016fa <wait_us>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}

080016ca <print_lcd>:

void print_lcd(const char *string) {
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
    while(*string){
 80016d2:	e009      	b.n	80016e8 <print_lcd+0x1e>
        write_data(*string++);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffdb 	bl	8001698 <write_data>
            wait_us(40);
 80016e2:	2028      	movs	r0, #40	@ 0x28
 80016e4:	f000 f809 	bl	80016fa <wait_us>
    while(*string){
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f1      	bne.n	80016d4 <print_lcd+0xa>
    }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <wait_us>:

void wait_us(uint32_t us){
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
    uint32_t start = TIM2->CNT;
 8001702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	60fb      	str	r3, [r7, #12]
    uint32_t duration = us * 16;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	60bb      	str	r3, [r7, #8]
    while (TIM2->CNT - start < duration);
 8001710:	bf00      	nop
 8001712:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d8f7      	bhi.n	8001712 <wait_us+0x18>
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <StartTempRead>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTempRead */
void StartTempRead(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af02      	add	r7, sp, #8
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
	//Write 0x51 to 0x90 to start temperature conversion
	HAL_I2C_Master_Transmit(&hi2c1, ds1631_addr, &START_CONVERT, 1, 1000);
 8001738:	2390      	movs	r3, #144	@ 0x90
 800173a:	4619      	mov	r1, r3
 800173c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2301      	movs	r3, #1
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <StartTempRead+0xf8>)
 8001746:	4839      	ldr	r0, [pc, #228]	@ (800182c <StartTempRead+0xfc>)
 8001748:	f001 fcbc 	bl	80030c4 <HAL_I2C_Master_Transmit>
	//wait for the conversion to complete
	osDelay(500);
 800174c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001750:	f005 f9ba 	bl	8006ac8 <osDelay>
	//Write 0xAA to 0x90 to read the last converted temperature
	HAL_I2C_Master_Transmit(&hi2c1, ds1631_addr, &READ_TEMP, 1, 1000);
 8001754:	2390      	movs	r3, #144	@ 0x90
 8001756:	4619      	mov	r1, r3
 8001758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	4a33      	ldr	r2, [pc, #204]	@ (8001830 <StartTempRead+0x100>)
 8001762:	4832      	ldr	r0, [pc, #200]	@ (800182c <StartTempRead+0xfc>)
 8001764:	f001 fcae 	bl	80030c4 <HAL_I2C_Master_Transmit>
	//Read the temperature into the read_temp array
	HAL_I2C_Master_Receive(&hi2c1, ds1631_addr, buf, 2, 1000);
 8001768:	2390      	movs	r3, #144	@ 0x90
 800176a:	4619      	mov	r1, r3
 800176c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2302      	movs	r3, #2
 8001774:	4a2f      	ldr	r2, [pc, #188]	@ (8001834 <StartTempRead+0x104>)
 8001776:	482d      	ldr	r0, [pc, #180]	@ (800182c <StartTempRead+0xfc>)
 8001778:	f001 fda2 	bl	80032c0 <HAL_I2C_Master_Receive>
	//Combine the bytes
	val = ((int16_t)buf[0] << 8) | (buf[1]);
 800177c:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <StartTempRead+0x104>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <StartTempRead+0x104>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	b21b      	sxth	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <StartTempRead+0x108>)
 8001790:	801a      	strh	r2, [r3, #0]
	//Convert temperature to Celsius
	temp = (float) val / 256.0;
 8001792:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <StartTempRead+0x108>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800183c <StartTempRead+0x10c>
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <StartTempRead+0x110>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
	sprintf(buf, "Temp: %.4f C\r\n", temp);
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <StartTempRead+0x110>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4921      	ldr	r1, [pc, #132]	@ (8001844 <StartTempRead+0x114>)
 80017be:	481d      	ldr	r0, [pc, #116]	@ (8001834 <StartTempRead+0x104>)
 80017c0:	f009 f9c0 	bl	800ab44 <siprintf>
	//Print temperature to the serial monitor
	HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), 1000);
 80017c4:	481b      	ldr	r0, [pc, #108]	@ (8001834 <StartTempRead+0x104>)
 80017c6:	f7fe fd5b 	bl	8000280 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d2:	4918      	ldr	r1, [pc, #96]	@ (8001834 <StartTempRead+0x104>)
 80017d4:	481c      	ldr	r0, [pc, #112]	@ (8001848 <StartTempRead+0x118>)
 80017d6:	f004 fc9b 	bl	8006110 <HAL_UART_Transmit>
	osMutexAcquire(SPI_MutexHandle, 1000);
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <StartTempRead+0x11c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 fa11 	bl	8006c0a <osMutexAcquire>
	// Transmit buffer to LCD
	sprintf(buf, "%.4f C", temp);
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <StartTempRead+0x110>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4916      	ldr	r1, [pc, #88]	@ (8001850 <StartTempRead+0x120>)
 80017f8:	480e      	ldr	r0, [pc, #56]	@ (8001834 <StartTempRead+0x104>)
 80017fa:	f009 f9a3 	bl	800ab44 <siprintf>
	write_cmd(SET_LINE_2);   //set cursor to second line
 80017fe:	20c0      	movs	r0, #192	@ 0xc0
 8001800:	f7ff ff3e 	bl	8001680 <write_cmd>
	wait_us(40);
 8001804:	2028      	movs	r0, #40	@ 0x28
 8001806:	f7ff ff78 	bl	80016fa <wait_us>
	print_lcd(buf);
 800180a:	480a      	ldr	r0, [pc, #40]	@ (8001834 <StartTempRead+0x104>)
 800180c:	f7ff ff5d 	bl	80016ca <print_lcd>
	osMutexRelease(SPI_MutexHandle);
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <StartTempRead+0x11c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f005 fa43 	bl	8006ca0 <osMutexRelease>
	osDelay(1000);
 800181a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800181e:	f005 f953 	bl	8006ac8 <osDelay>
	HAL_I2C_Master_Transmit(&hi2c1, ds1631_addr, &START_CONVERT, 1, 1000);
 8001822:	bf00      	nop
 8001824:	e788      	b.n	8001738 <StartTempRead+0x8>
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000
 800182c:	20000240 	.word	0x20000240
 8001830:	20000001 	.word	0x20000001
 8001834:	20000424 	.word	0x20000424
 8001838:	2000043c 	.word	0x2000043c
 800183c:	43800000 	.word	0x43800000
 8001840:	20000440 	.word	0x20000440
 8001844:	0800e4d4 	.word	0x0800e4d4
 8001848:	2000037c 	.word	0x2000037c
 800184c:	200003d0 	.word	0x200003d0
 8001850:	0800e4e4 	.word	0x0800e4e4

08001854 <StartCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCounter */
void StartCounter(void *argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCounter */
	uint8_t message[24];
	int count = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  for(;;){
	  sprintf(message, "Count: %d \r\n", count);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001866:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <StartCounter+0x50>)
 8001868:	4618      	mov	r0, r3
 800186a:	f009 f96b 	bl	800ab44 <siprintf>
	  //Print Count to the serial monitor
//	  HAL_UART_Transmit(&huart2, message, strlen((char *)message), 1000);
	  sprintf(message, "%d", count);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <StartCounter+0x54>)
 8001876:	4618      	mov	r0, r3
 8001878:	f009 f964 	bl	800ab44 <siprintf>
	  write_cmd(SET_LINE_4);   //set cursor to second line
 800187c:	20d4      	movs	r0, #212	@ 0xd4
 800187e:	f7ff feff 	bl	8001680 <write_cmd>
	  wait_us(40);
 8001882:	2028      	movs	r0, #40	@ 0x28
 8001884:	f7ff ff39 	bl	80016fa <wait_us>
	  print_lcd(message);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff1c 	bl	80016ca <print_lcd>
	  count++;
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
	  osDelay(100);
 8001898:	2064      	movs	r0, #100	@ 0x64
 800189a:	f005 f915 	bl	8006ac8 <osDelay>
	  sprintf(message, "Count: %d \r\n", count);
 800189e:	bf00      	nop
 80018a0:	e7de      	b.n	8001860 <StartCounter+0xc>
 80018a2:	bf00      	nop
 80018a4:	0800e4ec 	.word	0x0800e4ec
 80018a8:	0800e4fc 	.word	0x0800e4fc

080018ac <StartCtrlLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCtrlLED */
void StartCtrlLED(void *argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCtrlLED */
	uint8_t message[16];
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018b4:	2100      	movs	r1, #0
 80018b6:	481b      	ldr	r0, [pc, #108]	@ (8001924 <StartCtrlLED+0x78>)
 80018b8:	f003 fcea 	bl	8005290 <HAL_TIM_PWM_Start>
	uint16_t dutyCycle = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80018bc:	2100      	movs	r1, #0
 80018be:	4819      	ldr	r0, [pc, #100]	@ (8001924 <StartCtrlLED+0x78>)
 80018c0:	f004 f810 	bl	80058e4 <HAL_TIM_ReadCapturedValue>
 80018c4:	4603      	mov	r3, r0
 80018c6:	83fb      	strh	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80018c8:	4817      	ldr	r0, [pc, #92]	@ (8001928 <StartCtrlLED+0x7c>)
 80018ca:	f000 fc5d 	bl	8002188 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80018ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018d2:	4815      	ldr	r0, [pc, #84]	@ (8001928 <StartCtrlLED+0x7c>)
 80018d4:	f000 fd0c 	bl	80022f0 <HAL_ADC_PollForConversion>
	  dutyCycle = HAL_ADC_GetValue(&hadc1);
 80018d8:	4813      	ldr	r0, [pc, #76]	@ (8001928 <StartCtrlLED+0x7c>)
 80018da:	f000 fd94 	bl	8002406 <HAL_ADC_GetValue>
 80018de:	4603      	mov	r3, r0
 80018e0:	83fb      	strh	r3, [r7, #30]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle*16);
 80018e2:	8bfb      	ldrh	r3, [r7, #30]
 80018e4:	011a      	lsls	r2, r3, #4
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <StartCtrlLED+0x78>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
	  sprintf(message, "Duty Cycle Val: %d \r\n", dutyCycle*16);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	011a      	lsls	r2, r3, #4
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	490d      	ldr	r1, [pc, #52]	@ (800192c <StartCtrlLED+0x80>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f009 f924 	bl	800ab44 <siprintf>
	  HAL_UART_Transmit(&huart2, message, strlen((char *)message), 1000);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fcbd 	bl	8000280 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	b29a      	uxth	r2, r3
 800190a:	f107 010c 	add.w	r1, r7, #12
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <StartCtrlLED+0x84>)
 8001914:	f004 fbfc 	bl	8006110 <HAL_UART_Transmit>
	  osDelay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f005 f8d5 	bl	8006ac8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 800191e:	bf00      	nop
 8001920:	e7d2      	b.n	80018c8 <StartCtrlLED+0x1c>
 8001922:	bf00      	nop
 8001924:	20000334 	.word	0x20000334
 8001928:	200001f8 	.word	0x200001f8
 800192c:	0800e500 	.word	0x0800e500
 8001930:	2000037c 	.word	0x2000037c

08001934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001946:	f000 fb97 	bl	8002078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000c00 	.word	0x40000c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <Error_Handler+0x8>

08001964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_MspInit+0x54>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <HAL_MspInit+0x54>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_MspInit+0x54>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_MspInit+0x54>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_MspInit+0x54>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_MspInit+0x54>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	210f      	movs	r1, #15
 80019a6:	f06f 0001 	mvn.w	r0, #1
 80019aa:	f001 f80f 	bl	80029cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_ADC_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d127      	bne.n	8001a2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a15      	ldr	r2, [pc, #84]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_ADC_MspInit+0x80>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_ADC_MspInit+0x84>)
 8001a2a:	f001 f869 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_I2C_MspInit+0x84>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12c      	bne.n	8001ac0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a88:	2312      	movs	r3, #18
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a94:	2304      	movs	r3, #4
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <HAL_I2C_MspInit+0x8c>)
 8001aa0:	f001 f82e 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001aae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <HAL_SPI_MspInit+0x84>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12b      	bne.n	8001b4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b2e:	23a0      	movs	r3, #160	@ 0xa0
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b4a:	f000 ffd9 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	@ 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b74:	d10d      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <HAL_TIM_MspPostInit+0x68>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11d      	bne.n	8001c46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c26:	2340      	movs	r3, #64	@ 0x40
 8001c28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <HAL_TIM_MspPostInit+0x70>)
 8001c42:	f000 ff5d 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_UART_MspInit+0x84>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12b      	bne.n	8001cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_UART_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_UART_MspInit+0x8c>)
 8001cd2:	f000 ff15 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	@ 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	@ 0x38
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_InitTick+0xe4>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	4a32      	ldr	r2, [pc, #200]	@ (8001dd0 <HAL_InitTick+0xe4>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0c:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <HAL_InitTick+0xe4>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fd1c 	bl	8004760 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d32:	f002 fced 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8001d36:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d38:	e004      	b.n	8001d44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d3a:	f002 fce9 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d46:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <HAL_InitTick+0xe8>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001d52:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d54:	4a21      	ldr	r2, [pc, #132]	@ (8001ddc <HAL_InitTick+0xf0>)
 8001d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d64:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001d78:	4817      	ldr	r0, [pc, #92]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d7a:	f003 f92d 	bl	8004fd8 <HAL_TIM_Base_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001d8c:	4812      	ldr	r0, [pc, #72]	@ (8001dd8 <HAL_InitTick+0xec>)
 8001d8e:	f003 f9cd 	bl	800512c <HAL_TIM_Base_Start_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d111      	bne.n	8001dc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001da0:	2032      	movs	r0, #50	@ 0x32
 8001da2:	f000 fe2f 	bl	8002a04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d808      	bhi.n	8001dbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	2032      	movs	r0, #50	@ 0x32
 8001db2:	f000 fe0b 	bl	80029cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_InitTick+0xf4>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e002      	b.n	8001dc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3738      	adds	r7, #56	@ 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	20000444 	.word	0x20000444
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	20000008 	.word	0x20000008

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <TIM5_IRQHandler+0x10>)
 8001e22:	f003 fae5 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000444 	.word	0x20000444

08001e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_kill>:

int _kill(int pid, int sig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e4a:	f008 ff87 	bl	800ad5c <__errno>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
  return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_exit>:

void _exit (int status)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ffe7 	bl	8001e40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e72:	bf00      	nop
 8001e74:	e7fd      	b.n	8001e72 <_exit+0x12>

08001e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e00a      	b.n	8001e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e88:	f3af 8000 	nop.w
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	b2ca      	uxtb	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbf0      	blt.n	8001e88 <_read+0x12>
  }

  return len;
 8001ea6:	687b      	ldr	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e009      	b.n	8001ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbf1      	blt.n	8001ec2 <_write+0x12>
  }
  return len;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_close>:

int _close(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f10:	605a      	str	r2, [r3, #4]
  return 0;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_isatty>:

int _isatty(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f008 feec 	bl	800ad5c <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20018000 	.word	0x20018000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	2000048c 	.word	0x2000048c
 8001fb8:	20004fc8 	.word	0x20004fc8

08001fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <SystemInit+0x20>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <SystemInit+0x20>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fe4:	f7ff ffea 	bl	8001fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fea:	490d      	ldr	r1, [pc, #52]	@ (8002020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff0:	e002      	b.n	8001ff8 <LoopCopyDataInit>

08001ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff6:	3304      	adds	r3, #4

08001ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ffc:	d3f9      	bcc.n	8001ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002000:	4c0a      	ldr	r4, [pc, #40]	@ (800202c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002004:	e001      	b.n	800200a <LoopFillZerobss>

08002006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002008:	3204      	adds	r2, #4

0800200a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800200c:	d3fb      	bcc.n	8002006 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800200e:	f008 feab 	bl	800ad68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002012:	f7fe ffef 	bl	8000ff4 <main>
  bx  lr    
 8002016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002018:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002020:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002024:	0800ea00 	.word	0x0800ea00
  ldr r2, =_sbss
 8002028:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800202c:	20004fc8 	.word	0x20004fc8

08002030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC_IRQHandler>
	...

08002034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002038:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <HAL_Init+0x40>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_Init+0x40>)
 800204a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800204e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <HAL_Init+0x40>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 fcaa 	bl	80029b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	200f      	movs	r0, #15
 8002064:	f7ff fe42 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7ff fc7c 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023c00 	.word	0x40023c00

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000000c 	.word	0x2000000c
 800209c:	20000490 	.word	0x20000490

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000490 	.word	0x20000490

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000000c 	.word	0x2000000c

08002100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e033      	b.n	800217e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fc4c 	bl	80019bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	f043 0202 	orr.w	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa86 	bl	8002664 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	@ 0x40
 800216e:	e001      	b.n	8002174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Start+0x1a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e097      	b.n	80022d2 <HAL_ADC_Start+0x14a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d018      	beq.n	80021ea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c8:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_ADC_Start+0x158>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a45      	ldr	r2, [pc, #276]	@ (80022e4 <HAL_ADC_Start+0x15c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9a      	lsrs	r2, r3, #18
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f9      	bne.n	80021de <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d15f      	bne.n	80022b8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002222:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002236:	d106      	bne.n	8002246 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	f023 0206 	bic.w	r2, r3, #6
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44
 8002244:	e002      	b.n	800224c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_ADC_Start+0x160>)
 8002256:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002260:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d129      	bne.n	80022d0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	e020      	b.n	80022d0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	@ (80022ec <HAL_ADC_Start+0x164>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d11b      	bne.n	80022d0 <HAL_ADC_Start+0x148>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d114      	bne.n	80022d0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	e00b      	b.n	80022d0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f043 0210 	orr.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000004 	.word	0x20000004
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	40012300 	.word	0x40012300
 80022ec:	40012000 	.word	0x40012000

080022f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230c:	d113      	bne.n	8002336 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800231c:	d10b      	bne.n	8002336 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e063      	b.n	80023fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002336:	f7ff feb3 	bl	80020a0 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800233c:	e021      	b.n	8002382 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002344:	d01d      	beq.n	8002382 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_ADC_PollForConversion+0x6c>
 800234c:	f7ff fea8 	bl	80020a0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d212      	bcs.n	8002382 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d00b      	beq.n	8002382 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e03d      	b.n	80023fe <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d1d6      	bne.n	800233e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0212 	mvn.w	r2, #18
 8002398:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d123      	bne.n	80023fc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11f      	bne.n	80023fc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d111      	bne.n	80023fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c>
 8002438:	2302      	movs	r3, #2
 800243a:	e105      	b.n	8002648 <HAL_ADC_ConfigChannel+0x228>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d925      	bls.n	8002498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68d9      	ldr	r1, [r3, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	3b1e      	subs	r3, #30
 8002462:	2207      	movs	r2, #7
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43da      	mvns	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	400a      	ands	r2, r1
 8002470:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68d9      	ldr	r1, [r3, #12]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	4603      	mov	r3, r0
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4403      	add	r3, r0
 800248a:	3b1e      	subs	r3, #30
 800248c:	409a      	lsls	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	e022      	b.n	80024de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	2207      	movs	r2, #7
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	400a      	ands	r2, r1
 80024ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4403      	add	r3, r0
 80024d4:	409a      	lsls	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d824      	bhi.n	8002530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b05      	subs	r3, #5
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b05      	subs	r3, #5
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34
 800252e:	e04c      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b0c      	cmp	r3, #12
 8002536:	d824      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b23      	subs	r3, #35	@ 0x23
 800254a:	221f      	movs	r2, #31
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b23      	subs	r3, #35	@ 0x23
 8002574:	fa00 f203 	lsl.w	r2, r0, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002580:	e023      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b41      	subs	r3, #65	@ 0x41
 8002594:	221f      	movs	r2, #31
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b41      	subs	r3, #65	@ 0x41
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_ADC_ConfigChannel+0x234>)
 80025cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <HAL_ADC_ConfigChannel+0x238>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1cc>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b12      	cmp	r3, #18
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_ADC_ConfigChannel+0x238>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d123      	bne.n	800263e <HAL_ADC_ConfigChannel+0x21e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d003      	beq.n	8002606 <HAL_ADC_ConfigChannel+0x1e6>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b11      	cmp	r3, #17
 8002604:	d11b      	bne.n	800263e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b10      	cmp	r3, #16
 8002618:	d111      	bne.n	800263e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_ADC_ConfigChannel+0x23c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a10      	ldr	r2, [pc, #64]	@ (8002660 <HAL_ADC_ConfigChannel+0x240>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9a      	lsrs	r2, r3, #18
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002630:	e002      	b.n	8002638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40012300 	.word	0x40012300
 8002658:	40012000 	.word	0x40012000
 800265c:	20000004 	.word	0x20000004
 8002660:	431bde83 	.word	0x431bde83

08002664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266c:	4b79      	ldr	r3, [pc, #484]	@ (8002854 <ADC_Init+0x1f0>)
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	4a58      	ldr	r2, [pc, #352]	@ (8002858 <ADC_Init+0x1f4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800270a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800272c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	e00f      	b.n	8002762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0202 	bic.w	r2, r2, #2
 8002770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	005a      	lsls	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800279e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	3b01      	subs	r3, #1
 80027bc:	035a      	lsls	r2, r3, #13
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e007      	b.n	80027d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	051a      	lsls	r2, r3, #20
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800280c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800281a:	025a      	lsls	r2, r3, #9
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	029a      	lsls	r2, r3, #10
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40012300 	.word	0x40012300
 8002858:	0f000001 	.word	0x0f000001

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	@ (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	@ (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	@ (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	@ 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	@ 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff4c 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029de:	f7ff ff61 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 80029e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	6978      	ldr	r0, [r7, #20]
 80029ea:	f7ff ffb1 	bl	8002950 <NVIC_EncodePriority>
 80029ee:	4602      	mov	r2, r0
 80029f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff80 	bl	80028fc <__NVIC_SetPriority>
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff54 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a2e:	f7ff fb37 	bl	80020a0 <HAL_GetTick>
 8002a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2280      	movs	r2, #128	@ 0x80
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e052      	b.n	8002af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_Abort+0x62>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa2:	e013      	b.n	8002acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa4:	f7ff fafc 	bl	80020a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d90c      	bls.n	8002acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e015      	b.n	8002af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e4      	bne.n	8002aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	223f      	movs	r2, #63	@ 0x3f
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	@ 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e159      	b.n	8002dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8148 	bne.w	8002dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	4a56      	ldr	r2, [pc, #344]	@ (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c96:	4b54      	ldr	r3, [pc, #336]	@ (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_GPIO_Init+0x2ec>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	@ (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	@ (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	@ (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1f6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	@ (8002e00 <HAL_GPIO_Init+0x300>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1f2>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	@ (8002dec <HAL_GPIO_Init+0x2ec>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a24      	ldr	r2, [pc, #144]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002e04 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f aea2 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e12b      	b.n	80030a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fdee 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	@ 0x24
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f001 fc36 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a81      	ldr	r2, [pc, #516]	@ (80030b0 <HAL_I2C_Init+0x274>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d807      	bhi.n	8002ec0 <HAL_I2C_Init+0x84>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a80      	ldr	r2, [pc, #512]	@ (80030b4 <HAL_I2C_Init+0x278>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	bf94      	ite	ls
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2300      	movhi	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e006      	b.n	8002ece <HAL_I2C_Init+0x92>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80030b8 <HAL_I2C_Init+0x27c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bf94      	ite	ls
 8002ec8:	2301      	movls	r3, #1
 8002eca:	2300      	movhi	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0e7      	b.n	80030a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a78      	ldr	r2, [pc, #480]	@ (80030bc <HAL_I2C_Init+0x280>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0c9b      	lsrs	r3, r3, #18
 8002ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a6a      	ldr	r2, [pc, #424]	@ (80030b0 <HAL_I2C_Init+0x274>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d802      	bhi.n	8002f10 <HAL_I2C_Init+0xd4>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	e009      	b.n	8002f24 <HAL_I2C_Init+0xe8>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	4a69      	ldr	r2, [pc, #420]	@ (80030c0 <HAL_I2C_Init+0x284>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	3301      	adds	r3, #1
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	495c      	ldr	r1, [pc, #368]	@ (80030b0 <HAL_I2C_Init+0x274>)
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d819      	bhi.n	8002f78 <HAL_I2C_Init+0x13c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e59      	subs	r1, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f58:	400b      	ands	r3, r1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_I2C_Init+0x138>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1e59      	subs	r1, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f72:	e051      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e04f      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d111      	bne.n	8002fa4 <HAL_I2C_Init+0x168>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e012      	b.n	8002fca <HAL_I2C_Init+0x18e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	0099      	lsls	r1, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Init+0x196>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e022      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_I2C_Init+0x1bc>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e58      	subs	r0, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	440b      	add	r3, r1
 8002fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff6:	e00f      	b.n	8003018 <HAL_I2C_Init+0x1dc>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	6809      	ldr	r1, [r1, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003046:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6911      	ldr	r1, [r2, #16]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68d2      	ldr	r2, [r2, #12]
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	000186a0 	.word	0x000186a0
 80030b4:	001e847f 	.word	0x001e847f
 80030b8:	003d08ff 	.word	0x003d08ff
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	10624dd3 	.word	0x10624dd3

080030c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
 80030d4:	4613      	mov	r3, r2
 80030d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7fe ffe2 	bl	80020a0 <HAL_GetTick>
 80030dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	f040 80e0 	bne.w	80032ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2319      	movs	r3, #25
 80030f2:	2201      	movs	r2, #1
 80030f4:	4970      	ldr	r1, [pc, #448]	@ (80032b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fc64 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	e0d3      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2C_Master_Transmit+0x50>
 8003110:	2302      	movs	r3, #2
 8003112:	e0cc      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d007      	beq.n	800313a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2221      	movs	r2, #33	@ 0x21
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2210      	movs	r2, #16
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	893a      	ldrh	r2, [r7, #8]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a50      	ldr	r2, [pc, #320]	@ (80032bc <HAL_I2C_Master_Transmit+0x1f8>)
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 face 	bl	8003724 <I2C_MasterRequestWrite>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e08d      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031a8:	e066      	b.n	8003278 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6a39      	ldr	r1, [r7, #32]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fd22 	bl	8003bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_I2C_Master_Transmit+0x188>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fd19 	bl	8003c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003272:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e01a      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d194      	bne.n	80031aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000

080032c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	@ 0x30
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	817b      	strh	r3, [r7, #10]
 80032d0:	4613      	mov	r3, r2
 80032d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7fe fee4 	bl	80020a0 <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	f040 8217 	bne.w	8003716 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2319      	movs	r3, #25
 80032ee:	2201      	movs	r2, #1
 80032f0:	497c      	ldr	r1, [pc, #496]	@ (80034e4 <HAL_I2C_Master_Receive+0x224>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fb66 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	e20a      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_I2C_Master_Receive+0x50>
 800330c:	2302      	movs	r3, #2
 800330e:	e203      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d007      	beq.n	8003336 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003344:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2222      	movs	r2, #34	@ 0x22
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2210      	movs	r2, #16
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	893a      	ldrh	r2, [r7, #8]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a5c      	ldr	r2, [pc, #368]	@ (80034e8 <HAL_I2C_Master_Receive+0x228>)
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa52 	bl	8003828 <I2C_MasterRequestRead>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1c4      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d113      	bne.n	80033be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e198      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d11b      	bne.n	80033fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e178      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	2b02      	cmp	r3, #2
 8003404:	d11b      	bne.n	800343e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003414:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	e158      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800344c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003464:	e144      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b03      	cmp	r3, #3
 800346c:	f200 80f1 	bhi.w	8003652 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	2b01      	cmp	r3, #1
 8003476:	d123      	bne.n	80034c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fc4b 	bl	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e145      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034be:	e117      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d14e      	bne.n	8003566 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	2200      	movs	r2, #0
 80034d0:	4906      	ldr	r1, [pc, #24]	@ (80034ec <HAL_I2C_Master_Receive+0x22c>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa76 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e11a      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
 80034e2:	bf00      	nop
 80034e4:	00100002 	.word	0x00100002
 80034e8:	ffff0000 	.word	0xffff0000
 80034ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003564:	e0c4      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	2200      	movs	r2, #0
 800356e:	496c      	ldr	r1, [pc, #432]	@ (8003720 <HAL_I2C_Master_Receive+0x460>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fa27 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0cb      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	2200      	movs	r2, #0
 80035ca:	4955      	ldr	r1, [pc, #340]	@ (8003720 <HAL_I2C_Master_Receive+0x460>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f9f9 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e09d      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003650:	e04e      	b.n	80036f0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb5e 	bl	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e058      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d124      	bne.n	80036f0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f aeb6 	bne.w	8003466 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	@ 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	00010004 	.word	0x00010004

08003724 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	460b      	mov	r3, r1
 8003732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d006      	beq.n	800374e <I2C_MasterRequestWrite+0x2a>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d003      	beq.n	800374e <I2C_MasterRequestWrite+0x2a>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800374c:	d108      	bne.n	8003760 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e00b      	b.n	8003778 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	2b12      	cmp	r3, #18
 8003766:	d107      	bne.n	8003778 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003776:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f91d 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379e:	d103      	bne.n	80037a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e035      	b.n	8003818 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b4:	d108      	bne.n	80037c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037c4:	611a      	str	r2, [r3, #16]
 80037c6:	e01b      	b.n	8003800 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c8:	897b      	ldrh	r3, [r7, #10]
 80037ca:	11db      	asrs	r3, r3, #7
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0306 	and.w	r3, r3, #6
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f063 030f 	orn	r3, r3, #15
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	490e      	ldr	r1, [pc, #56]	@ (8003820 <I2C_MasterRequestWrite+0xfc>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f966 	bl	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e010      	b.n	8003818 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4907      	ldr	r1, [pc, #28]	@ (8003824 <I2C_MasterRequestWrite+0x100>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f956 	bl	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00010008 	.word	0x00010008
 8003824:	00010002 	.word	0x00010002

08003828 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800384c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d006      	beq.n	8003862 <I2C_MasterRequestRead+0x3a>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d003      	beq.n	8003862 <I2C_MasterRequestRead+0x3a>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003860:	d108      	bne.n	8003874 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e00b      	b.n	800388c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	2b11      	cmp	r3, #17
 800387a:	d107      	bne.n	800388c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f893 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b2:	d103      	bne.n	80038bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e079      	b.n	80039b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038c8:	d108      	bne.n	80038dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]
 80038da:	e05f      	b.n	800399c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038dc:	897b      	ldrh	r3, [r7, #10]
 80038de:	11db      	asrs	r3, r3, #7
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0306 	and.w	r3, r3, #6
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f063 030f 	orn	r3, r3, #15
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4930      	ldr	r1, [pc, #192]	@ (80039bc <I2C_MasterRequestRead+0x194>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8dc 	bl	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e054      	b.n	80039b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4929      	ldr	r1, [pc, #164]	@ (80039c0 <I2C_MasterRequestRead+0x198>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f8cc 	bl	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e044      	b.n	80039b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800394e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f831 	bl	80039c4 <I2C_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003976:	d103      	bne.n	8003980 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e017      	b.n	80039b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f063 030e 	orn	r3, r3, #14
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4907      	ldr	r1, [pc, #28]	@ (80039c0 <I2C_MasterRequestRead+0x198>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f888 	bl	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	00010008 	.word	0x00010008
 80039c0:	00010002 	.word	0x00010002

080039c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d4:	e048      	b.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039dc:	d044      	beq.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fb5f 	bl	80020a0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d139      	bne.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10d      	bne.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	e00c      	b.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d116      	bne.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e023      	b.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	e00c      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d093      	beq.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac6:	e071      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d123      	bne.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e067      	b.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b26:	d041      	beq.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe faba 	bl	80020a0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d136      	bne.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10c      	bne.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e00b      	b.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e021      	b.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10c      	bne.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e00b      	b.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f af6d 	bne.w	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c04:	e034      	b.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f8e3 	bl	8003dd2 <I2C_IsAcknowledgeFailed>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e034      	b.n	8003c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c1c:	d028      	beq.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fa3f 	bl	80020a0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11d      	bne.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3e:	2b80      	cmp	r3, #128	@ 0x80
 8003c40:	d016      	beq.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d1c3      	bne.n	8003c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c94:	e034      	b.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f89b 	bl	8003dd2 <I2C_IsAcknowledgeFailed>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e034      	b.n	8003d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cac:	d028      	beq.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe f9f7 	bl	80020a0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d11d      	bne.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d016      	beq.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d1c3      	bne.n	8003c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d24:	e049      	b.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d119      	bne.n	8003d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0210 	mvn.w	r2, #16
 8003d3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e030      	b.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d68:	f7fe f99a 	bl	80020a0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d016      	beq.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e007      	b.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d1ae      	bne.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de8:	d11b      	bne.n	8003e22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003df2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e267      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d075      	beq.n	8003f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e4e:	4b88      	ldr	r3, [pc, #544]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b82      	ldr	r3, [pc, #520]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b7e      	ldr	r3, [pc, #504]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e242      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003e96:	4b76      	ldr	r3, [pc, #472]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b70      	ldr	r3, [pc, #448]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	4b69      	ldr	r3, [pc, #420]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b66      	ldr	r3, [pc, #408]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe f8da 	bl	80020a0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe f8d6 	bl	80020a0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e207      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5b      	ldr	r3, [pc, #364]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe f8c6 	bl	80020a0 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe f8c2 	bl	80020a0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1f3      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f46:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b44      	ldr	r3, [pc, #272]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c7      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4937      	ldr	r1, [pc, #220]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b34      	ldr	r3, [pc, #208]	@ (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe f87b 	bl	80020a0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe f877 	bl	80020a0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1a8      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b28      	ldr	r3, [pc, #160]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4925      	ldr	r1, [pc, #148]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f85a 	bl	80020a0 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe f856 	bl	80020a0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e187      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b15      	ldr	r3, [pc, #84]	@ (8004078 <HAL_RCC_OscConfig+0x248>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe f83a 	bl	80020a0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004030:	f7fe f836 	bl	80020a0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e167      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x200>
 800404e:	e01b      	b.n	8004088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_OscConfig+0x248>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fe f823 	bl	80020a0 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00e      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405e:	f7fe f81f 	bl	80020a0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d907      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e150      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8097 	beq.w	80041c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b81      	ldr	r3, [pc, #516]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b7d      	ldr	r3, [pc, #500]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	4a7c      	ldr	r2, [pc, #496]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b6:	4b7a      	ldr	r3, [pc, #488]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b77      	ldr	r3, [pc, #476]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b74      	ldr	r3, [pc, #464]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a73      	ldr	r2, [pc, #460]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fd ffdf 	bl	80020a0 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fd ffdb 	bl	80020a0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b6a      	ldr	r3, [pc, #424]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x2ea>
 800410c:	4b64      	ldr	r3, [pc, #400]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	4a63      	ldr	r2, [pc, #396]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	@ 0x70
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x30c>
 8004122:	4b5f      	ldr	r3, [pc, #380]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	4a5e      	ldr	r2, [pc, #376]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	@ 0x70
 800412e:	4b5c      	ldr	r3, [pc, #368]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4a5b      	ldr	r2, [pc, #364]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	@ 0x70
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800413c:	4b58      	ldr	r3, [pc, #352]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004140:	4a57      	ldr	r2, [pc, #348]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	@ 0x70
 8004148:	4b55      	ldr	r3, [pc, #340]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414c:	4a54      	ldr	r2, [pc, #336]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 0304 	bic.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd ffa0 	bl	80020a0 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd ff9c 	bl	80020a0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0cb      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b49      	ldr	r3, [pc, #292]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCC_OscConfig+0x334>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004188:	f7fd ff8a 	bl	80020a0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd ff86 	bl	80020a0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0b5      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	4b3e      	ldr	r3, [pc, #248]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ee      	bne.n	8004190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	4a38      	ldr	r2, [pc, #224]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a1 	beq.w	8004310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b34      	ldr	r3, [pc, #208]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d05c      	beq.n	8004294 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d141      	bne.n	8004266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fd ff5a 	bl	80020a0 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd ff56 	bl	80020a0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e087      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	491b      	ldr	r1, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd ff2f 	bl	80020a0 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd ff2b 	bl	80020a0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e05c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x416>
 8004264:	e054      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fd ff18 	bl	80020a0 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd ff14 	bl	80020a0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e045      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
 8004292:	e03d      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e038      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x4ec>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d028      	beq.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d121      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11a      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	3b01      	subs	r3, #1
 80042f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0cc      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b68      	ldr	r3, [pc, #416]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d90c      	bls.n	800435c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b65      	ldr	r3, [pc, #404]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0b8      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004374:	4b59      	ldr	r3, [pc, #356]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800437e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800438c:	4b53      	ldr	r3, [pc, #332]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a52      	ldr	r2, [pc, #328]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b50      	ldr	r3, [pc, #320]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	494d      	ldr	r1, [pc, #308]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e067      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4934      	ldr	r1, [pc, #208]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fd fe46 	bl	80020a0 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fd fe42 	bl	80020a0 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d20c      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b22      	ldr	r3, [pc, #136]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e032      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4916      	ldr	r1, [pc, #88]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	490e      	ldr	r1, [pc, #56]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044a6:	f000 f821 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	490a      	ldr	r1, [pc, #40]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a09      	ldr	r2, [pc, #36]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044c2:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fc10 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00
 80044dc:	40023800 	.word	0x40023800
 80044e0:	0800e5ac 	.word	0x0800e5ac
 80044e4:	20000004 	.word	0x20000004
 80044e8:	20000008 	.word	0x20000008

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b094      	sub	sp, #80	@ 0x50
 80044f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004504:	4b79      	ldr	r3, [pc, #484]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d00d      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x40>
 8004510:	2b08      	cmp	r3, #8
 8004512:	f200 80e1 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x3a>
 800451e:	e0db      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b73      	ldr	r3, [pc, #460]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004524:	e0db      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004526:	4b73      	ldr	r3, [pc, #460]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452a:	e0d8      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800452c:	4b6f      	ldr	r3, [pc, #444]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004534:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004536:	4b6d      	ldr	r3, [pc, #436]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b6a      	ldr	r3, [pc, #424]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	2200      	movs	r2, #0
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800454c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
 800455a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	0159      	lsls	r1, r3, #5
 800456c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004570:	0150      	lsls	r0, r2, #5
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4621      	mov	r1, r4
 8004578:	1a51      	subs	r1, r2, r1
 800457a:	6139      	str	r1, [r7, #16]
 800457c:	4629      	mov	r1, r5
 800457e:	eb63 0301 	sbc.w	r3, r3, r1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004590:	4659      	mov	r1, fp
 8004592:	018b      	lsls	r3, r1, #6
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800459a:	4651      	mov	r1, sl
 800459c:	018a      	lsls	r2, r1, #6
 800459e:	4651      	mov	r1, sl
 80045a0:	ebb2 0801 	subs.w	r8, r2, r1
 80045a4:	4659      	mov	r1, fp
 80045a6:	eb63 0901 	sbc.w	r9, r3, r1
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045be:	4690      	mov	r8, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	eb18 0303 	adds.w	r3, r8, r3
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	462b      	mov	r3, r5
 80045cc:	eb49 0303 	adc.w	r3, r9, r3
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045de:	4629      	mov	r1, r5
 80045e0:	024b      	lsls	r3, r1, #9
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e8:	4621      	mov	r1, r4
 80045ea:	024a      	lsls	r2, r1, #9
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	2200      	movs	r2, #0
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045fc:	f7fc fb4c 	bl	8000c98 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	e058      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460a:	4b38      	ldr	r3, [pc, #224]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	099b      	lsrs	r3, r3, #6
 8004610:	2200      	movs	r2, #0
 8004612:	4618      	mov	r0, r3
 8004614:	4611      	mov	r1, r2
 8004616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	f04f 0000 	mov.w	r0, #0
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	0159      	lsls	r1, r3, #5
 8004632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004636:	0150      	lsls	r0, r2, #5
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4641      	mov	r1, r8
 800463e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb63 0b01 	sbc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800465c:	ebb2 040a 	subs.w	r4, r2, sl
 8004660:	eb63 050b 	sbc.w	r5, r3, fp
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	00eb      	lsls	r3, r5, #3
 800466e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004672:	00e2      	lsls	r2, r4, #3
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
 8004678:	4643      	mov	r3, r8
 800467a:	18e3      	adds	r3, r4, r3
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	464b      	mov	r3, r9
 8004680:	eb45 0303 	adc.w	r3, r5, r3
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004692:	4629      	mov	r1, r5
 8004694:	028b      	lsls	r3, r1, #10
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800469c:	4621      	mov	r1, r4
 800469e:	028a      	lsls	r2, r1, #10
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	2200      	movs	r2, #0
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	61fa      	str	r2, [r7, #28]
 80046ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b0:	f7fc faf2 	bl	8000c98 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3750      	adds	r7, #80	@ 0x50
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	@ (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000004 	.word	0x20000004

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800e5bc 	.word	0x0800e5bc

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffdc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0b5b      	lsrs	r3, r3, #13
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	@ (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800e5bc 	.word	0x0800e5bc

08004760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	220f      	movs	r2, #15
 800476e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004770:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0203 	and.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800477c:	4b0f      	ldr	r3, [pc, #60]	@ (80047bc <HAL_RCC_GetClockConfig+0x5c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004788:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <HAL_RCC_GetClockConfig+0x5c>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_RCC_GetClockConfig+0x5c>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047a2:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <HAL_RCC_GetClockConfig+0x60>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40023c00 	.word	0x40023c00

080047c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07b      	b.n	80048ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e6:	d009      	beq.n	80047fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]
 80047ee:	e005      	b.n	80047fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd f95c 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	ea42 0103 	orr.w	r1, r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f003 0104 	and.w	r1, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	f003 0210 	and.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b088      	sub	sp, #32
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048e6:	f7fd fbdb 	bl	80020a0 <HAL_GetTick>
 80048ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
 80048fe:	e12a      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_Transmit+0x36>
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e122      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_SPI_Transmit+0x48>
 800491a:	2302      	movs	r3, #2
 800491c:	e11b      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2203      	movs	r2, #3
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496c:	d10f      	bne.n	800498e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800497c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800498c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d007      	beq.n	80049ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b4:	d152      	bne.n	8004a5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Transmit+0xee>
 80049be:	8b7b      	ldrh	r3, [r7, #26]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d145      	bne.n	8004a50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049e8:	e032      	b.n	8004a50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d112      	bne.n	8004a1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a1c:	e018      	b.n	8004a50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1e:	f7fd fb3f 	bl	80020a0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d803      	bhi.n	8004a36 <HAL_SPI_Transmit+0x160>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_Transmit+0x166>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e082      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1c7      	bne.n	80049ea <HAL_SPI_Transmit+0x114>
 8004a5a:	e053      	b.n	8004b04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Transmit+0x194>
 8004a64:	8b7b      	ldrh	r3, [r7, #26]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d147      	bne.n	8004afa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a90:	e033      	b.n	8004afa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d113      	bne.n	8004ac8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ac6:	e018      	b.n	8004afa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac8:	f7fd faea 	bl	80020a0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d803      	bhi.n	8004ae0 <HAL_SPI_Transmit+0x20a>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Transmit+0x210>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e02d      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1c6      	bne.n	8004a92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f9ab 	bl	8004e64 <SPI_EndRxTxTransaction>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8004d28 <HAL_SPI_Abort+0x1c8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	@ (8004d2c <HAL_SPI_Abort+0x1cc>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0a5b      	lsrs	r3, r3, #9
 8004b78:	2264      	movs	r2, #100	@ 0x64
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ba0:	d117      	bne.n	8004bd2 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a62      	ldr	r2, [pc, #392]	@ (8004d30 <HAL_SPI_Abort+0x1d0>)
 8004ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004bba:	e008      	b.n	8004bce <HAL_SPI_Abort+0x6e>
      }
      count--;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b07      	cmp	r3, #7
 8004bcc:	d1ec      	bne.n	8004ba8 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d117      	bne.n	8004c10 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a54      	ldr	r2, [pc, #336]	@ (8004d34 <HAL_SPI_Abort+0x1d4>)
 8004be4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004bf8:	e008      	b.n	8004c0c <HAL_SPI_Abort+0xac>
      }
      count--;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b07      	cmp	r3, #7
 8004c0a:	d1ec      	bne.n	8004be6 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d12e      	bne.n	8004c7c <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02a      	beq.n	8004c7c <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd fef4 	bl	8002a20 <HAL_DMA_Abort>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0202 	bic.w	r2, r2, #2
 8004c52:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	655a      	str	r2, [r3, #84]	@ 0x54
          break;
 8004c66:	e009      	b.n	8004c7c <HAL_SPI_Abort+0x11c>
        }
        count--;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0eb      	beq.n	8004c54 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d122      	bne.n	8004cd0 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01e      	beq.n	8004cd0 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c96:	2200      	movs	r2, #0
 8004c98:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd febe 	bl	8002a20 <HAL_DMA_Abort>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e002      	b.n	8004cf0 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return errorcode;
 8004d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	057619f1 	.word	0x057619f1
 8004d30:	08004f9d 	.word	0x08004f9d
 8004d34:	08004f0d 	.word	0x08004f0d

08004d38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d46:	b2db      	uxtb	r3, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d64:	f7fd f99c 	bl	80020a0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d74:	f7fd f994 	bl	80020a0 <HAL_GetTick>
 8004d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d7a:	4b39      	ldr	r3, [pc, #228]	@ (8004e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	015b      	lsls	r3, r3, #5
 8004d80:	0d1b      	lsrs	r3, r3, #20
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8a:	e054      	b.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d92:	d050      	beq.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d94:	f7fd f984 	bl	80020a0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d13d      	bne.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dc2:	d111      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dcc:	d004      	beq.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd6:	d107      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df0:	d10f      	bne.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e017      	b.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d19b      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000004 	.word	0x20000004

08004e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2201      	movs	r2, #1
 8004e78:	2102      	movs	r1, #2
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff6a 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e032      	b.n	8004efc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <SPI_EndRxTxTransaction+0xa0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <SPI_EndRxTxTransaction+0xa4>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	0d5b      	lsrs	r3, r3, #21
 8004ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb4:	d112      	bne.n	8004edc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	@ 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ff47 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e00f      	b.n	8004efc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d0f2      	beq.n	8004edc <SPI_EndRxTxTransaction+0x78>
 8004ef6:	e000      	b.n	8004efa <SPI_EndRxTxTransaction+0x96>
        break;
 8004ef8:	bf00      	nop
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000004 	.word	0x20000004
 8004f08:	165e9f81 	.word	0x165e9f81

08004f0c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <SPI_AbortRx_ISR+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <SPI_AbortRx_ISR+0x8c>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	2264      	movs	r2, #100	@ 0x64
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f3e:	e009      	b.n	8004f54 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0eb      	beq.n	8004f2c <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f62:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f72:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8004f7c:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2207      	movs	r2, #7
 8004f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000004 	.word	0x20000004
 8004f98:	057619f1 	.word	0x057619f1

08004f9c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc2:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2207      	movs	r2, #7
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fdb0 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fcd0 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e03c      	b.n	800510a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <HAL_TIM_Base_Start+0xa0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <HAL_TIM_Base_Start+0x5c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d013      	beq.n	80050d4 <HAL_TIM_Base_Start+0x5c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1a      	ldr	r2, [pc, #104]	@ (800511c <HAL_TIM_Base_Start+0xa4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <HAL_TIM_Base_Start+0x5c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <HAL_TIM_Base_Start+0xa8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <HAL_TIM_Base_Start+0x5c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <HAL_TIM_Base_Start+0xac>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_TIM_Base_Start+0x5c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <HAL_TIM_Base_Start+0xb0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d010      	beq.n	8005108 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	e007      	b.n	8005108 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40014000 	.word	0x40014000

0800512c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e044      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x6c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516e:	d013      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x6c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1a      	ldr	r2, [pc, #104]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x6c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x6c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d010      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	e007      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40014000 	.word	0x40014000

080051f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e041      	b.n	8005286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fcc4 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fbc4 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x24>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e022      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_PWM_Start+0x3e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e015      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x58>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e008      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e068      	b.n	80053d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0x82>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005310:	e013      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0x92>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005320:	e00b      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005330:	e003      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fdec 	bl	8005f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <HAL_TIM_PWM_Start+0x14c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d107      	bne.n	8005362 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_TIM_PWM_Start+0x14c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIM_PWM_Start+0x10e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d013      	beq.n	800539e <HAL_TIM_PWM_Start+0x10e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a19      	ldr	r2, [pc, #100]	@ (80053e0 <HAL_TIM_PWM_Start+0x150>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIM_PWM_Start+0x10e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <HAL_TIM_PWM_Start+0x154>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIM_PWM_Start+0x10e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <HAL_TIM_PWM_Start+0x158>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIM_PWM_Start+0x10e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a14      	ldr	r2, [pc, #80]	@ (80053ec <HAL_TIM_PWM_Start+0x15c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d010      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c0:	e007      	b.n	80053d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d020      	beq.n	8005454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01b      	beq.n	8005454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0202 	mvn.w	r2, #2
 8005424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 faa0 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa92 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 faa3 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d020      	beq.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01b      	beq.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa7a 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa6c 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fa7d 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d020      	beq.n	80054ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0208 	mvn.w	r2, #8
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2204      	movs	r2, #4
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa54 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa46 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa57 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0210 	mvn.w	r2, #16
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2208      	movs	r2, #8
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa2e 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa20 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa31 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0201 	mvn.w	r2, #1
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f9ec 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fd6e 	bl	800605c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa02 	bl	80059a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0220 	mvn.w	r2, #32
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fd40 	bl	8006048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ae      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b0c      	cmp	r3, #12
 80055fa:	f200 809f 	bhi.w	800573c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005639 	.word	0x08005639
 8005608:	0800573d 	.word	0x0800573d
 800560c:	0800573d 	.word	0x0800573d
 8005610:	0800573d 	.word	0x0800573d
 8005614:	08005679 	.word	0x08005679
 8005618:	0800573d 	.word	0x0800573d
 800561c:	0800573d 	.word	0x0800573d
 8005620:	0800573d 	.word	0x0800573d
 8005624:	080056bb 	.word	0x080056bb
 8005628:	0800573d 	.word	0x0800573d
 800562c:	0800573d 	.word	0x0800573d
 8005630:	0800573d 	.word	0x0800573d
 8005634:	080056fb 	.word	0x080056fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fa48 	bl	8005ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0208 	orr.w	r2, r2, #8
 8005652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6999      	ldr	r1, [r3, #24]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
      break;
 8005676:	e064      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa8e 	bl	8005ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	021a      	lsls	r2, r3, #8
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	619a      	str	r2, [r3, #24]
      break;
 80056b8:	e043      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fad9 	bl	8005c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0204 	bic.w	r2, r2, #4
 80056e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69d9      	ldr	r1, [r3, #28]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	61da      	str	r2, [r3, #28]
      break;
 80056f8:	e023      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fb23 	bl	8005d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	021a      	lsls	r2, r3, #8
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	61da      	str	r2, [r3, #28]
      break;
 800573a:	e002      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIM_ConfigClockSource+0x1c>
 800576c:	2302      	movs	r3, #2
 800576e:	e0b4      	b.n	80058da <HAL_TIM_ConfigClockSource+0x186>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800578e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a8:	d03e      	beq.n	8005828 <HAL_TIM_ConfigClockSource+0xd4>
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	f200 8087 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	f000 8086 	beq.w	80058c6 <HAL_TIM_ConfigClockSource+0x172>
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d87f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b70      	cmp	r3, #112	@ 0x70
 80057c2:	d01a      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0xa6>
 80057c4:	2b70      	cmp	r3, #112	@ 0x70
 80057c6:	d87b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b60      	cmp	r3, #96	@ 0x60
 80057ca:	d050      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x11a>
 80057cc:	2b60      	cmp	r3, #96	@ 0x60
 80057ce:	d877      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b50      	cmp	r3, #80	@ 0x50
 80057d2:	d03c      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xfa>
 80057d4:	2b50      	cmp	r3, #80	@ 0x50
 80057d6:	d873      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	d058      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x13a>
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d86f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b30      	cmp	r3, #48	@ 0x30
 80057e2:	d064      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b30      	cmp	r3, #48	@ 0x30
 80057e6:	d86b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d060      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d867      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d05c      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d05a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	e062      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800580a:	f000 fb69 	bl	8005ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800581c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	609a      	str	r2, [r3, #8]
      break;
 8005826:	e04f      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005838:	f000 fb52 	bl	8005ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800584a:	609a      	str	r2, [r3, #8]
      break;
 800584c:	e03c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	461a      	mov	r2, r3
 800585c:	f000 fac6 	bl	8005dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2150      	movs	r1, #80	@ 0x50
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fb1f 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 800586c:	e02c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	461a      	mov	r2, r3
 800587c:	f000 fae5 	bl	8005e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2160      	movs	r1, #96	@ 0x60
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb0f 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 800588c:	e01c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	461a      	mov	r2, r3
 800589c:	f000 faa6 	bl	8005dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 faff 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 faf6 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 80058be:	e003      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d831      	bhi.n	800595c <HAL_TIM_ReadCapturedValue+0x78>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <HAL_TIM_ReadCapturedValue+0x1c>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005935 	.word	0x08005935
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800595d 	.word	0x0800595d
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800593f 	.word	0x0800593f
 8005914:	0800595d 	.word	0x0800595d
 8005918:	0800595d 	.word	0x0800595d
 800591c:	0800595d 	.word	0x0800595d
 8005920:	08005949 	.word	0x08005949
 8005924:	0800595d 	.word	0x0800595d
 8005928:	0800595d 	.word	0x0800595d
 800592c:	0800595d 	.word	0x0800595d
 8005930:	08005953 	.word	0x08005953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593a:	60fb      	str	r3, [r7, #12]

      break;
 800593c:	e00f      	b.n	800595e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	60fb      	str	r3, [r7, #12]

      break;
 8005946:	e00a      	b.n	800595e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	60fb      	str	r3, [r7, #12]

      break;
 8005950:	e005      	b.n	800595e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	60fb      	str	r3, [r7, #12]

      break;
 800595a:	e000      	b.n	800595e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800595c:	bf00      	nop
  }

  return tmpreg;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab8 <TIM_Base_SetConfig+0xfc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00f      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059da:	d00b      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a37      	ldr	r2, [pc, #220]	@ (8005abc <TIM_Base_SetConfig+0x100>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a36      	ldr	r2, [pc, #216]	@ (8005ac0 <TIM_Base_SetConfig+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a35      	ldr	r2, [pc, #212]	@ (8005ac4 <TIM_Base_SetConfig+0x108>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <TIM_Base_SetConfig+0xfc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01b      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a14:	d017      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a28      	ldr	r2, [pc, #160]	@ (8005abc <TIM_Base_SetConfig+0x100>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <TIM_Base_SetConfig+0x104>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <TIM_Base_SetConfig+0x108>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a25      	ldr	r2, [pc, #148]	@ (8005ac8 <TIM_Base_SetConfig+0x10c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a24      	ldr	r2, [pc, #144]	@ (8005acc <TIM_Base_SetConfig+0x110>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a23      	ldr	r2, [pc, #140]	@ (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d108      	bne.n	8005a58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab8 <TIM_Base_SetConfig+0xfc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f023 0201 	bic.w	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0302 	bic.w	r3, r3, #2
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b9c <TIM_OC1_SetConfig+0xc8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10c      	bne.n	8005b4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0308 	bic.w	r3, r3, #8
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <TIM_OC1_SetConfig+0xc8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d111      	bne.n	8005b76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40010000 	.word	0x40010000

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0320 	bic.w	r3, r3, #32
 8005bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <TIM_OC2_SetConfig+0xd4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10d      	bne.n	8005c1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a15      	ldr	r2, [pc, #84]	@ (8005c74 <TIM_OC2_SetConfig+0xd4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d113      	bne.n	8005c4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000

08005c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d48 <TIM_OC3_SetConfig+0xd0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d10d      	bne.n	8005cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a14      	ldr	r2, [pc, #80]	@ (8005d48 <TIM_OC3_SetConfig+0xd0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40010000 	.word	0x40010000

08005d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	031b      	lsls	r3, r3, #12
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a10      	ldr	r2, [pc, #64]	@ (8005de8 <TIM_OC4_SetConfig+0x9c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d109      	bne.n	8005dc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000

08005dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 030a 	bic.w	r3, r3, #10
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f023 0210 	bic.w	r2, r3, #16
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f043 0307 	orr.w	r3, r3, #7
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2201      	movs	r2, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	401a      	ands	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e050      	b.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd0:	d013      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a13      	ldr	r2, [pc, #76]	@ (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10c      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4313      	orrs	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40014000 	.word	0x40014000

08006048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e042      	b.n	8006108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fde0 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	@ 0x24
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f973 	bl	80063a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b20      	cmp	r3, #32
 800612e:	d175      	bne.n	800621c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_UART_Transmit+0x2c>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e06e      	b.n	800621e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2221      	movs	r2, #33	@ 0x21
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800614e:	f7fb ffa7 	bl	80020a0 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006168:	d108      	bne.n	800617c <HAL_UART_Transmit+0x6c>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e003      	b.n	8006184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006184:	e02e      	b.n	80061e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f848 	bl	8006226 <UART_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e03a      	b.n	800621e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3302      	adds	r3, #2
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e007      	b.n	80061d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3301      	adds	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1cb      	bne.n	8006186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2140      	movs	r1, #64	@ 0x40
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f814 	bl	8006226 <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e006      	b.n	800621e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006236:	e03b      	b.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800623e:	d037      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006240:	f7fb ff2e 	bl	80020a0 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	6a3a      	ldr	r2, [r7, #32]
 800624c:	429a      	cmp	r2, r3
 800624e:	d302      	bcc.n	8006256 <UART_WaitOnFlagUntilTimeout+0x30>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e03a      	b.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d023      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b80      	cmp	r3, #128	@ 0x80
 800626c:	d020      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	d01d      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b08      	cmp	r3, #8
 8006280:	d116      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f81d 	bl	80062d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2208      	movs	r2, #8
 80062a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e00f      	b.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4013      	ands	r3, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d0b4      	beq.n	8006238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b095      	sub	sp, #84	@ 0x54
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006300:	643a      	str	r2, [r7, #64]	@ 0x40
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e5      	bne.n	80062e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3314      	adds	r3, #20
 800631a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	61fb      	str	r3, [r7, #28]
   return(result);
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3314      	adds	r3, #20
 8006332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800633a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634c:	2b01      	cmp	r3, #1
 800634e:	d119      	bne.n	8006384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	647b      	str	r3, [r7, #68]	@ 0x44
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006370:	61ba      	str	r2, [r7, #24]
 8006372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	613b      	str	r3, [r7, #16]
   return(result);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006392:	bf00      	nop
 8006394:	3754      	adds	r7, #84	@ 0x54
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a4:	b0c0      	sub	sp, #256	@ 0x100
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	68d9      	ldr	r1, [r3, #12]
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	ea40 0301 	orr.w	r3, r0, r1
 80063c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	431a      	orrs	r2, r3
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063f8:	f021 010c 	bic.w	r1, r1, #12
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006406:	430b      	orrs	r3, r1
 8006408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	6999      	ldr	r1, [r3, #24]
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	ea40 0301 	orr.w	r3, r0, r1
 8006426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b8f      	ldr	r3, [pc, #572]	@ (800666c <UART_SetConfig+0x2cc>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d005      	beq.n	8006440 <UART_SetConfig+0xa0>
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b8d      	ldr	r3, [pc, #564]	@ (8006670 <UART_SetConfig+0x2d0>)
 800643c:	429a      	cmp	r2, r3
 800643e:	d104      	bne.n	800644a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7fe f97a 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8006444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006448:	e003      	b.n	8006452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644a:	f7fe f961 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 800644e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645c:	f040 810c 	bne.w	8006678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006464:	2200      	movs	r2, #0
 8006466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800646a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800646e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	1891      	adds	r1, r2, r2
 8006478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800647a:	415b      	adcs	r3, r3
 800647c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800647e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006482:	4621      	mov	r1, r4
 8006484:	eb12 0801 	adds.w	r8, r2, r1
 8006488:	4629      	mov	r1, r5
 800648a:	eb43 0901 	adc.w	r9, r3, r1
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800649a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800649e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064a2:	4690      	mov	r8, r2
 80064a4:	4699      	mov	r9, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	eb18 0303 	adds.w	r3, r8, r3
 80064ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064b0:	462b      	mov	r3, r5
 80064b2:	eb49 0303 	adc.w	r3, r9, r3
 80064b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064ce:	460b      	mov	r3, r1
 80064d0:	18db      	adds	r3, r3, r3
 80064d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d4:	4613      	mov	r3, r2
 80064d6:	eb42 0303 	adc.w	r3, r2, r3
 80064da:	657b      	str	r3, [r7, #84]	@ 0x54
 80064dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064e4:	f7fa fbd8 	bl	8000c98 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4b61      	ldr	r3, [pc, #388]	@ (8006674 <UART_SetConfig+0x2d4>)
 80064ee:	fba3 2302 	umull	r2, r3, r3, r2
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	011c      	lsls	r4, r3, #4
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006510:	415b      	adcs	r3, r3
 8006512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006518:	4641      	mov	r1, r8
 800651a:	eb12 0a01 	adds.w	sl, r2, r1
 800651e:	4649      	mov	r1, r9
 8006520:	eb43 0b01 	adc.w	fp, r3, r1
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006538:	4692      	mov	sl, r2
 800653a:	469b      	mov	fp, r3
 800653c:	4643      	mov	r3, r8
 800653e:	eb1a 0303 	adds.w	r3, sl, r3
 8006542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006546:	464b      	mov	r3, r9
 8006548:	eb4b 0303 	adc.w	r3, fp, r3
 800654c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006564:	460b      	mov	r3, r1
 8006566:	18db      	adds	r3, r3, r3
 8006568:	643b      	str	r3, [r7, #64]	@ 0x40
 800656a:	4613      	mov	r3, r2
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	647b      	str	r3, [r7, #68]	@ 0x44
 8006572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800657a:	f7fa fb8d 	bl	8000c98 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4611      	mov	r1, r2
 8006584:	4b3b      	ldr	r3, [pc, #236]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006586:	fba3 2301 	umull	r2, r3, r3, r1
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2264      	movs	r2, #100	@ 0x64
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800659a:	4b36      	ldr	r3, [pc, #216]	@ (8006674 <UART_SetConfig+0x2d4>)
 800659c:	fba3 2302 	umull	r2, r3, r3, r2
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065a8:	441c      	add	r4, r3
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065c4:	415b      	adcs	r3, r3
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065cc:	4641      	mov	r1, r8
 80065ce:	1851      	adds	r1, r2, r1
 80065d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065d2:	4649      	mov	r1, r9
 80065d4:	414b      	adcs	r3, r1
 80065d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065e4:	4659      	mov	r1, fp
 80065e6:	00cb      	lsls	r3, r1, #3
 80065e8:	4651      	mov	r1, sl
 80065ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ee:	4651      	mov	r1, sl
 80065f0:	00ca      	lsls	r2, r1, #3
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	4642      	mov	r2, r8
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006600:	464b      	mov	r3, r9
 8006602:	460a      	mov	r2, r1
 8006604:	eb42 0303 	adc.w	r3, r2, r3
 8006608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800661c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006620:	460b      	mov	r3, r1
 8006622:	18db      	adds	r3, r3, r3
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006626:	4613      	mov	r3, r2
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800662e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006636:	f7fa fb2f 	bl	8000c98 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006640:	fba3 1302 	umull	r1, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	2164      	movs	r1, #100	@ 0x64
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	3332      	adds	r3, #50	@ 0x32
 8006652:	4a08      	ldr	r2, [pc, #32]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f003 0207 	and.w	r2, r3, #7
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4422      	add	r2, r4
 8006666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006668:	e106      	b.n	8006878 <UART_SetConfig+0x4d8>
 800666a:	bf00      	nop
 800666c:	40011000 	.word	0x40011000
 8006670:	40011400 	.word	0x40011400
 8006674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667c:	2200      	movs	r2, #0
 800667e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800668a:	4642      	mov	r2, r8
 800668c:	464b      	mov	r3, r9
 800668e:	1891      	adds	r1, r2, r2
 8006690:	6239      	str	r1, [r7, #32]
 8006692:	415b      	adcs	r3, r3
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800669a:	4641      	mov	r1, r8
 800669c:	1854      	adds	r4, r2, r1
 800669e:	4649      	mov	r1, r9
 80066a0:	eb43 0501 	adc.w	r5, r3, r1
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	00eb      	lsls	r3, r5, #3
 80066ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066b2:	00e2      	lsls	r2, r4, #3
 80066b4:	4614      	mov	r4, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	4643      	mov	r3, r8
 80066ba:	18e3      	adds	r3, r4, r3
 80066bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c0:	464b      	mov	r3, r9
 80066c2:	eb45 0303 	adc.w	r3, r5, r3
 80066c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066e6:	4629      	mov	r1, r5
 80066e8:	008b      	lsls	r3, r1, #2
 80066ea:	4621      	mov	r1, r4
 80066ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f0:	4621      	mov	r1, r4
 80066f2:	008a      	lsls	r2, r1, #2
 80066f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066f8:	f7fa face 	bl	8000c98 <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4b60      	ldr	r3, [pc, #384]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006702:	fba3 2302 	umull	r2, r3, r3, r2
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	011c      	lsls	r4, r3, #4
 800670a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800670e:	2200      	movs	r2, #0
 8006710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	1891      	adds	r1, r2, r2
 8006722:	61b9      	str	r1, [r7, #24]
 8006724:	415b      	adcs	r3, r3
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800672c:	4641      	mov	r1, r8
 800672e:	1851      	adds	r1, r2, r1
 8006730:	6139      	str	r1, [r7, #16]
 8006732:	4649      	mov	r1, r9
 8006734:	414b      	adcs	r3, r1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006744:	4659      	mov	r1, fp
 8006746:	00cb      	lsls	r3, r1, #3
 8006748:	4651      	mov	r1, sl
 800674a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674e:	4651      	mov	r1, sl
 8006750:	00ca      	lsls	r2, r1, #3
 8006752:	4610      	mov	r0, r2
 8006754:	4619      	mov	r1, r3
 8006756:	4603      	mov	r3, r0
 8006758:	4642      	mov	r2, r8
 800675a:	189b      	adds	r3, r3, r2
 800675c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006760:	464b      	mov	r3, r9
 8006762:	460a      	mov	r2, r1
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006784:	4649      	mov	r1, r9
 8006786:	008b      	lsls	r3, r1, #2
 8006788:	4641      	mov	r1, r8
 800678a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678e:	4641      	mov	r1, r8
 8006790:	008a      	lsls	r2, r1, #2
 8006792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006796:	f7fa fa7f 	bl	8000c98 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	4b38      	ldr	r3, [pc, #224]	@ (8006884 <UART_SetConfig+0x4e4>)
 80067a2:	fba3 2301 	umull	r2, r3, r3, r1
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	2264      	movs	r2, #100	@ 0x64
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	1acb      	subs	r3, r1, r3
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	3332      	adds	r3, #50	@ 0x32
 80067b4:	4a33      	ldr	r2, [pc, #204]	@ (8006884 <UART_SetConfig+0x4e4>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067c0:	441c      	add	r4, r3
 80067c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c6:	2200      	movs	r2, #0
 80067c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80067ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80067cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	415b      	adcs	r3, r3
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067e0:	4641      	mov	r1, r8
 80067e2:	1851      	adds	r1, r2, r1
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	4649      	mov	r1, r9
 80067e8:	414b      	adcs	r3, r1
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067f8:	4659      	mov	r1, fp
 80067fa:	00cb      	lsls	r3, r1, #3
 80067fc:	4651      	mov	r1, sl
 80067fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006802:	4651      	mov	r1, sl
 8006804:	00ca      	lsls	r2, r1, #3
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	4603      	mov	r3, r0
 800680c:	4642      	mov	r2, r8
 800680e:	189b      	adds	r3, r3, r2
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006812:	464b      	mov	r3, r9
 8006814:	460a      	mov	r2, r1
 8006816:	eb42 0303 	adc.w	r3, r2, r3
 800681a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	663b      	str	r3, [r7, #96]	@ 0x60
 8006826:	667a      	str	r2, [r7, #100]	@ 0x64
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006834:	4649      	mov	r1, r9
 8006836:	008b      	lsls	r3, r1, #2
 8006838:	4641      	mov	r1, r8
 800683a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683e:	4641      	mov	r1, r8
 8006840:	008a      	lsls	r2, r1, #2
 8006842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006846:	f7fa fa27 	bl	8000c98 <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006850:	fba3 1302 	umull	r1, r3, r3, r2
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	2164      	movs	r1, #100	@ 0x64
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	3332      	adds	r3, #50	@ 0x32
 8006862:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f003 020f 	and.w	r2, r3, #15
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4422      	add	r2, r4
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800687e:	46bd      	mov	sp, r7
 8006880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006884:	51eb851f 	.word	0x51eb851f

08006888 <__NVIC_SetPriority>:
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006898:	2b00      	cmp	r3, #0
 800689a:	db0a      	blt.n	80068b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	490c      	ldr	r1, [pc, #48]	@ (80068d4 <__NVIC_SetPriority+0x4c>)
 80068a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a6:	0112      	lsls	r2, r2, #4
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	440b      	add	r3, r1
 80068ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80068b0:	e00a      	b.n	80068c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	4908      	ldr	r1, [pc, #32]	@ (80068d8 <__NVIC_SetPriority+0x50>)
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	3b04      	subs	r3, #4
 80068c0:	0112      	lsls	r2, r2, #4
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	440b      	add	r3, r1
 80068c6:	761a      	strb	r2, [r3, #24]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	e000e100 	.word	0xe000e100
 80068d8:	e000ed00 	.word	0xe000ed00

080068dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <SysTick_Handler+0x1c>)
 80068e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80068e4:	f002 f880 	bl	80089e8 <xTaskGetSchedulerState>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d001      	beq.n	80068f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068ee:	f002 ff7b 	bl	80097e8 <xPortSysTickHandler>
  }
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	e000e010 	.word	0xe000e010

080068fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006900:	2100      	movs	r1, #0
 8006902:	f06f 0004 	mvn.w	r0, #4
 8006906:	f7ff ffbf 	bl	8006888 <__NVIC_SetPriority>
#endif
}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	603b      	str	r3, [r7, #0]
  return(result);
 800691c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006922:	f06f 0305 	mvn.w	r3, #5
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e00c      	b.n	8006944 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800692a:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <osKernelInitialize+0x44>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006932:	4b08      	ldr	r3, [pc, #32]	@ (8006954 <osKernelInitialize+0x44>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006938:	2300      	movs	r3, #0
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	e002      	b.n	8006944 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800693e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006944:	687b      	ldr	r3, [r7, #4]
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000494 	.word	0x20000494

08006958 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800695e:	f3ef 8305 	mrs	r3, IPSR
 8006962:	603b      	str	r3, [r7, #0]
  return(result);
 8006964:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <osKernelStart+0x1a>
    stat = osErrorISR;
 800696a:	f06f 0305 	mvn.w	r3, #5
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	e010      	b.n	8006994 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006972:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <osKernelStart+0x48>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d109      	bne.n	800698e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800697a:	f7ff ffbf 	bl	80068fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800697e:	4b08      	ldr	r3, [pc, #32]	@ (80069a0 <osKernelStart+0x48>)
 8006980:	2202      	movs	r2, #2
 8006982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006984:	f001 fbbc 	bl	8008100 <vTaskStartScheduler>
      stat = osOK;
 8006988:	2300      	movs	r3, #0
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	e002      	b.n	8006994 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800698e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006994:	687b      	ldr	r3, [r7, #4]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000494 	.word	0x20000494

080069a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	@ 0x38
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b4:	f3ef 8305 	mrs	r3, IPSR
 80069b8:	617b      	str	r3, [r7, #20]
  return(result);
 80069ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d17e      	bne.n	8006abe <osThreadNew+0x11a>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d07b      	beq.n	8006abe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069c6:	2380      	movs	r3, #128	@ 0x80
 80069c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069ca:	2318      	movs	r3, #24
 80069cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d045      	beq.n	8006a6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <osThreadNew+0x48>
        name = attr->name;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <osThreadNew+0x6e>
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b38      	cmp	r3, #56	@ 0x38
 8006a04:	d805      	bhi.n	8006a12 <osThreadNew+0x6e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <osThreadNew+0x72>
        return (NULL);
 8006a12:	2300      	movs	r3, #0
 8006a14:	e054      	b.n	8006ac0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <osThreadNew+0xa8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a34:	d90a      	bls.n	8006a4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d006      	beq.n	8006a4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <osThreadNew+0xa8>
        mem = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e010      	b.n	8006a6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10c      	bne.n	8006a6e <osThreadNew+0xca>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d108      	bne.n	8006a6e <osThreadNew+0xca>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <osThreadNew+0xca>
          mem = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e001      	b.n	8006a6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d110      	bne.n	8006a96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a7c:	9202      	str	r2, [sp, #8]
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f001 f944 	bl	8007d18 <xTaskCreateStatic>
 8006a90:	4603      	mov	r3, r0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	e013      	b.n	8006abe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d110      	bne.n	8006abe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 f992 	bl	8007dd8 <xTaskCreate>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d001      	beq.n	8006abe <osThreadNew+0x11a>
            hTask = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006abe:	693b      	ldr	r3, [r7, #16]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	@ 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad0:	f3ef 8305 	mrs	r3, IPSR
 8006ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <osDelay+0x1c>
    stat = osErrorISR;
 8006adc:	f06f 0305 	mvn.w	r3, #5
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e007      	b.n	8006af4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fad0 	bl	8008094 <vTaskDelay>
    }
  }

  return (stat);
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b0a:	f3ef 8305 	mrs	r3, IPSR
 8006b0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b10:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d174      	bne.n	8006c00 <osMutexNew+0x102>
    if (attr != NULL) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e001      	b.n	8006b28 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <osMutexNew+0x3a>
      rmtx = 1U;
 8006b32:	2301      	movs	r3, #1
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e001      	b.n	8006b3c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d15c      	bne.n	8006c00 <osMutexNew+0x102>
      mem = -1;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b4a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d015      	beq.n	8006b7e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d006      	beq.n	8006b68 <osMutexNew+0x6a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b60:	d902      	bls.n	8006b68 <osMutexNew+0x6a>
          mem = 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	e00c      	b.n	8006b82 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d108      	bne.n	8006b82 <osMutexNew+0x84>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <osMutexNew+0x84>
            mem = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	e001      	b.n	8006b82 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d112      	bne.n	8006bae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	2004      	movs	r0, #4
 8006b96:	f000 fb20 	bl	80071da <xQueueCreateMutexStatic>
 8006b9a:	61f8      	str	r0, [r7, #28]
 8006b9c:	e016      	b.n	8006bcc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	f000 fb18 	bl	80071da <xQueueCreateMutexStatic>
 8006baa:	61f8      	str	r0, [r7, #28]
 8006bac:	e00e      	b.n	8006bcc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006bba:	2004      	movs	r0, #4
 8006bbc:	f000 faf5 	bl	80071aa <xQueueCreateMutex>
 8006bc0:	61f8      	str	r0, [r7, #28]
 8006bc2:	e003      	b.n	8006bcc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	f000 faf0 	bl	80071aa <xQueueCreateMutex>
 8006bca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00c      	beq.n	8006bec <osMutexNew+0xee>
        if (attr != NULL) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <osMutexNew+0xe2>
          name = attr->name;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e001      	b.n	8006be4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	69f8      	ldr	r0, [r7, #28]
 8006be8:	f001 f838 	bl	8007c5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d006      	beq.n	8006c00 <osMutexNew+0x102>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006c00:	69fb      	ldr	r3, [r7, #28]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c28:	f3ef 8305 	mrs	r3, IPSR
 8006c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006c34:	f06f 0305 	mvn.w	r3, #5
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e02c      	b.n	8006c96 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006c42:	f06f 0303 	mvn.w	r3, #3
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e025      	b.n	8006c96 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d011      	beq.n	8006c74 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6938      	ldr	r0, [r7, #16]
 8006c54:	f000 fb11 	bl	800727a <xQueueTakeMutexRecursive>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d01b      	beq.n	8006c96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006c64:	f06f 0301 	mvn.w	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e014      	b.n	8006c96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c6c:	f06f 0302 	mvn.w	r3, #2
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e010      	b.n	8006c96 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6938      	ldr	r0, [r7, #16]
 8006c78:	f000 fdb8 	bl	80077ec <xQueueSemaphoreTake>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d009      	beq.n	8006c96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006c88:	f06f 0301 	mvn.w	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e002      	b.n	8006c96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c90:	f06f 0302 	mvn.w	r3, #2
 8006c94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006c96:	697b      	ldr	r3, [r7, #20]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cbc:	f3ef 8305 	mrs	r3, IPSR
 8006cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006cc8:	f06f 0305 	mvn.w	r3, #5
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e01f      	b.n	8006d10 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006cd6:	f06f 0303 	mvn.w	r3, #3
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e018      	b.n	8006d10 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006ce4:	6938      	ldr	r0, [r7, #16]
 8006ce6:	f000 fa93 	bl	8007210 <xQueueGiveMutexRecursive>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d00f      	beq.n	8006d10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006cf0:	f06f 0302 	mvn.w	r3, #2
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e00b      	b.n	8006d10 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f000 faf2 	bl	80072e8 <xQueueGenericSend>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d002      	beq.n	8006d10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006d0a:	f06f 0302 	mvn.w	r3, #2
 8006d0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a07      	ldr	r2, [pc, #28]	@ (8006d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a06      	ldr	r2, [pc, #24]	@ (8006d4c <vApplicationGetIdleTaskMemory+0x30>)
 8006d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	601a      	str	r2, [r3, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000498 	.word	0x20000498
 8006d4c:	20000540 	.word	0x20000540

08006d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a07      	ldr	r2, [pc, #28]	@ (8006d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4a06      	ldr	r2, [pc, #24]	@ (8006d80 <vApplicationGetTimerTaskMemory+0x30>)
 8006d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d6e:	601a      	str	r2, [r3, #0]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000740 	.word	0x20000740
 8006d80:	200007e8 	.word	0x200007e8

08006d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0208 	add.w	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 0208 	add.w	r2, r3, #8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	601a      	str	r2, [r3, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e3c:	d103      	bne.n	8006e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e00c      	b.n	8006e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e002      	b.n	8006e54 <vListInsert+0x2e>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d2f6      	bcs.n	8006e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	601a      	str	r2, [r3, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6892      	ldr	r2, [r2, #8]
 8006eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6852      	ldr	r2, [r2, #4]
 8006eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d103      	bne.n	8006ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	1e5a      	subs	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f18:	f002 fbd6 	bl	80096c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	68f9      	ldr	r1, [r7, #12]
 8006f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	441a      	add	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	22ff      	movs	r2, #255	@ 0xff
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	22ff      	movs	r2, #255	@ 0xff
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d114      	bne.n	8006f98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01a      	beq.n	8006fac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fb5e 	bl	800863c <xTaskRemoveFromEventList>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <xQueueGenericReset+0xd0>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e009      	b.n	8006fac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3310      	adds	r3, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fef1 	bl	8006d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3324      	adds	r3, #36	@ 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff feec 	bl	8006d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fac:	f002 fbbe 	bl	800972c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fb0:	2301      	movs	r3, #1
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	@ 0x38
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	e7fd      	b.n	8007006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <xQueueGenericCreateStatic+0x56>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <xQueueGenericCreateStatic+0x5a>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <xQueueGenericCreateStatic+0x5c>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	623b      	str	r3, [r7, #32]
}
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <xQueueGenericCreateStatic+0x84>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <xQueueGenericCreateStatic+0x88>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <xQueueGenericCreateStatic+0x8a>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007066:	2350      	movs	r3, #80	@ 0x50
 8007068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b50      	cmp	r3, #80	@ 0x50
 800706e:	d00b      	beq.n	8007088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	61bb      	str	r3, [r7, #24]
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800709c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f840 	bl	8007130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3730      	adds	r7, #48	@ 0x30
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b08a      	sub	sp, #40	@ 0x28
 80070be:	af02      	add	r7, sp, #8
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	4613      	mov	r3, r2
 80070c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	613b      	str	r3, [r7, #16]
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3350      	adds	r3, #80	@ 0x50
 80070f4:	4618      	mov	r0, r3
 80070f6:	f002 fc09 	bl	800990c <pvPortMalloc>
 80070fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	3350      	adds	r3, #80	@ 0x50
 800710a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007114:	79fa      	ldrb	r2, [r7, #7]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	4613      	mov	r3, r2
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f805 	bl	8007130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007126:	69bb      	ldr	r3, [r7, #24]
	}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e002      	b.n	8007152 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800715e:	2101      	movs	r1, #1
 8007160:	69b8      	ldr	r0, [r7, #24]
 8007162:	f7ff fec3 	bl	8006eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007196:	2300      	movs	r3, #0
 8007198:	2200      	movs	r2, #0
 800719a:	2100      	movs	r1, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8a3 	bl	80072e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b086      	sub	sp, #24
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	4603      	mov	r3, r0
 80071b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	2300      	movs	r3, #0
 80071ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	461a      	mov	r2, r3
 80071c0:	6939      	ldr	r1, [r7, #16]
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f7ff ff79 	bl	80070ba <xQueueGenericCreate>
 80071c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff ffd3 	bl	8007176 <prvInitialiseMutex>

		return xNewQueue;
 80071d0:	68fb      	ldr	r3, [r7, #12]
	}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af02      	add	r7, sp, #8
 80071e0:	4603      	mov	r3, r0
 80071e2:	6039      	str	r1, [r7, #0]
 80071e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	6939      	ldr	r1, [r7, #16]
 80071f8:	6978      	ldr	r0, [r7, #20]
 80071fa:	f7ff fee1 	bl	8006fc0 <xQueueGenericCreateStatic>
 80071fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff ffb8 	bl	8007176 <prvInitialiseMutex>

		return xNewQueue;
 8007206:	68fb      	ldr	r3, [r7, #12]
	}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60fb      	str	r3, [r7, #12]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	689c      	ldr	r4, [r3, #8]
 800723e:	f001 fbc3 	bl	80089c8 <xTaskGetCurrentTaskHandle>
 8007242:	4603      	mov	r3, r0
 8007244:	429c      	cmp	r4, r3
 8007246:	d111      	bne.n	800726c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	6938      	ldr	r0, [r7, #16]
 8007262:	f000 f841 	bl	80072e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007266:	2301      	movs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	e001      	b.n	8007270 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007270:	697b      	ldr	r3, [r7, #20]
	}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	bd90      	pop	{r4, r7, pc}

0800727a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800727a:	b590      	push	{r4, r7, lr}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60fb      	str	r3, [r7, #12]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	689c      	ldr	r4, [r3, #8]
 80072aa:	f001 fb8d 	bl	80089c8 <xTaskGetCurrentTaskHandle>
 80072ae:	4603      	mov	r3, r0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d107      	bne.n	80072c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80072be:	2301      	movs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e00c      	b.n	80072de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6938      	ldr	r0, [r7, #16]
 80072c8:	f000 fa90 	bl	80077ec <xQueueSemaphoreTake>
 80072cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80072de:	697b      	ldr	r3, [r7, #20]
	}
 80072e0:	4618      	mov	r0, r3
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	@ 0x38
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericSend+0x34>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <xQueueGenericSend+0x42>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <xQueueGenericSend+0x46>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <xQueueGenericSend+0x48>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <xQueueGenericSend+0x64>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	e7fd      	b.n	8007348 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d103      	bne.n	800735a <xQueueGenericSend+0x72>
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <xQueueGenericSend+0x76>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <xQueueGenericSend+0x78>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xQueueGenericSend+0x94>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	623b      	str	r3, [r7, #32]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800737c:	f001 fb34 	bl	80089e8 <xTaskGetSchedulerState>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <xQueueGenericSend+0xa4>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSend+0xa8>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSend+0xaa>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <xQueueGenericSend+0xc6>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61fb      	str	r3, [r7, #28]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ae:	f002 f98b 	bl	80096c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d302      	bcc.n	80073c4 <xQueueGenericSend+0xdc>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d129      	bne.n	8007418 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ca:	f000 fb37 	bl	8007a3c <prvCopyDataToQueue>
 80073ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	3324      	adds	r3, #36	@ 0x24
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f92d 	bl	800863c <xTaskRemoveFromEventList>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d013      	beq.n	8007410 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073e8:	4b3f      	ldr	r3, [pc, #252]	@ (80074e8 <xQueueGenericSend+0x200>)
 80073ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	e00a      	b.n	8007410 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007400:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <xQueueGenericSend+0x200>)
 8007402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007410:	f002 f98c 	bl	800972c <vPortExitCritical>
				return pdPASS;
 8007414:	2301      	movs	r3, #1
 8007416:	e063      	b.n	80074e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800741e:	f002 f985 	bl	800972c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007422:	2300      	movs	r3, #0
 8007424:	e05c      	b.n	80074e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800742c:	f107 0314 	add.w	r3, r7, #20
 8007430:	4618      	mov	r0, r3
 8007432:	f001 f967 	bl	8008704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800743a:	f002 f977 	bl	800972c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800743e:	f000 fecf 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007442:	f002 f941 	bl	80096c8 <vPortEnterCritical>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800744c:	b25b      	sxtb	r3, r3
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007452:	d103      	bne.n	800745c <xQueueGenericSend+0x174>
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007462:	b25b      	sxtb	r3, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007468:	d103      	bne.n	8007472 <xQueueGenericSend+0x18a>
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007472:	f002 f95b 	bl	800972c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007476:	1d3a      	adds	r2, r7, #4
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 f956 	bl	8008730 <xTaskCheckForTimeOut>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d124      	bne.n	80074d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800748a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800748c:	f000 fbce 	bl	8007c2c <prvIsQueueFull>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d018      	beq.n	80074c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	3310      	adds	r3, #16
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 f87a 	bl	8008598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074a6:	f000 fb59 	bl	8007b5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074aa:	f000 fea7 	bl	80081fc <xTaskResumeAll>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f47f af7c 	bne.w	80073ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80074b6:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <xQueueGenericSend+0x200>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	e772      	b.n	80073ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ca:	f000 fb47 	bl	8007b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ce:	f000 fe95 	bl	80081fc <xTaskResumeAll>
 80074d2:	e76c      	b.n	80073ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074d6:	f000 fb41 	bl	8007b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074da:	f000 fe8f 	bl	80081fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3738      	adds	r7, #56	@ 0x38
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b090      	sub	sp, #64	@ 0x40
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <xQueueGenericSendFromISR+0x3e>
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <xQueueGenericSendFromISR+0x42>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <xQueueGenericSendFromISR+0x44>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d103      	bne.n	800755a <xQueueGenericSendFromISR+0x6e>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <xQueueGenericSendFromISR+0x72>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <xQueueGenericSendFromISR+0x74>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	623b      	str	r3, [r7, #32]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757c:	f002 f984 	bl	8009888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007580:	f3ef 8211 	mrs	r2, BASEPRI
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61fa      	str	r2, [r7, #28]
 8007596:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007598:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <xQueueGenericSendFromISR+0xc2>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d12f      	bne.n	800760e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075c4:	f000 fa3a 	bl	8007a3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075d0:	d112      	bne.n	80075f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	3324      	adds	r3, #36	@ 0x24
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 f82c 	bl	800863c <xTaskRemoveFromEventList>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e007      	b.n	8007608 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80075fc:	3301      	adds	r3, #1
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	b25a      	sxtb	r2, r3
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007608:	2301      	movs	r3, #1
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800760c:	e001      	b.n	8007612 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800760e:	2300      	movs	r3, #0
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800761c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800761e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007620:	4618      	mov	r0, r3
 8007622:	3740      	adds	r7, #64	@ 0x40
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	@ 0x30
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <xQueueReceive+0x32>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	623b      	str	r3, [r7, #32]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <xQueueReceive+0x40>
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <xQueueReceive+0x44>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <xQueueReceive+0x46>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <xQueueReceive+0x62>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	61fb      	str	r3, [r7, #28]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800768a:	f001 f9ad 	bl	80089e8 <xTaskGetSchedulerState>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <xQueueReceive+0x72>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <xQueueReceive+0x76>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <xQueueReceive+0x78>
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10b      	bne.n	80076bc <xQueueReceive+0x94>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	61bb      	str	r3, [r7, #24]
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	e7fd      	b.n	80076b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076bc:	f002 f804 	bl	80096c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01f      	beq.n	800770c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d0:	f000 fa1e 	bl	8007b10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00f      	beq.n	8007704 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	3310      	adds	r3, #16
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 ffa7 	bl	800863c <xTaskRemoveFromEventList>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076f4:	4b3c      	ldr	r3, [pc, #240]	@ (80077e8 <xQueueReceive+0x1c0>)
 80076f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007704:	f002 f812 	bl	800972c <vPortExitCritical>
				return pdPASS;
 8007708:	2301      	movs	r3, #1
 800770a:	e069      	b.n	80077e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007712:	f002 f80b 	bl	800972c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007716:	2300      	movs	r3, #0
 8007718:	e062      	b.n	80077e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007720:	f107 0310 	add.w	r3, r7, #16
 8007724:	4618      	mov	r0, r3
 8007726:	f000 ffed 	bl	8008704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800772a:	2301      	movs	r3, #1
 800772c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800772e:	f001 fffd 	bl	800972c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007732:	f000 fd55 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007736:	f001 ffc7 	bl	80096c8 <vPortEnterCritical>
 800773a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007740:	b25b      	sxtb	r3, r3
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007746:	d103      	bne.n	8007750 <xQueueReceive+0x128>
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007756:	b25b      	sxtb	r3, r3
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800775c:	d103      	bne.n	8007766 <xQueueReceive+0x13e>
 800775e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007766:	f001 ffe1 	bl	800972c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800776a:	1d3a      	adds	r2, r7, #4
 800776c:	f107 0310 	add.w	r3, r7, #16
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f000 ffdc 	bl	8008730 <xTaskCheckForTimeOut>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d123      	bne.n	80077c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800777e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007780:	f000 fa3e 	bl	8007c00 <prvIsQueueEmpty>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d017      	beq.n	80077ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	3324      	adds	r3, #36	@ 0x24
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ff00 	bl	8008598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800779a:	f000 f9df 	bl	8007b5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800779e:	f000 fd2d 	bl	80081fc <xTaskResumeAll>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d189      	bne.n	80076bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80077a8:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <xQueueReceive+0x1c0>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	e780      	b.n	80076bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077bc:	f000 f9ce 	bl	8007b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c0:	f000 fd1c 	bl	80081fc <xTaskResumeAll>
 80077c4:	e77a      	b.n	80076bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c8:	f000 f9c8 	bl	8007b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077cc:	f000 fd16 	bl	80081fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077d2:	f000 fa15 	bl	8007c00 <prvIsQueueEmpty>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f43f af6f 	beq.w	80076bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3730      	adds	r7, #48	@ 0x30
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	@ 0x38
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	623b      	str	r3, [r7, #32]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61fb      	str	r3, [r7, #28]
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007840:	f001 f8d2 	bl	80089e8 <xTaskGetSchedulerState>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <xQueueSemaphoreTake+0x64>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <xQueueSemaphoreTake+0x68>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <xQueueSemaphoreTake+0x6a>
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	61bb      	str	r3, [r7, #24]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007872:	f001 ff29 	bl	80096c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	2b00      	cmp	r3, #0
 8007880:	d024      	beq.n	80078cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007888:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007892:	f001 fa23 	bl	8008cdc <pvTaskIncrementMutexHeldCount>
 8007896:	4602      	mov	r2, r0
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	3310      	adds	r3, #16
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fec7 	bl	800863c <xTaskRemoveFromEventList>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078b4:	4b54      	ldr	r3, [pc, #336]	@ (8007a08 <xQueueSemaphoreTake+0x21c>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078c4:	f001 ff32 	bl	800972c <vPortExitCritical>
				return pdPASS;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e098      	b.n	80079fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d112      	bne.n	80078f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	617b      	str	r3, [r7, #20]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078f0:	f001 ff1c 	bl	800972c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e082      	b.n	80079fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fefe 	bl	8008704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800790c:	f001 ff0e 	bl	800972c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007910:	f000 fc66 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007914:	f001 fed8 	bl	80096c8 <vPortEnterCritical>
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800791e:	b25b      	sxtb	r3, r3
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007924:	d103      	bne.n	800792e <xQueueSemaphoreTake+0x142>
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800792e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007934:	b25b      	sxtb	r3, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800793a:	d103      	bne.n	8007944 <xQueueSemaphoreTake+0x158>
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007944:	f001 fef2 	bl	800972c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007948:	463a      	mov	r2, r7
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f000 feed 	bl	8008730 <xTaskCheckForTimeOut>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d132      	bne.n	80079c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800795c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800795e:	f000 f94f 	bl	8007c00 <prvIsQueueEmpty>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d026      	beq.n	80079b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007970:	f001 feaa 	bl	80096c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4618      	mov	r0, r3
 800797a:	f001 f853 	bl	8008a24 <xTaskPriorityInherit>
 800797e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007980:	f001 fed4 	bl	800972c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	3324      	adds	r3, #36	@ 0x24
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fe03 	bl	8008598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007994:	f000 f8e2 	bl	8007b5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007998:	f000 fc30 	bl	80081fc <xTaskResumeAll>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f47f af67 	bne.w	8007872 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80079a4:	4b18      	ldr	r3, [pc, #96]	@ (8007a08 <xQueueSemaphoreTake+0x21c>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	e75d      	b.n	8007872 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079b8:	f000 f8d0 	bl	8007b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079bc:	f000 fc1e 	bl	80081fc <xTaskResumeAll>
 80079c0:	e757      	b.n	8007872 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079c4:	f000 f8ca 	bl	8007b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079c8:	f000 fc18 	bl	80081fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ce:	f000 f917 	bl	8007c00 <prvIsQueueEmpty>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f43f af4c 	beq.w	8007872 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00d      	beq.n	80079fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079e0:	f001 fe72 	bl	80096c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079e6:	f000 f811 	bl	8007a0c <prvGetDisinheritPriorityAfterTimeout>
 80079ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f8ee 	bl	8008bd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079f8:	f001 fe98 	bl	800972c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3738      	adds	r7, #56	@ 0x38
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d006      	beq.n	8007a2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e001      	b.n	8007a2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
	}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10d      	bne.n	8007a76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d14d      	bne.n	8007afe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f844 	bl	8008af4 <xTaskPriorityDisinherit>
 8007a6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	e043      	b.n	8007afe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d119      	bne.n	8007ab0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6858      	ldr	r0, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a84:	461a      	mov	r2, r3
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	f003 f995 	bl	800adb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d32b      	bcc.n	8007afe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	e026      	b.n	8007afe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68d8      	ldr	r0, [r3, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	f003 f97b 	bl	800adb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	425b      	negs	r3, r3
 8007aca:	441a      	add	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d207      	bcs.n	8007aec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d105      	bne.n	8007afe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b06:	697b      	ldr	r3, [r7, #20]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d018      	beq.n	8007b54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2a:	441a      	add	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d303      	bcc.n	8007b44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68d9      	ldr	r1, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6838      	ldr	r0, [r7, #0]
 8007b50:	f003 f931 	bl	800adb6 <memcpy>
	}
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b64:	f001 fdb0 	bl	80096c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b70:	e011      	b.n	8007b96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d012      	beq.n	8007ba0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3324      	adds	r3, #36	@ 0x24
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fd5c 	bl	800863c <xTaskRemoveFromEventList>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b8a:	f000 fe35 	bl	80087f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dce9      	bgt.n	8007b72 <prvUnlockQueue+0x16>
 8007b9e:	e000      	b.n	8007ba2 <prvUnlockQueue+0x46>
					break;
 8007ba0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	22ff      	movs	r2, #255	@ 0xff
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007baa:	f001 fdbf 	bl	800972c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bae:	f001 fd8b 	bl	80096c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bba:	e011      	b.n	8007be0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d012      	beq.n	8007bea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3310      	adds	r3, #16
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fd37 	bl	800863c <xTaskRemoveFromEventList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bd4:	f000 fe10 	bl	80087f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dce9      	bgt.n	8007bbc <prvUnlockQueue+0x60>
 8007be8:	e000      	b.n	8007bec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	22ff      	movs	r2, #255	@ 0xff
 8007bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007bf4:	f001 fd9a 	bl	800972c <vPortExitCritical>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c08:	f001 fd5e 	bl	80096c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c14:	2301      	movs	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e001      	b.n	8007c1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c1e:	f001 fd85 	bl	800972c <vPortExitCritical>

	return xReturn;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c34:	f001 fd48 	bl	80096c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d102      	bne.n	8007c4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e001      	b.n	8007c4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c4e:	f001 fd6d 	bl	800972c <vPortExitCritical>

	return xReturn;
 8007c52:	68fb      	ldr	r3, [r7, #12]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	e014      	b.n	8007c96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8007cac <vQueueAddToRegistry+0x50>)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c78:	490c      	ldr	r1, [pc, #48]	@ (8007cac <vQueueAddToRegistry+0x50>)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c82:	4a0a      	ldr	r2, [pc, #40]	@ (8007cac <vQueueAddToRegistry+0x50>)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	4413      	add	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c8e:	e006      	b.n	8007c9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b07      	cmp	r3, #7
 8007c9a:	d9e7      	bls.n	8007c6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20000be8 	.word	0x20000be8

08007cb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cc0:	f001 fd02 	bl	80096c8 <vPortEnterCritical>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd0:	d103      	bne.n	8007cda <vQueueWaitForMessageRestricted+0x2a>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ce6:	d103      	bne.n	8007cf0 <vQueueWaitForMessageRestricted+0x40>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf0:	f001 fd1c 	bl	800972c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	3324      	adds	r3, #36	@ 0x24
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fc6d 	bl	80085e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d0a:	6978      	ldr	r0, [r7, #20]
 8007d0c:	f7ff ff26 	bl	8007b5c <prvUnlockQueue>
	}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08e      	sub	sp, #56	@ 0x38
 8007d1c:	af04      	add	r7, sp, #16
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10b      	bne.n	8007d44 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	623b      	str	r3, [r7, #32]
}
 8007d3e:	bf00      	nop
 8007d40:	bf00      	nop
 8007d42:	e7fd      	b.n	8007d40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	61fb      	str	r3, [r7, #28]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d62:	23a8      	movs	r3, #168	@ 0xa8
 8007d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2ba8      	cmp	r3, #168	@ 0xa8
 8007d6a:	d00b      	beq.n	8007d84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	61bb      	str	r3, [r7, #24]
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <xTaskCreateStatic+0xb2>
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01b      	beq.n	8007dca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007da4:	2300      	movs	r3, #0
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007daa:	9302      	str	r3, [sp, #8]
 8007dac:	f107 0314 	add.w	r3, r7, #20
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f851 	bl	8007e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dc4:	f000 f8f6 	bl	8007fb4 <prvAddNewTaskToReadyList>
 8007dc8:	e001      	b.n	8007dce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007dce:	697b      	ldr	r3, [r7, #20]
	}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3728      	adds	r7, #40	@ 0x28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08c      	sub	sp, #48	@ 0x30
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	4613      	mov	r3, r2
 8007de6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fd8d 	bl	800990c <pvPortMalloc>
 8007df2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00e      	beq.n	8007e18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dfa:	20a8      	movs	r0, #168	@ 0xa8
 8007dfc:	f001 fd86 	bl	800990c <pvPortMalloc>
 8007e00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e0e:	e005      	b.n	8007e1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e10:	6978      	ldr	r0, [r7, #20]
 8007e12:	f001 fe49 	bl	8009aa8 <vPortFree>
 8007e16:	e001      	b.n	8007e1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d017      	beq.n	8007e52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9303      	str	r3, [sp, #12]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	9302      	str	r3, [sp, #8]
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f80f 	bl	8007e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e46:	69f8      	ldr	r0, [r7, #28]
 8007e48:	f000 f8b4 	bl	8007fb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	e002      	b.n	8007e58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e58:	69bb      	ldr	r3, [r7, #24]
	}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	21a5      	movs	r1, #165	@ 0xa5
 8007e7e:	f002 fec4 	bl	800ac0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	617b      	str	r3, [r7, #20]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01f      	beq.n	8007f04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	e012      	b.n	8007ef0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	4413      	add	r3, r2
 8007ed0:	7819      	ldrb	r1, [r3, #0]
 8007ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3334      	adds	r3, #52	@ 0x34
 8007eda:	460a      	mov	r2, r1
 8007edc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d006      	beq.n	8007ef8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	3301      	adds	r3, #1
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d9e9      	bls.n	8007eca <prvInitialiseNewTask+0x66>
 8007ef6:	e000      	b.n	8007efa <prvInitialiseNewTask+0x96>
			{
				break;
 8007ef8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f02:	e003      	b.n	8007f0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	2b37      	cmp	r3, #55	@ 0x37
 8007f10:	d901      	bls.n	8007f16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f12:	2337      	movs	r3, #55	@ 0x37
 8007f14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	2200      	movs	r2, #0
 8007f26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe ff49 	bl	8006dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	3318      	adds	r3, #24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe ff44 	bl	8006dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	3354      	adds	r3, #84	@ 0x54
 8007f66:	224c      	movs	r2, #76	@ 0x4c
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 fe4d 	bl	800ac0a <memset>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa8 <prvInitialiseNewTask+0x144>)
 8007f74:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	4a0c      	ldr	r2, [pc, #48]	@ (8007fac <prvInitialiseNewTask+0x148>)
 8007f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb0 <prvInitialiseNewTask+0x14c>)
 8007f80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	69b8      	ldr	r0, [r7, #24]
 8007f88:	f001 fa6a 	bl	8009460 <pxPortInitialiseStack>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f9e:	bf00      	nop
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20004e7c 	.word	0x20004e7c
 8007fac:	20004ee4 	.word	0x20004ee4
 8007fb0:	20004f4c 	.word	0x20004f4c

08007fb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fbc:	f001 fb84 	bl	80096c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8008078 <prvAddNewTaskToReadyList+0xc4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8008078 <prvAddNewTaskToReadyList+0xc4>)
 8007fc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fca:	4b2c      	ldr	r3, [pc, #176]	@ (800807c <prvAddNewTaskToReadyList+0xc8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800807c <prvAddNewTaskToReadyList+0xc8>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fd8:	4b27      	ldr	r3, [pc, #156]	@ (8008078 <prvAddNewTaskToReadyList+0xc4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d110      	bne.n	8008002 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fe0:	f000 fc2e 	bl	8008840 <prvInitialiseTaskLists>
 8007fe4:	e00d      	b.n	8008002 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fe6:	4b26      	ldr	r3, [pc, #152]	@ (8008080 <prvAddNewTaskToReadyList+0xcc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fee:	4b23      	ldr	r3, [pc, #140]	@ (800807c <prvAddNewTaskToReadyList+0xc8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d802      	bhi.n	8008002 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800807c <prvAddNewTaskToReadyList+0xc8>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008002:	4b20      	ldr	r3, [pc, #128]	@ (8008084 <prvAddNewTaskToReadyList+0xd0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	4a1e      	ldr	r2, [pc, #120]	@ (8008084 <prvAddNewTaskToReadyList+0xd0>)
 800800a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800800c:	4b1d      	ldr	r3, [pc, #116]	@ (8008084 <prvAddNewTaskToReadyList+0xd0>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008018:	4b1b      	ldr	r3, [pc, #108]	@ (8008088 <prvAddNewTaskToReadyList+0xd4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d903      	bls.n	8008028 <prvAddNewTaskToReadyList+0x74>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	4a18      	ldr	r2, [pc, #96]	@ (8008088 <prvAddNewTaskToReadyList+0xd4>)
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4a15      	ldr	r2, [pc, #84]	@ (800808c <prvAddNewTaskToReadyList+0xd8>)
 8008036:	441a      	add	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f7fe fecd 	bl	8006dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008044:	f001 fb72 	bl	800972c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008048:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <prvAddNewTaskToReadyList+0xcc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <prvAddNewTaskToReadyList+0xc8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	429a      	cmp	r2, r3
 800805c:	d207      	bcs.n	800806e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <prvAddNewTaskToReadyList+0xdc>)
 8008060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200010fc 	.word	0x200010fc
 800807c:	20000c28 	.word	0x20000c28
 8008080:	20001108 	.word	0x20001108
 8008084:	20001118 	.word	0x20001118
 8008088:	20001104 	.word	0x20001104
 800808c:	20000c2c 	.word	0x20000c2c
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d018      	beq.n	80080d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080a6:	4b14      	ldr	r3, [pc, #80]	@ (80080f8 <vTaskDelay+0x64>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <vTaskDelay+0x32>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60bb      	str	r3, [r7, #8]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080c6:	f000 f88b 	bl	80081e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080ca:	2100      	movs	r1, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fe19 	bl	8008d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d2:	f000 f893 	bl	80081fc <xTaskResumeAll>
 80080d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d107      	bne.n	80080ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80080de:	4b07      	ldr	r3, [pc, #28]	@ (80080fc <vTaskDelay+0x68>)
 80080e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20001124 	.word	0x20001124
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	@ 0x28
 8008104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800810e:	463a      	mov	r2, r7
 8008110:	1d39      	adds	r1, r7, #4
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe00 	bl	8006d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	9202      	str	r2, [sp, #8]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	2300      	movs	r3, #0
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	460a      	mov	r2, r1
 800812e:	4924      	ldr	r1, [pc, #144]	@ (80081c0 <vTaskStartScheduler+0xc0>)
 8008130:	4824      	ldr	r0, [pc, #144]	@ (80081c4 <vTaskStartScheduler+0xc4>)
 8008132:	f7ff fdf1 	bl	8007d18 <xTaskCreateStatic>
 8008136:	4603      	mov	r3, r0
 8008138:	4a23      	ldr	r2, [pc, #140]	@ (80081c8 <vTaskStartScheduler+0xc8>)
 800813a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800813c:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <vTaskStartScheduler+0xc8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e001      	b.n	800814e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d102      	bne.n	800815a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008154:	f000 fe2a 	bl	8008dac <xTimerCreateTimerTask>
 8008158:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11b      	bne.n	8008198 <vTaskStartScheduler+0x98>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008174:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <vTaskStartScheduler+0xcc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3354      	adds	r3, #84	@ 0x54
 800817a:	4a15      	ldr	r2, [pc, #84]	@ (80081d0 <vTaskStartScheduler+0xd0>)
 800817c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800817e:	4b15      	ldr	r3, [pc, #84]	@ (80081d4 <vTaskStartScheduler+0xd4>)
 8008180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008186:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <vTaskStartScheduler+0xd8>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800818c:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <vTaskStartScheduler+0xdc>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008192:	f001 f9f5 	bl	8009580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008196:	e00f      	b.n	80081b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800819e:	d10b      	bne.n	80081b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <vTaskStartScheduler+0xb4>
}
 80081b8:	bf00      	nop
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	0800e518 	.word	0x0800e518
 80081c4:	08008811 	.word	0x08008811
 80081c8:	20001120 	.word	0x20001120
 80081cc:	20000c28 	.word	0x20000c28
 80081d0:	20000020 	.word	0x20000020
 80081d4:	2000111c 	.word	0x2000111c
 80081d8:	20001108 	.word	0x20001108
 80081dc:	20001100 	.word	0x20001100

080081e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081e4:	4b04      	ldr	r3, [pc, #16]	@ (80081f8 <vTaskSuspendAll+0x18>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	4a03      	ldr	r2, [pc, #12]	@ (80081f8 <vTaskSuspendAll+0x18>)
 80081ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	20001124 	.word	0x20001124

080081fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800820a:	4b42      	ldr	r3, [pc, #264]	@ (8008314 <xTaskResumeAll+0x118>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <xTaskResumeAll+0x2e>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	603b      	str	r3, [r7, #0]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800822a:	f001 fa4d 	bl	80096c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800822e:	4b39      	ldr	r3, [pc, #228]	@ (8008314 <xTaskResumeAll+0x118>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	4a37      	ldr	r2, [pc, #220]	@ (8008314 <xTaskResumeAll+0x118>)
 8008236:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008238:	4b36      	ldr	r3, [pc, #216]	@ (8008314 <xTaskResumeAll+0x118>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d162      	bne.n	8008306 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008240:	4b35      	ldr	r3, [pc, #212]	@ (8008318 <xTaskResumeAll+0x11c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d05e      	beq.n	8008306 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008248:	e02f      	b.n	80082aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824a:	4b34      	ldr	r3, [pc, #208]	@ (800831c <xTaskResumeAll+0x120>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3318      	adds	r3, #24
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fe1e 	bl	8006e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3304      	adds	r3, #4
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fe19 	bl	8006e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826a:	4b2d      	ldr	r3, [pc, #180]	@ (8008320 <xTaskResumeAll+0x124>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d903      	bls.n	800827a <xTaskResumeAll+0x7e>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4a2a      	ldr	r2, [pc, #168]	@ (8008320 <xTaskResumeAll+0x124>)
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4a27      	ldr	r2, [pc, #156]	@ (8008324 <xTaskResumeAll+0x128>)
 8008288:	441a      	add	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3304      	adds	r3, #4
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f7fe fda4 	bl	8006dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	4b23      	ldr	r3, [pc, #140]	@ (8008328 <xTaskResumeAll+0x12c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d302      	bcc.n	80082aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80082a4:	4b21      	ldr	r3, [pc, #132]	@ (800832c <xTaskResumeAll+0x130>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082aa:	4b1c      	ldr	r3, [pc, #112]	@ (800831c <xTaskResumeAll+0x120>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1cb      	bne.n	800824a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082b8:	f000 fb66 	bl	8008988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008330 <xTaskResumeAll+0x134>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d010      	beq.n	80082ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082c8:	f000 f846 	bl	8008358 <xTaskIncrementTick>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80082d2:	4b16      	ldr	r3, [pc, #88]	@ (800832c <xTaskResumeAll+0x130>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3b01      	subs	r3, #1
 80082dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f1      	bne.n	80082c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80082e4:	4b12      	ldr	r3, [pc, #72]	@ (8008330 <xTaskResumeAll+0x134>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082ea:	4b10      	ldr	r3, [pc, #64]	@ (800832c <xTaskResumeAll+0x130>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008334 <xTaskResumeAll+0x138>)
 80082f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008306:	f001 fa11 	bl	800972c <vPortExitCritical>

	return xAlreadyYielded;
 800830a:	68bb      	ldr	r3, [r7, #8]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20001124 	.word	0x20001124
 8008318:	200010fc 	.word	0x200010fc
 800831c:	200010bc 	.word	0x200010bc
 8008320:	20001104 	.word	0x20001104
 8008324:	20000c2c 	.word	0x20000c2c
 8008328:	20000c28 	.word	0x20000c28
 800832c:	20001110 	.word	0x20001110
 8008330:	2000110c 	.word	0x2000110c
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800833e:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <xTaskGetTickCount+0x1c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008344:	687b      	ldr	r3, [r7, #4]
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20001100 	.word	0x20001100

08008358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008362:	4b4f      	ldr	r3, [pc, #316]	@ (80084a0 <xTaskIncrementTick+0x148>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 8090 	bne.w	800848c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800836c:	4b4d      	ldr	r3, [pc, #308]	@ (80084a4 <xTaskIncrementTick+0x14c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008374:	4a4b      	ldr	r2, [pc, #300]	@ (80084a4 <xTaskIncrementTick+0x14c>)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d121      	bne.n	80083c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008380:	4b49      	ldr	r3, [pc, #292]	@ (80084a8 <xTaskIncrementTick+0x150>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	603b      	str	r3, [r7, #0]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xTaskIncrementTick+0x46>
 80083a2:	4b41      	ldr	r3, [pc, #260]	@ (80084a8 <xTaskIncrementTick+0x150>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	4b40      	ldr	r3, [pc, #256]	@ (80084ac <xTaskIncrementTick+0x154>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a3e      	ldr	r2, [pc, #248]	@ (80084a8 <xTaskIncrementTick+0x150>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	4a3e      	ldr	r2, [pc, #248]	@ (80084ac <xTaskIncrementTick+0x154>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	4b3e      	ldr	r3, [pc, #248]	@ (80084b0 <xTaskIncrementTick+0x158>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a3c      	ldr	r2, [pc, #240]	@ (80084b0 <xTaskIncrementTick+0x158>)
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	f000 fae2 	bl	8008988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083c4:	4b3b      	ldr	r3, [pc, #236]	@ (80084b4 <xTaskIncrementTick+0x15c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d349      	bcc.n	8008462 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ce:	4b36      	ldr	r3, [pc, #216]	@ (80084a8 <xTaskIncrementTick+0x150>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d8:	4b36      	ldr	r3, [pc, #216]	@ (80084b4 <xTaskIncrementTick+0x15c>)
 80083da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083de:	601a      	str	r2, [r3, #0]
					break;
 80083e0:	e03f      	b.n	8008462 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e2:	4b31      	ldr	r3, [pc, #196]	@ (80084a8 <xTaskIncrementTick+0x150>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d203      	bcs.n	8008402 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083fa:	4a2e      	ldr	r2, [pc, #184]	@ (80084b4 <xTaskIncrementTick+0x15c>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008400:	e02f      	b.n	8008462 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fd46 	bl	8006e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fd3d 	bl	8006e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008422:	4b25      	ldr	r3, [pc, #148]	@ (80084b8 <xTaskIncrementTick+0x160>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d903      	bls.n	8008432 <xTaskIncrementTick+0xda>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842e:	4a22      	ldr	r2, [pc, #136]	@ (80084b8 <xTaskIncrementTick+0x160>)
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4a1f      	ldr	r2, [pc, #124]	@ (80084bc <xTaskIncrementTick+0x164>)
 8008440:	441a      	add	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe fcc8 	bl	8006dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008452:	4b1b      	ldr	r3, [pc, #108]	@ (80084c0 <xTaskIncrementTick+0x168>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d3b8      	bcc.n	80083ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008460:	e7b5      	b.n	80083ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008462:	4b17      	ldr	r3, [pc, #92]	@ (80084c0 <xTaskIncrementTick+0x168>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008468:	4914      	ldr	r1, [pc, #80]	@ (80084bc <xTaskIncrementTick+0x164>)
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d901      	bls.n	800847e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800847a:	2301      	movs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800847e:	4b11      	ldr	r3, [pc, #68]	@ (80084c4 <xTaskIncrementTick+0x16c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e004      	b.n	8008496 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800848c:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <xTaskIncrementTick+0x170>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	4a0d      	ldr	r2, [pc, #52]	@ (80084c8 <xTaskIncrementTick+0x170>)
 8008494:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008496:	697b      	ldr	r3, [r7, #20]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20001124 	.word	0x20001124
 80084a4:	20001100 	.word	0x20001100
 80084a8:	200010b4 	.word	0x200010b4
 80084ac:	200010b8 	.word	0x200010b8
 80084b0:	20001114 	.word	0x20001114
 80084b4:	2000111c 	.word	0x2000111c
 80084b8:	20001104 	.word	0x20001104
 80084bc:	20000c2c 	.word	0x20000c2c
 80084c0:	20000c28 	.word	0x20000c28
 80084c4:	20001110 	.word	0x20001110
 80084c8:	2000110c 	.word	0x2000110c

080084cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008580 <vTaskSwitchContext+0xb4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084da:	4b2a      	ldr	r3, [pc, #168]	@ (8008584 <vTaskSwitchContext+0xb8>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e0:	e047      	b.n	8008572 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80084e2:	4b28      	ldr	r3, [pc, #160]	@ (8008584 <vTaskSwitchContext+0xb8>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e8:	4b27      	ldr	r3, [pc, #156]	@ (8008588 <vTaskSwitchContext+0xbc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e011      	b.n	8008514 <vTaskSwitchContext+0x48>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <vTaskSwitchContext+0x42>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	607b      	str	r3, [r7, #4]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vTaskSwitchContext+0x3e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b01      	subs	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	491d      	ldr	r1, [pc, #116]	@ (800858c <vTaskSwitchContext+0xc0>)
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0e3      	beq.n	80084f0 <vTaskSwitchContext+0x24>
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a16      	ldr	r2, [pc, #88]	@ (800858c <vTaskSwitchContext+0xc0>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	3308      	adds	r3, #8
 800854a:	429a      	cmp	r2, r3
 800854c:	d104      	bne.n	8008558 <vTaskSwitchContext+0x8c>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <vTaskSwitchContext+0xc4>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	4a09      	ldr	r2, [pc, #36]	@ (8008588 <vTaskSwitchContext+0xbc>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008568:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <vTaskSwitchContext+0xc4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3354      	adds	r3, #84	@ 0x54
 800856e:	4a09      	ldr	r2, [pc, #36]	@ (8008594 <vTaskSwitchContext+0xc8>)
 8008570:	6013      	str	r3, [r2, #0]
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20001124 	.word	0x20001124
 8008584:	20001110 	.word	0x20001110
 8008588:	20001104 	.word	0x20001104
 800858c:	20000c2c 	.word	0x20000c2c
 8008590:	20000c28 	.word	0x20000c28
 8008594:	20000020 	.word	0x20000020

08008598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <vTaskPlaceOnEventList+0x48>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3318      	adds	r3, #24
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fe fc2c 	bl	8006e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085ce:	2101      	movs	r1, #1
 80085d0:	6838      	ldr	r0, [r7, #0]
 80085d2:	f000 fb97 	bl	8008d04 <prvAddCurrentTaskToDelayedList>
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000c28 	.word	0x20000c28

080085e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	617b      	str	r3, [r7, #20]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800860e:	4b0a      	ldr	r3, [pc, #40]	@ (8008638 <vTaskPlaceOnEventListRestricted+0x54>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3318      	adds	r3, #24
 8008614:	4619      	mov	r1, r3
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7fe fbe1 	bl	8006dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008626:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f000 fb6a 	bl	8008d04 <prvAddCurrentTaskToDelayedList>
	}
 8008630:	bf00      	nop
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20000c28 	.word	0x20000c28

0800863c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60fb      	str	r3, [r7, #12]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	3318      	adds	r3, #24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fc12 	bl	8006e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008674:	4b1d      	ldr	r3, [pc, #116]	@ (80086ec <xTaskRemoveFromEventList+0xb0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d11d      	bne.n	80086b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3304      	adds	r3, #4
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fc09 	bl	8006e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868a:	4b19      	ldr	r3, [pc, #100]	@ (80086f0 <xTaskRemoveFromEventList+0xb4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d903      	bls.n	800869a <xTaskRemoveFromEventList+0x5e>
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008696:	4a16      	ldr	r2, [pc, #88]	@ (80086f0 <xTaskRemoveFromEventList+0xb4>)
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4a13      	ldr	r2, [pc, #76]	@ (80086f4 <xTaskRemoveFromEventList+0xb8>)
 80086a8:	441a      	add	r2, r3
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f7fe fb94 	bl	8006dde <vListInsertEnd>
 80086b6:	e005      	b.n	80086c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3318      	adds	r3, #24
 80086bc:	4619      	mov	r1, r3
 80086be:	480e      	ldr	r0, [pc, #56]	@ (80086f8 <xTaskRemoveFromEventList+0xbc>)
 80086c0:	f7fe fb8d 	bl	8006dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c8:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <xTaskRemoveFromEventList+0xc0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d905      	bls.n	80086de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008700 <xTaskRemoveFromEventList+0xc4>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e001      	b.n	80086e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086e2:	697b      	ldr	r3, [r7, #20]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20001124 	.word	0x20001124
 80086f0:	20001104 	.word	0x20001104
 80086f4:	20000c2c 	.word	0x20000c2c
 80086f8:	200010bc 	.word	0x200010bc
 80086fc:	20000c28 	.word	0x20000c28
 8008700:	20001110 	.word	0x20001110

08008704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <vTaskInternalSetTimeOutState+0x24>)
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008714:	4b05      	ldr	r3, [pc, #20]	@ (800872c <vTaskInternalSetTimeOutState+0x28>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	605a      	str	r2, [r3, #4]
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20001114 	.word	0x20001114
 800872c:	20001100 	.word	0x20001100

08008730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	613b      	str	r3, [r7, #16]
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	60fb      	str	r3, [r7, #12]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008776:	f000 ffa7 	bl	80096c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800877a:	4b1d      	ldr	r3, [pc, #116]	@ (80087f0 <xTaskCheckForTimeOut+0xc0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008792:	d102      	bne.n	800879a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e023      	b.n	80087e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4b15      	ldr	r3, [pc, #84]	@ (80087f4 <xTaskCheckForTimeOut+0xc4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d007      	beq.n	80087b6 <xTaskCheckForTimeOut+0x86>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	e015      	b.n	80087e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d20b      	bcs.n	80087d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	1ad2      	subs	r2, r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff99 	bl	8008704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	e004      	b.n	80087e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087de:	2301      	movs	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087e2:	f000 ffa3 	bl	800972c <vPortExitCritical>

	return xReturn;
 80087e6:	69fb      	ldr	r3, [r7, #28]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20001100 	.word	0x20001100
 80087f4:	20001114 	.word	0x20001114

080087f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087fc:	4b03      	ldr	r3, [pc, #12]	@ (800880c <vTaskMissedYield+0x14>)
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]
}
 8008802:	bf00      	nop
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20001110 	.word	0x20001110

08008810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008818:	f000 f852 	bl	80088c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <prvIdleTask+0x28>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d9f9      	bls.n	8008818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008824:	4b05      	ldr	r3, [pc, #20]	@ (800883c <prvIdleTask+0x2c>)
 8008826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008834:	e7f0      	b.n	8008818 <prvIdleTask+0x8>
 8008836:	bf00      	nop
 8008838:	20000c2c 	.word	0x20000c2c
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008846:	2300      	movs	r3, #0
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	e00c      	b.n	8008866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4a12      	ldr	r2, [pc, #72]	@ (80088a0 <prvInitialiseTaskLists+0x60>)
 8008858:	4413      	add	r3, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fa92 	bl	8006d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3301      	adds	r3, #1
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b37      	cmp	r3, #55	@ 0x37
 800886a:	d9ef      	bls.n	800884c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800886c:	480d      	ldr	r0, [pc, #52]	@ (80088a4 <prvInitialiseTaskLists+0x64>)
 800886e:	f7fe fa89 	bl	8006d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008872:	480d      	ldr	r0, [pc, #52]	@ (80088a8 <prvInitialiseTaskLists+0x68>)
 8008874:	f7fe fa86 	bl	8006d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008878:	480c      	ldr	r0, [pc, #48]	@ (80088ac <prvInitialiseTaskLists+0x6c>)
 800887a:	f7fe fa83 	bl	8006d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800887e:	480c      	ldr	r0, [pc, #48]	@ (80088b0 <prvInitialiseTaskLists+0x70>)
 8008880:	f7fe fa80 	bl	8006d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008884:	480b      	ldr	r0, [pc, #44]	@ (80088b4 <prvInitialiseTaskLists+0x74>)
 8008886:	f7fe fa7d 	bl	8006d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800888a:	4b0b      	ldr	r3, [pc, #44]	@ (80088b8 <prvInitialiseTaskLists+0x78>)
 800888c:	4a05      	ldr	r2, [pc, #20]	@ (80088a4 <prvInitialiseTaskLists+0x64>)
 800888e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008890:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <prvInitialiseTaskLists+0x7c>)
 8008892:	4a05      	ldr	r2, [pc, #20]	@ (80088a8 <prvInitialiseTaskLists+0x68>)
 8008894:	601a      	str	r2, [r3, #0]
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20000c2c 	.word	0x20000c2c
 80088a4:	2000108c 	.word	0x2000108c
 80088a8:	200010a0 	.word	0x200010a0
 80088ac:	200010bc 	.word	0x200010bc
 80088b0:	200010d0 	.word	0x200010d0
 80088b4:	200010e8 	.word	0x200010e8
 80088b8:	200010b4 	.word	0x200010b4
 80088bc:	200010b8 	.word	0x200010b8

080088c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088c6:	e019      	b.n	80088fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088c8:	f000 fefe 	bl	80096c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088cc:	4b10      	ldr	r3, [pc, #64]	@ (8008910 <prvCheckTasksWaitingTermination+0x50>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe fadd 	bl	8006e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <prvCheckTasksWaitingTermination+0x54>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008914 <prvCheckTasksWaitingTermination+0x54>)
 80088e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <prvCheckTasksWaitingTermination+0x58>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008918 <prvCheckTasksWaitingTermination+0x58>)
 80088f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088f2:	f000 ff1b 	bl	800972c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f810 	bl	800891c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088fc:	4b06      	ldr	r3, [pc, #24]	@ (8008918 <prvCheckTasksWaitingTermination+0x58>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e1      	bne.n	80088c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200010d0 	.word	0x200010d0
 8008914:	200010fc 	.word	0x200010fc
 8008918:	200010e4 	.word	0x200010e4

0800891c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3354      	adds	r3, #84	@ 0x54
 8008928:	4618      	mov	r0, r3
 800892a:	f002 f98b 	bl	800ac44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008934:	2b00      	cmp	r3, #0
 8008936:	d108      	bne.n	800894a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893c:	4618      	mov	r0, r3
 800893e:	f001 f8b3 	bl	8009aa8 <vPortFree>
				vPortFree( pxTCB );
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 f8b0 	bl	8009aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008948:	e019      	b.n	800897e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008950:	2b01      	cmp	r3, #1
 8008952:	d103      	bne.n	800895c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f8a7 	bl	8009aa8 <vPortFree>
	}
 800895a:	e010      	b.n	800897e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008962:	2b02      	cmp	r3, #2
 8008964:	d00b      	beq.n	800897e <prvDeleteTCB+0x62>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60fb      	str	r3, [r7, #12]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <prvDeleteTCB+0x5e>
	}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800898e:	4b0c      	ldr	r3, [pc, #48]	@ (80089c0 <prvResetNextTaskUnblockTime+0x38>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <prvResetNextTaskUnblockTime+0x3c>)
 800899a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800899e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089a0:	e008      	b.n	80089b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a2:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <prvResetNextTaskUnblockTime+0x38>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	4a04      	ldr	r2, [pc, #16]	@ (80089c4 <prvResetNextTaskUnblockTime+0x3c>)
 80089b2:	6013      	str	r3, [r2, #0]
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	200010b4 	.word	0x200010b4
 80089c4:	2000111c 	.word	0x2000111c

080089c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80089ce:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <xTaskGetCurrentTaskHandle+0x1c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80089d4:	687b      	ldr	r3, [r7, #4]
	}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000c28 	.word	0x20000c28

080089e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089ee:	4b0b      	ldr	r3, [pc, #44]	@ (8008a1c <xTaskGetSchedulerState+0x34>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d102      	bne.n	80089fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089f6:	2301      	movs	r3, #1
 80089f8:	607b      	str	r3, [r7, #4]
 80089fa:	e008      	b.n	8008a0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fc:	4b08      	ldr	r3, [pc, #32]	@ (8008a20 <xTaskGetSchedulerState+0x38>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a04:	2302      	movs	r3, #2
 8008a06:	607b      	str	r3, [r7, #4]
 8008a08:	e001      	b.n	8008a0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a0e:	687b      	ldr	r3, [r7, #4]
	}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20001108 	.word	0x20001108
 8008a20:	20001124 	.word	0x20001124

08008a24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d051      	beq.n	8008ade <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae8 <xTaskPriorityInherit+0xc4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d241      	bcs.n	8008acc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	db06      	blt.n	8008a5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a50:	4b25      	ldr	r3, [pc, #148]	@ (8008ae8 <xTaskPriorityInherit+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6959      	ldr	r1, [r3, #20]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008aec <xTaskPriorityInherit+0xc8>)
 8008a70:	4413      	add	r3, r2
 8008a72:	4299      	cmp	r1, r3
 8008a74:	d122      	bne.n	8008abc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fa0c 	bl	8006e98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a80:	4b19      	ldr	r3, [pc, #100]	@ (8008ae8 <xTaskPriorityInherit+0xc4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8e:	4b18      	ldr	r3, [pc, #96]	@ (8008af0 <xTaskPriorityInherit+0xcc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d903      	bls.n	8008a9e <xTaskPriorityInherit+0x7a>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	4a15      	ldr	r2, [pc, #84]	@ (8008af0 <xTaskPriorityInherit+0xcc>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4a10      	ldr	r2, [pc, #64]	@ (8008aec <xTaskPriorityInherit+0xc8>)
 8008aac:	441a      	add	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fe f992 	bl	8006dde <vListInsertEnd>
 8008aba:	e004      	b.n	8008ac6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <xTaskPriorityInherit+0xc4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e008      	b.n	8008ade <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ad0:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <xTaskPriorityInherit+0xc4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d201      	bcs.n	8008ade <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ade:	68fb      	ldr	r3, [r7, #12]
	}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000c28 	.word	0x20000c28
 8008aec:	20000c2c 	.word	0x20000c2c
 8008af0:	20001104 	.word	0x20001104

08008af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d058      	beq.n	8008bbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bc8 <xTaskPriorityDisinherit+0xd4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d00b      	beq.n	8008b2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10b      	bne.n	8008b4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	60bb      	str	r3, [r7, #8]
}
 8008b46:	bf00      	nop
 8008b48:	bf00      	nop
 8008b4a:	e7fd      	b.n	8008b48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d02c      	beq.n	8008bbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d128      	bne.n	8008bbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe f992 	bl	8006e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008bcc <xTaskPriorityDisinherit+0xd8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d903      	bls.n	8008b9c <xTaskPriorityDisinherit+0xa8>
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b98:	4a0c      	ldr	r2, [pc, #48]	@ (8008bcc <xTaskPriorityDisinherit+0xd8>)
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a09      	ldr	r2, [pc, #36]	@ (8008bd0 <xTaskPriorityDisinherit+0xdc>)
 8008baa:	441a      	add	r2, r3
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7fe f913 	bl	8006dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bbc:	697b      	ldr	r3, [r7, #20]
	}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000c28 	.word	0x20000c28
 8008bcc:	20001104 	.word	0x20001104
 8008bd0:	20000c2c 	.word	0x20000c2c

08008bd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d06c      	beq.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d902      	bls.n	8008c1c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	e002      	b.n	8008c22 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c20:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d04c      	beq.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d147      	bne.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c36:	4b26      	ldr	r3, [pc, #152]	@ (8008cd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d10b      	bne.n	8008c58 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60bb      	str	r3, [r7, #8]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	db04      	blt.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	6959      	ldr	r1, [r3, #20]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4a13      	ldr	r2, [pc, #76]	@ (8008cd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c86:	4413      	add	r3, r2
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d11c      	bne.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe f901 	bl	8006e98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d903      	bls.n	8008caa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8008cd8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4a07      	ldr	r2, [pc, #28]	@ (8008cd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008cb8:	441a      	add	r2, r3
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe f88c 	bl	8006dde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cc6:	bf00      	nop
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000c28 	.word	0x20000c28
 8008cd4:	20000c2c 	.word	0x20000c2c
 8008cd8:	20001104 	.word	0x20001104

08008cdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ce0:	4b07      	ldr	r3, [pc, #28]	@ (8008d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ce8:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cee:	3201      	adds	r2, #1
 8008cf0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008cf2:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000c28 	.word	0x20000c28

08008d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d0e:	4b21      	ldr	r3, [pc, #132]	@ (8008d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d14:	4b20      	ldr	r3, [pc, #128]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe f8bc 	bl	8006e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d26:	d10a      	bne.n	8008d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d007      	beq.n	8008d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4819      	ldr	r0, [pc, #100]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8008d38:	f7fe f851 	bl	8006dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d3c:	e026      	b.n	8008d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4413      	add	r3, r2
 8008d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d46:	4b14      	ldr	r3, [pc, #80]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d209      	bcs.n	8008d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d56:	4b12      	ldr	r3, [pc, #72]	@ (8008da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7fe f85f 	bl	8006e26 <vListInsert>
}
 8008d68:	e010      	b.n	8008d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fe f855 	bl	8006e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d202      	bcs.n	8008d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d86:	4a08      	ldr	r2, [pc, #32]	@ (8008da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6013      	str	r3, [r2, #0]
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20001100 	.word	0x20001100
 8008d98:	20000c28 	.word	0x20000c28
 8008d9c:	200010e8 	.word	0x200010e8
 8008da0:	200010b8 	.word	0x200010b8
 8008da4:	200010b4 	.word	0x200010b4
 8008da8:	2000111c 	.word	0x2000111c

08008dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	@ 0x28
 8008db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008db6:	f000 fb13 	bl	80093e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dba:	4b1d      	ldr	r3, [pc, #116]	@ (8008e30 <xTimerCreateTimerTask+0x84>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d021      	beq.n	8008e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dca:	1d3a      	adds	r2, r7, #4
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	f107 030c 	add.w	r3, r7, #12
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fd ffbb 	bl	8006d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	9202      	str	r2, [sp, #8]
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	2302      	movs	r3, #2
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	2300      	movs	r3, #0
 8008dea:	460a      	mov	r2, r1
 8008dec:	4911      	ldr	r1, [pc, #68]	@ (8008e34 <xTimerCreateTimerTask+0x88>)
 8008dee:	4812      	ldr	r0, [pc, #72]	@ (8008e38 <xTimerCreateTimerTask+0x8c>)
 8008df0:	f7fe ff92 	bl	8007d18 <xTaskCreateStatic>
 8008df4:	4603      	mov	r3, r0
 8008df6:	4a11      	ldr	r2, [pc, #68]	@ (8008e3c <xTimerCreateTimerTask+0x90>)
 8008df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dfa:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <xTimerCreateTimerTask+0x90>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e02:	2301      	movs	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	613b      	str	r3, [r7, #16]
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e24:	697b      	ldr	r3, [r7, #20]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001158 	.word	0x20001158
 8008e34:	0800e520 	.word	0x0800e520
 8008e38:	08008f79 	.word	0x08008f79
 8008e3c:	2000115c 	.word	0x2000115c

08008e40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	@ 0x28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	623b      	str	r3, [r7, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	bf00      	nop
 8008e6e:	e7fd      	b.n	8008e6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e70:	4b19      	ldr	r3, [pc, #100]	@ (8008ed8 <xTimerGenericCommand+0x98>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02a      	beq.n	8008ece <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	dc18      	bgt.n	8008ebc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e8a:	f7ff fdad 	bl	80089e8 <xTaskGetSchedulerState>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d109      	bne.n	8008ea8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e94:	4b10      	ldr	r3, [pc, #64]	@ (8008ed8 <xTimerGenericCommand+0x98>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	f107 0110 	add.w	r1, r7, #16
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea0:	f7fe fa22 	bl	80072e8 <xQueueGenericSend>
 8008ea4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ea6:	e012      	b.n	8008ece <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <xTimerGenericCommand+0x98>)
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	f107 0110 	add.w	r1, r7, #16
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f7fe fa18 	bl	80072e8 <xQueueGenericSend>
 8008eb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008eba:	e008      	b.n	8008ece <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ebc:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <xTimerGenericCommand+0x98>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	f107 0110 	add.w	r1, r7, #16
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	f7fe fb10 	bl	80074ec <xQueueGenericSendFromISR>
 8008ecc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3728      	adds	r7, #40	@ 0x28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20001158 	.word	0x20001158

08008edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee6:	4b23      	ldr	r3, [pc, #140]	@ (8008f74 <prvProcessExpiredTimer+0x98>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd ffcf 	bl	8006e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d023      	beq.n	8008f50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	18d1      	adds	r1, r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	6978      	ldr	r0, [r7, #20]
 8008f16:	f000 f8d5 	bl	80090c4 <prvInsertTimerInActiveList>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d020      	beq.n	8008f62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f20:	2300      	movs	r3, #0
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	f7ff ff88 	bl	8008e40 <xTimerGenericCommand>
 8008f30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d114      	bne.n	8008f62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	60fb      	str	r3, [r7, #12]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	6978      	ldr	r0, [r7, #20]
 8008f68:	4798      	blx	r3
}
 8008f6a:	bf00      	nop
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20001150 	.word	0x20001150

08008f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f80:	f107 0308 	add.w	r3, r7, #8
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 f859 	bl	800903c <prvGetNextExpireTime>
 8008f8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f805 	bl	8008fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f96:	f000 f8d7 	bl	8009148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f9a:	bf00      	nop
 8008f9c:	e7f0      	b.n	8008f80 <prvTimerTask+0x8>
	...

08008fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008faa:	f7ff f919 	bl	80081e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fae:	f107 0308 	add.w	r3, r7, #8
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f866 	bl	8009084 <prvSampleTimeNow>
 8008fb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d130      	bne.n	8009022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <prvProcessTimerOrBlockTask+0x3c>
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d806      	bhi.n	8008fdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fce:	f7ff f915 	bl	80081fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff81 	bl	8008edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fda:	e024      	b.n	8009026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d008      	beq.n	8008ff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fe2:	4b13      	ldr	r3, [pc, #76]	@ (8009030 <prvProcessTimerOrBlockTask+0x90>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <prvProcessTimerOrBlockTask+0x50>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <prvProcessTimerOrBlockTask+0x52>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8009034 <prvProcessTimerOrBlockTask+0x94>)
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	f7fe fe55 	bl	8007cb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009006:	f7ff f8f9 	bl	80081fc <xTaskResumeAll>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009010:	4b09      	ldr	r3, [pc, #36]	@ (8009038 <prvProcessTimerOrBlockTask+0x98>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
}
 8009020:	e001      	b.n	8009026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009022:	f7ff f8eb 	bl	80081fc <xTaskResumeAll>
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20001154 	.word	0x20001154
 8009034:	20001158 	.word	0x20001158
 8009038:	e000ed04 	.word	0xe000ed04

0800903c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009044:	4b0e      	ldr	r3, [pc, #56]	@ (8009080 <prvGetNextExpireTime+0x44>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <prvGetNextExpireTime+0x16>
 800904e:	2201      	movs	r2, #1
 8009050:	e000      	b.n	8009054 <prvGetNextExpireTime+0x18>
 8009052:	2200      	movs	r2, #0
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d105      	bne.n	800906c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009060:	4b07      	ldr	r3, [pc, #28]	@ (8009080 <prvGetNextExpireTime+0x44>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	e001      	b.n	8009070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20001150 	.word	0x20001150

08009084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800908c:	f7ff f954 	bl	8008338 <xTaskGetTickCount>
 8009090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009092:	4b0b      	ldr	r3, [pc, #44]	@ (80090c0 <prvSampleTimeNow+0x3c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d205      	bcs.n	80090a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800909c:	f000 f93a 	bl	8009314 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	e002      	b.n	80090ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090ae:	4a04      	ldr	r2, [pc, #16]	@ (80090c0 <prvSampleTimeNow+0x3c>)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090b4:	68fb      	ldr	r3, [r7, #12]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20001160 	.word	0x20001160

080090c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d812      	bhi.n	8009110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d302      	bcc.n	80090fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e01b      	b.n	8009136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090fe:	4b10      	ldr	r3, [pc, #64]	@ (8009140 <prvInsertTimerInActiveList+0x7c>)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f7fd fe8c 	bl	8006e26 <vListInsert>
 800910e:	e012      	b.n	8009136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d206      	bcs.n	8009126 <prvInsertTimerInActiveList+0x62>
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d302      	bcc.n	8009126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009120:	2301      	movs	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e007      	b.n	8009136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009126:	4b07      	ldr	r3, [pc, #28]	@ (8009144 <prvInsertTimerInActiveList+0x80>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3304      	adds	r3, #4
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fd fe78 	bl	8006e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009136:	697b      	ldr	r3, [r7, #20]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20001154 	.word	0x20001154
 8009144:	20001150 	.word	0x20001150

08009148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08e      	sub	sp, #56	@ 0x38
 800914c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800914e:	e0ce      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	da19      	bge.n	800918a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009156:	1d3b      	adds	r3, r7, #4
 8009158:	3304      	adds	r3, #4
 800915a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800915c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	61fb      	str	r3, [r7, #28]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009180:	6850      	ldr	r0, [r2, #4]
 8009182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009184:	6892      	ldr	r2, [r2, #8]
 8009186:	4611      	mov	r1, r2
 8009188:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f2c0 80ae 	blt.w	80092ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a0:	3304      	adds	r3, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fd fe78 	bl	8006e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091a8:	463b      	mov	r3, r7
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff ff6a 	bl	8009084 <prvSampleTimeNow>
 80091b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b09      	cmp	r3, #9
 80091b6:	f200 8097 	bhi.w	80092e8 <prvProcessReceivedCommands+0x1a0>
 80091ba:	a201      	add	r2, pc, #4	@ (adr r2, 80091c0 <prvProcessReceivedCommands+0x78>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091e9 	.word	0x080091e9
 80091c8:	080091e9 	.word	0x080091e9
 80091cc:	0800925f 	.word	0x0800925f
 80091d0:	08009273 	.word	0x08009273
 80091d4:	080092bf 	.word	0x080092bf
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	080091e9 	.word	0x080091e9
 80091e0:	0800925f 	.word	0x0800925f
 80091e4:	08009273 	.word	0x08009273
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	18d1      	adds	r1, r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009208:	f7ff ff5c 	bl	80090c4 <prvInsertTimerInActiveList>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d06c      	beq.n	80092ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d061      	beq.n	80092ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	441a      	add	r2, r3
 8009230:	2300      	movs	r3, #0
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	2100      	movs	r1, #0
 8009238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923a:	f7ff fe01 	bl	8008e40 <xTimerGenericCommand>
 800923e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d152      	bne.n	80092ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61bb      	str	r3, [r7, #24]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	b2da      	uxtb	r2, r3
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009270:	e03d      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	b2da      	uxtb	r2, r3
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009288:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10b      	bne.n	80092aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	617b      	str	r3, [r7, #20]
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	e7fd      	b.n	80092a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	18d1      	adds	r1, r2, r3
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092b8:	f7ff ff04 	bl	80090c4 <prvInsertTimerInActiveList>
					break;
 80092bc:	e017      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d103      	bne.n	80092d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ce:	f000 fbeb 	bl	8009aa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092d2:	e00c      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092e6:	e002      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092e8:	bf00      	nop
 80092ea:	e000      	b.n	80092ee <prvProcessReceivedCommands+0x1a6>
					break;
 80092ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ee:	4b08      	ldr	r3, [pc, #32]	@ (8009310 <prvProcessReceivedCommands+0x1c8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	1d39      	adds	r1, r7, #4
 80092f4:	2200      	movs	r2, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe f996 	bl	8007628 <xQueueReceive>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f47f af26 	bne.w	8009150 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	3730      	adds	r7, #48	@ 0x30
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20001158 	.word	0x20001158

08009314 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800931a:	e049      	b.n	80093b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800931c:	4b2e      	ldr	r3, [pc, #184]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009326:	4b2c      	ldr	r3, [pc, #176]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3304      	adds	r3, #4
 8009334:	4618      	mov	r0, r3
 8009336:	f7fd fdaf 	bl	8006e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d02f      	beq.n	80093b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	429a      	cmp	r2, r3
 8009360:	d90e      	bls.n	8009380 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800936e:	4b1a      	ldr	r3, [pc, #104]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fd fd54 	bl	8006e26 <vListInsert>
 800937e:	e017      	b.n	80093b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009380:	2300      	movs	r3, #0
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	2300      	movs	r3, #0
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	2100      	movs	r1, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fd58 	bl	8008e40 <xTimerGenericCommand>
 8009390:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10b      	bne.n	80093b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	603b      	str	r3, [r7, #0]
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093b0:	4b09      	ldr	r3, [pc, #36]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1b0      	bne.n	800931c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093ba:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093c0:	4b06      	ldr	r3, [pc, #24]	@ (80093dc <prvSwitchTimerLists+0xc8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a04      	ldr	r2, [pc, #16]	@ (80093d8 <prvSwitchTimerLists+0xc4>)
 80093c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093c8:	4a04      	ldr	r2, [pc, #16]	@ (80093dc <prvSwitchTimerLists+0xc8>)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	6013      	str	r3, [r2, #0]
}
 80093ce:	bf00      	nop
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20001150 	.word	0x20001150
 80093dc:	20001154 	.word	0x20001154

080093e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093e6:	f000 f96f 	bl	80096c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093ea:	4b15      	ldr	r3, [pc, #84]	@ (8009440 <prvCheckForValidListAndQueue+0x60>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d120      	bne.n	8009434 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093f2:	4814      	ldr	r0, [pc, #80]	@ (8009444 <prvCheckForValidListAndQueue+0x64>)
 80093f4:	f7fd fcc6 	bl	8006d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093f8:	4813      	ldr	r0, [pc, #76]	@ (8009448 <prvCheckForValidListAndQueue+0x68>)
 80093fa:	f7fd fcc3 	bl	8006d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093fe:	4b13      	ldr	r3, [pc, #76]	@ (800944c <prvCheckForValidListAndQueue+0x6c>)
 8009400:	4a10      	ldr	r2, [pc, #64]	@ (8009444 <prvCheckForValidListAndQueue+0x64>)
 8009402:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009404:	4b12      	ldr	r3, [pc, #72]	@ (8009450 <prvCheckForValidListAndQueue+0x70>)
 8009406:	4a10      	ldr	r2, [pc, #64]	@ (8009448 <prvCheckForValidListAndQueue+0x68>)
 8009408:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800940a:	2300      	movs	r3, #0
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4b11      	ldr	r3, [pc, #68]	@ (8009454 <prvCheckForValidListAndQueue+0x74>)
 8009410:	4a11      	ldr	r2, [pc, #68]	@ (8009458 <prvCheckForValidListAndQueue+0x78>)
 8009412:	2110      	movs	r1, #16
 8009414:	200a      	movs	r0, #10
 8009416:	f7fd fdd3 	bl	8006fc0 <xQueueGenericCreateStatic>
 800941a:	4603      	mov	r3, r0
 800941c:	4a08      	ldr	r2, [pc, #32]	@ (8009440 <prvCheckForValidListAndQueue+0x60>)
 800941e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009420:	4b07      	ldr	r3, [pc, #28]	@ (8009440 <prvCheckForValidListAndQueue+0x60>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009428:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <prvCheckForValidListAndQueue+0x60>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	490b      	ldr	r1, [pc, #44]	@ (800945c <prvCheckForValidListAndQueue+0x7c>)
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fc14 	bl	8007c5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009434:	f000 f97a 	bl	800972c <vPortExitCritical>
}
 8009438:	bf00      	nop
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20001158 	.word	0x20001158
 8009444:	20001128 	.word	0x20001128
 8009448:	2000113c 	.word	0x2000113c
 800944c:	20001150 	.word	0x20001150
 8009450:	20001154 	.word	0x20001154
 8009454:	20001204 	.word	0x20001204
 8009458:	20001164 	.word	0x20001164
 800945c:	0800e528 	.word	0x0800e528

08009460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3b04      	subs	r3, #4
 8009470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3b04      	subs	r3, #4
 800947e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f023 0201 	bic.w	r2, r3, #1
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3b04      	subs	r3, #4
 800948e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009490:	4a0c      	ldr	r2, [pc, #48]	@ (80094c4 <pxPortInitialiseStack+0x64>)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b14      	subs	r3, #20
 800949a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3b04      	subs	r3, #4
 80094a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f06f 0202 	mvn.w	r2, #2
 80094ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3b20      	subs	r3, #32
 80094b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094b6:	68fb      	ldr	r3, [r7, #12]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	080094c9 	.word	0x080094c9

080094c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094d2:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <prvTaskExitError+0x58>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094da:	d00b      	beq.n	80094f4 <prvTaskExitError+0x2c>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	60fb      	str	r3, [r7, #12]
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	e7fd      	b.n	80094f0 <prvTaskExitError+0x28>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	60bb      	str	r3, [r7, #8]
}
 8009506:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009508:	bf00      	nop
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0fc      	beq.n	800950a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009510:	bf00      	nop
 8009512:	bf00      	nop
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20000010 	.word	0x20000010
	...

08009530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009530:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <pxCurrentTCBConst2>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	f380 8809 	msr	PSP, r0
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	4770      	bx	lr
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst2>:
 8009550:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009558:	4808      	ldr	r0, [pc, #32]	@ (800957c <prvPortStartFirstTask+0x24>)
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f380 8808 	msr	MSP, r0
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8814 	msr	CONTROL, r0
 800956a:	b662      	cpsie	i
 800956c:	b661      	cpsie	f
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	df00      	svc	0
 8009578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800957a:	bf00      	nop
 800957c:	e000ed08 	.word	0xe000ed08

08009580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009586:	4b47      	ldr	r3, [pc, #284]	@ (80096a4 <xPortStartScheduler+0x124>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a47      	ldr	r2, [pc, #284]	@ (80096a8 <xPortStartScheduler+0x128>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d10b      	bne.n	80095a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	613b      	str	r3, [r7, #16]
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	e7fd      	b.n	80095a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095a8:	4b3e      	ldr	r3, [pc, #248]	@ (80096a4 <xPortStartScheduler+0x124>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a3f      	ldr	r2, [pc, #252]	@ (80096ac <xPortStartScheduler+0x12c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10b      	bne.n	80095ca <xPortStartScheduler+0x4a>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095ca:	4b39      	ldr	r3, [pc, #228]	@ (80096b0 <xPortStartScheduler+0x130>)
 80095cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	22ff      	movs	r2, #255	@ 0xff
 80095da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4b31      	ldr	r3, [pc, #196]	@ (80096b4 <xPortStartScheduler+0x134>)
 80095f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095f2:	4b31      	ldr	r3, [pc, #196]	@ (80096b8 <xPortStartScheduler+0x138>)
 80095f4:	2207      	movs	r2, #7
 80095f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095f8:	e009      	b.n	800960e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095fa:	4b2f      	ldr	r3, [pc, #188]	@ (80096b8 <xPortStartScheduler+0x138>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4a2d      	ldr	r2, [pc, #180]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	b2db      	uxtb	r3, r3
 800960c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009616:	2b80      	cmp	r3, #128	@ 0x80
 8009618:	d0ef      	beq.n	80095fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800961a:	4b27      	ldr	r3, [pc, #156]	@ (80096b8 <xPortStartScheduler+0x138>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1c3 0307 	rsb	r3, r3, #7
 8009622:	2b04      	cmp	r3, #4
 8009624:	d00b      	beq.n	800963e <xPortStartScheduler+0xbe>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60bb      	str	r3, [r7, #8]
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	e7fd      	b.n	800963a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800963e:	4b1e      	ldr	r3, [pc, #120]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	4a1c      	ldr	r2, [pc, #112]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009648:	4b1b      	ldr	r3, [pc, #108]	@ (80096b8 <xPortStartScheduler+0x138>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009650:	4a19      	ldr	r2, [pc, #100]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800965c:	4b17      	ldr	r3, [pc, #92]	@ (80096bc <xPortStartScheduler+0x13c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a16      	ldr	r2, [pc, #88]	@ (80096bc <xPortStartScheduler+0x13c>)
 8009662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009668:	4b14      	ldr	r3, [pc, #80]	@ (80096bc <xPortStartScheduler+0x13c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a13      	ldr	r2, [pc, #76]	@ (80096bc <xPortStartScheduler+0x13c>)
 800966e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009674:	f000 f8da 	bl	800982c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009678:	4b11      	ldr	r3, [pc, #68]	@ (80096c0 <xPortStartScheduler+0x140>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800967e:	f000 f8f9 	bl	8009874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009682:	4b10      	ldr	r3, [pc, #64]	@ (80096c4 <xPortStartScheduler+0x144>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a0f      	ldr	r2, [pc, #60]	@ (80096c4 <xPortStartScheduler+0x144>)
 8009688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800968c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800968e:	f7ff ff63 	bl	8009558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009692:	f7fe ff1b 	bl	80084cc <vTaskSwitchContext>
	prvTaskExitError();
 8009696:	f7ff ff17 	bl	80094c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	e000ed00 	.word	0xe000ed00
 80096a8:	410fc271 	.word	0x410fc271
 80096ac:	410fc270 	.word	0x410fc270
 80096b0:	e000e400 	.word	0xe000e400
 80096b4:	20001254 	.word	0x20001254
 80096b8:	20001258 	.word	0x20001258
 80096bc:	e000ed20 	.word	0xe000ed20
 80096c0:	20000010 	.word	0x20000010
 80096c4:	e000ef34 	.word	0xe000ef34

080096c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	607b      	str	r3, [r7, #4]
}
 80096e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096e2:	4b10      	ldr	r3, [pc, #64]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3301      	adds	r3, #1
 80096e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d110      	bne.n	8009716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <vPortEnterCritical+0x60>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <vPortEnterCritical+0x4e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	603b      	str	r3, [r7, #0]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <vPortEnterCritical+0x4a>
	}
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000010 	.word	0x20000010
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009732:	4b12      	ldr	r3, [pc, #72]	@ (800977c <vPortExitCritical+0x50>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <vPortExitCritical+0x26>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	607b      	str	r3, [r7, #4]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009752:	4b0a      	ldr	r3, [pc, #40]	@ (800977c <vPortExitCritical+0x50>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3b01      	subs	r3, #1
 8009758:	4a08      	ldr	r2, [pc, #32]	@ (800977c <vPortExitCritical+0x50>)
 800975a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800975c:	4b07      	ldr	r3, [pc, #28]	@ (800977c <vPortExitCritical+0x50>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <vPortExitCritical+0x44>
 8009764:	2300      	movs	r3, #0
 8009766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f383 8811 	msr	BASEPRI, r3
}
 800976e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000010 	.word	0x20000010

08009780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009780:	f3ef 8009 	mrs	r0, PSP
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4b15      	ldr	r3, [pc, #84]	@ (80097e0 <pxCurrentTCBConst>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	f01e 0f10 	tst.w	lr, #16
 8009790:	bf08      	it	eq
 8009792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	6010      	str	r0, [r2, #0]
 800979c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097a4:	f380 8811 	msr	BASEPRI, r0
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f7fe fe8c 	bl	80084cc <vTaskSwitchContext>
 80097b4:	f04f 0000 	mov.w	r0, #0
 80097b8:	f380 8811 	msr	BASEPRI, r0
 80097bc:	bc09      	pop	{r0, r3}
 80097be:	6819      	ldr	r1, [r3, #0]
 80097c0:	6808      	ldr	r0, [r1, #0]
 80097c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c6:	f01e 0f10 	tst.w	lr, #16
 80097ca:	bf08      	it	eq
 80097cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097d0:	f380 8809 	msr	PSP, r0
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst>:
 80097e0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009802:	f7fe fda9 	bl	8008358 <xTaskIncrementTick>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <xPortSysTickHandler+0x40>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f383 8811 	msr	BASEPRI, r3
}
 800981e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009830:	4b0b      	ldr	r3, [pc, #44]	@ (8009860 <vPortSetupTimerInterrupt+0x34>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <vPortSetupTimerInterrupt+0x38>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800983c:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <vPortSetupTimerInterrupt+0x3c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a0a      	ldr	r2, [pc, #40]	@ (800986c <vPortSetupTimerInterrupt+0x40>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	099b      	lsrs	r3, r3, #6
 8009848:	4a09      	ldr	r2, [pc, #36]	@ (8009870 <vPortSetupTimerInterrupt+0x44>)
 800984a:	3b01      	subs	r3, #1
 800984c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800984e:	4b04      	ldr	r3, [pc, #16]	@ (8009860 <vPortSetupTimerInterrupt+0x34>)
 8009850:	2207      	movs	r2, #7
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e000e010 	.word	0xe000e010
 8009864:	e000e018 	.word	0xe000e018
 8009868:	20000004 	.word	0x20000004
 800986c:	10624dd3 	.word	0x10624dd3
 8009870:	e000e014 	.word	0xe000e014

08009874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009884 <vPortEnableVFP+0x10>
 8009878:	6801      	ldr	r1, [r0, #0]
 800987a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800987e:	6001      	str	r1, [r0, #0]
 8009880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009882:	bf00      	nop
 8009884:	e000ed88 	.word	0xe000ed88

08009888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b0f      	cmp	r3, #15
 8009898:	d915      	bls.n	80098c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800989a:	4a18      	ldr	r2, [pc, #96]	@ (80098fc <vPortValidateInterruptPriority+0x74>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098a4:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <vPortValidateInterruptPriority+0x78>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	7afa      	ldrb	r2, [r7, #11]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d20b      	bcs.n	80098c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	607b      	str	r3, [r7, #4]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009904 <vPortValidateInterruptPriority+0x7c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009908 <vPortValidateInterruptPriority+0x80>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d90b      	bls.n	80098ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	603b      	str	r3, [r7, #0]
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	e7fd      	b.n	80098ea <vPortValidateInterruptPriority+0x62>
	}
 80098ee:	bf00      	nop
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	e000e3f0 	.word	0xe000e3f0
 8009900:	20001254 	.word	0x20001254
 8009904:	e000ed0c 	.word	0xe000ed0c
 8009908:	20001258 	.word	0x20001258

0800990c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	@ 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009918:	f7fe fc62 	bl	80081e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800991c:	4b5c      	ldr	r3, [pc, #368]	@ (8009a90 <pvPortMalloc+0x184>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009924:	f000 f924 	bl	8009b70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009928:	4b5a      	ldr	r3, [pc, #360]	@ (8009a94 <pvPortMalloc+0x188>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8095 	bne.w	8009a60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01e      	beq.n	800997a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800993c:	2208      	movs	r2, #8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4413      	add	r3, r2
 8009942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b00      	cmp	r3, #0
 800994c:	d015      	beq.n	800997a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f023 0307 	bic.w	r3, r3, #7
 8009954:	3308      	adds	r3, #8
 8009956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <pvPortMalloc+0x6e>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	617b      	str	r3, [r7, #20]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d06f      	beq.n	8009a60 <pvPortMalloc+0x154>
 8009980:	4b45      	ldr	r3, [pc, #276]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d86a      	bhi.n	8009a60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800998a:	4b44      	ldr	r3, [pc, #272]	@ (8009a9c <pvPortMalloc+0x190>)
 800998c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800998e:	4b43      	ldr	r3, [pc, #268]	@ (8009a9c <pvPortMalloc+0x190>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009994:	e004      	b.n	80099a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d903      	bls.n	80099b2 <pvPortMalloc+0xa6>
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f1      	bne.n	8009996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099b2:	4b37      	ldr	r3, [pc, #220]	@ (8009a90 <pvPortMalloc+0x184>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d051      	beq.n	8009a60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2208      	movs	r2, #8
 80099c2:	4413      	add	r3, r2
 80099c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	2308      	movs	r3, #8
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	429a      	cmp	r2, r3
 80099dc:	d920      	bls.n	8009a20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <pvPortMalloc+0xfc>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a1a:	69b8      	ldr	r0, [r7, #24]
 8009a1c:	f000 f90a 	bl	8009c34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a20:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <pvPortMalloc+0x194>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d203      	bcs.n	8009a42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a3a:	4b17      	ldr	r3, [pc, #92]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a18      	ldr	r2, [pc, #96]	@ (8009aa0 <pvPortMalloc+0x194>)
 8009a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	4b13      	ldr	r3, [pc, #76]	@ (8009a94 <pvPortMalloc+0x188>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a56:	4b13      	ldr	r3, [pc, #76]	@ (8009aa4 <pvPortMalloc+0x198>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a11      	ldr	r2, [pc, #68]	@ (8009aa4 <pvPortMalloc+0x198>)
 8009a5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a60:	f7fe fbcc 	bl	80081fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <pvPortMalloc+0x17a>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	60fb      	str	r3, [r7, #12]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <pvPortMalloc+0x176>
	return pvReturn;
 8009a86:	69fb      	ldr	r3, [r7, #28]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3728      	adds	r7, #40	@ 0x28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20004e64 	.word	0x20004e64
 8009a94:	20004e78 	.word	0x20004e78
 8009a98:	20004e68 	.word	0x20004e68
 8009a9c:	20004e5c 	.word	0x20004e5c
 8009aa0:	20004e6c 	.word	0x20004e6c
 8009aa4:	20004e70 	.word	0x20004e70

08009aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d04f      	beq.n	8009b5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aba:	2308      	movs	r3, #8
 8009abc:	425b      	negs	r3, r3
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b25      	ldr	r3, [pc, #148]	@ (8009b64 <vPortFree+0xbc>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <vPortFree+0x46>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60fb      	str	r3, [r7, #12]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <vPortFree+0x66>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60bb      	str	r3, [r7, #8]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	4b14      	ldr	r3, [pc, #80]	@ (8009b64 <vPortFree+0xbc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01e      	beq.n	8009b5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11a      	bne.n	8009b5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	4b0e      	ldr	r3, [pc, #56]	@ (8009b64 <vPortFree+0xbc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	401a      	ands	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b34:	f7fe fb54 	bl	80081e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <vPortFree+0xc0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	4a09      	ldr	r2, [pc, #36]	@ (8009b68 <vPortFree+0xc0>)
 8009b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b46:	6938      	ldr	r0, [r7, #16]
 8009b48:	f000 f874 	bl	8009c34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b4c:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <vPortFree+0xc4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3301      	adds	r3, #1
 8009b52:	4a06      	ldr	r2, [pc, #24]	@ (8009b6c <vPortFree+0xc4>)
 8009b54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b56:	f7fe fb51 	bl	80081fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b5a:	bf00      	nop
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20004e78 	.word	0x20004e78
 8009b68:	20004e68 	.word	0x20004e68
 8009b6c:	20004e74 	.word	0x20004e74

08009b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b7c:	4b27      	ldr	r3, [pc, #156]	@ (8009c1c <prvHeapInit+0xac>)
 8009b7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00c      	beq.n	8009ba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0307 	bic.w	r3, r3, #7
 8009b96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c1c <prvHeapInit+0xac>)
 8009ba0:	4413      	add	r3, r2
 8009ba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <prvHeapInit+0xb0>)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bae:	4b1c      	ldr	r3, [pc, #112]	@ (8009c20 <prvHeapInit+0xb0>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bbc:	2208      	movs	r2, #8
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4a15      	ldr	r2, [pc, #84]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd2:	4b14      	ldr	r3, [pc, #80]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bda:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8009c28 <prvHeapInit+0xb8>)
 8009bfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	4a09      	ldr	r2, [pc, #36]	@ (8009c2c <prvHeapInit+0xbc>)
 8009c06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c08:	4b09      	ldr	r3, [pc, #36]	@ (8009c30 <prvHeapInit+0xc0>)
 8009c0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c0e:	601a      	str	r2, [r3, #0]
}
 8009c10:	bf00      	nop
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	2000125c 	.word	0x2000125c
 8009c20:	20004e5c 	.word	0x20004e5c
 8009c24:	20004e64 	.word	0x20004e64
 8009c28:	20004e6c 	.word	0x20004e6c
 8009c2c:	20004e68 	.word	0x20004e68
 8009c30:	20004e78 	.word	0x20004e78

08009c34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c3c:	4b28      	ldr	r3, [pc, #160]	@ (8009ce0 <prvInsertBlockIntoFreeList+0xac>)
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e002      	b.n	8009c48 <prvInsertBlockIntoFreeList+0x14>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d8f7      	bhi.n	8009c42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d108      	bne.n	8009c76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d118      	bne.n	8009cbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d00d      	beq.n	8009cb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	e008      	b.n	8009cc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	e003      	b.n	8009cc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d002      	beq.n	8009cd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20004e5c 	.word	0x20004e5c
 8009ce4:	20004e64 	.word	0x20004e64

08009ce8 <__cvt>:
 8009ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	ec57 6b10 	vmov	r6, r7, d0
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	bfbb      	ittet	lt
 8009cfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009cfe:	461f      	movlt	r7, r3
 8009d00:	2300      	movge	r3, #0
 8009d02:	232d      	movlt	r3, #45	@ 0x2d
 8009d04:	700b      	strb	r3, [r1, #0]
 8009d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d0c:	4691      	mov	r9, r2
 8009d0e:	f023 0820 	bic.w	r8, r3, #32
 8009d12:	bfbc      	itt	lt
 8009d14:	4632      	movlt	r2, r6
 8009d16:	4616      	movlt	r6, r2
 8009d18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d1c:	d005      	beq.n	8009d2a <__cvt+0x42>
 8009d1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d22:	d100      	bne.n	8009d26 <__cvt+0x3e>
 8009d24:	3401      	adds	r4, #1
 8009d26:	2102      	movs	r1, #2
 8009d28:	e000      	b.n	8009d2c <__cvt+0x44>
 8009d2a:	2103      	movs	r1, #3
 8009d2c:	ab03      	add	r3, sp, #12
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	ab02      	add	r3, sp, #8
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	ec47 6b10 	vmov	d0, r6, r7
 8009d38:	4653      	mov	r3, sl
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	f001 f8d8 	bl	800aef0 <_dtoa_r>
 8009d40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d44:	4605      	mov	r5, r0
 8009d46:	d119      	bne.n	8009d7c <__cvt+0x94>
 8009d48:	f019 0f01 	tst.w	r9, #1
 8009d4c:	d00e      	beq.n	8009d6c <__cvt+0x84>
 8009d4e:	eb00 0904 	add.w	r9, r0, r4
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	4630      	mov	r0, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	f7f6 febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d5e:	b108      	cbz	r0, 8009d64 <__cvt+0x7c>
 8009d60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d64:	2230      	movs	r2, #48	@ 0x30
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	454b      	cmp	r3, r9
 8009d6a:	d31e      	bcc.n	8009daa <__cvt+0xc2>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d70:	1b5b      	subs	r3, r3, r5
 8009d72:	4628      	mov	r0, r5
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	b004      	add	sp, #16
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d80:	eb00 0904 	add.w	r9, r0, r4
 8009d84:	d1e5      	bne.n	8009d52 <__cvt+0x6a>
 8009d86:	7803      	ldrb	r3, [r0, #0]
 8009d88:	2b30      	cmp	r3, #48	@ 0x30
 8009d8a:	d10a      	bne.n	8009da2 <__cvt+0xba>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2300      	movs	r3, #0
 8009d90:	4630      	mov	r0, r6
 8009d92:	4639      	mov	r1, r7
 8009d94:	f7f6 fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d98:	b918      	cbnz	r0, 8009da2 <__cvt+0xba>
 8009d9a:	f1c4 0401 	rsb	r4, r4, #1
 8009d9e:	f8ca 4000 	str.w	r4, [sl]
 8009da2:	f8da 3000 	ldr.w	r3, [sl]
 8009da6:	4499      	add	r9, r3
 8009da8:	e7d3      	b.n	8009d52 <__cvt+0x6a>
 8009daa:	1c59      	adds	r1, r3, #1
 8009dac:	9103      	str	r1, [sp, #12]
 8009dae:	701a      	strb	r2, [r3, #0]
 8009db0:	e7d9      	b.n	8009d66 <__cvt+0x7e>

08009db2 <__exponent>:
 8009db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db4:	2900      	cmp	r1, #0
 8009db6:	bfba      	itte	lt
 8009db8:	4249      	neglt	r1, r1
 8009dba:	232d      	movlt	r3, #45	@ 0x2d
 8009dbc:	232b      	movge	r3, #43	@ 0x2b
 8009dbe:	2909      	cmp	r1, #9
 8009dc0:	7002      	strb	r2, [r0, #0]
 8009dc2:	7043      	strb	r3, [r0, #1]
 8009dc4:	dd29      	ble.n	8009e1a <__exponent+0x68>
 8009dc6:	f10d 0307 	add.w	r3, sp, #7
 8009dca:	461d      	mov	r5, r3
 8009dcc:	270a      	movs	r7, #10
 8009dce:	461a      	mov	r2, r3
 8009dd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009dd4:	fb07 1416 	mls	r4, r7, r6, r1
 8009dd8:	3430      	adds	r4, #48	@ 0x30
 8009dda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009dde:	460c      	mov	r4, r1
 8009de0:	2c63      	cmp	r4, #99	@ 0x63
 8009de2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009de6:	4631      	mov	r1, r6
 8009de8:	dcf1      	bgt.n	8009dce <__exponent+0x1c>
 8009dea:	3130      	adds	r1, #48	@ 0x30
 8009dec:	1e94      	subs	r4, r2, #2
 8009dee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009df2:	1c41      	adds	r1, r0, #1
 8009df4:	4623      	mov	r3, r4
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	d30a      	bcc.n	8009e10 <__exponent+0x5e>
 8009dfa:	f10d 0309 	add.w	r3, sp, #9
 8009dfe:	1a9b      	subs	r3, r3, r2
 8009e00:	42ac      	cmp	r4, r5
 8009e02:	bf88      	it	hi
 8009e04:	2300      	movhi	r3, #0
 8009e06:	3302      	adds	r3, #2
 8009e08:	4403      	add	r3, r0
 8009e0a:	1a18      	subs	r0, r3, r0
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e18:	e7ed      	b.n	8009df6 <__exponent+0x44>
 8009e1a:	2330      	movs	r3, #48	@ 0x30
 8009e1c:	3130      	adds	r1, #48	@ 0x30
 8009e1e:	7083      	strb	r3, [r0, #2]
 8009e20:	70c1      	strb	r1, [r0, #3]
 8009e22:	1d03      	adds	r3, r0, #4
 8009e24:	e7f1      	b.n	8009e0a <__exponent+0x58>
	...

08009e28 <_printf_float>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	b08d      	sub	sp, #52	@ 0x34
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e34:	4616      	mov	r6, r2
 8009e36:	461f      	mov	r7, r3
 8009e38:	4605      	mov	r5, r0
 8009e3a:	f000 feef 	bl	800ac1c <_localeconv_r>
 8009e3e:	6803      	ldr	r3, [r0, #0]
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f6 fa1c 	bl	8000280 <strlen>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e50:	9005      	str	r0, [sp, #20]
 8009e52:	3307      	adds	r3, #7
 8009e54:	f023 0307 	bic.w	r3, r3, #7
 8009e58:	f103 0208 	add.w	r2, r3, #8
 8009e5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e60:	f8d4 b000 	ldr.w	fp, [r4]
 8009e64:	f8c8 2000 	str.w	r2, [r8]
 8009e68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e70:	9307      	str	r3, [sp, #28]
 8009e72:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e7e:	4b9c      	ldr	r3, [pc, #624]	@ (800a0f0 <_printf_float+0x2c8>)
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e84:	f7f6 fe5a 	bl	8000b3c <__aeabi_dcmpun>
 8009e88:	bb70      	cbnz	r0, 8009ee8 <_printf_float+0xc0>
 8009e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e8e:	4b98      	ldr	r3, [pc, #608]	@ (800a0f0 <_printf_float+0x2c8>)
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e94:	f7f6 fe34 	bl	8000b00 <__aeabi_dcmple>
 8009e98:	bb30      	cbnz	r0, 8009ee8 <_printf_float+0xc0>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fe23 	bl	8000aec <__aeabi_dcmplt>
 8009ea6:	b110      	cbz	r0, 8009eae <_printf_float+0x86>
 8009ea8:	232d      	movs	r3, #45	@ 0x2d
 8009eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eae:	4a91      	ldr	r2, [pc, #580]	@ (800a0f4 <_printf_float+0x2cc>)
 8009eb0:	4b91      	ldr	r3, [pc, #580]	@ (800a0f8 <_printf_float+0x2d0>)
 8009eb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009eb6:	bf94      	ite	ls
 8009eb8:	4690      	movls	r8, r2
 8009eba:	4698      	movhi	r8, r3
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	f02b 0304 	bic.w	r3, fp, #4
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	f04f 0900 	mov.w	r9, #0
 8009eca:	9700      	str	r7, [sp, #0]
 8009ecc:	4633      	mov	r3, r6
 8009ece:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 f9d2 	bl	800a27c <_printf_common>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f040 808d 	bne.w	8009ff8 <_printf_float+0x1d0>
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ee2:	b00d      	add	sp, #52	@ 0x34
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	4640      	mov	r0, r8
 8009eee:	4649      	mov	r1, r9
 8009ef0:	f7f6 fe24 	bl	8000b3c <__aeabi_dcmpun>
 8009ef4:	b140      	cbz	r0, 8009f08 <_printf_float+0xe0>
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbc      	itt	lt
 8009efc:	232d      	movlt	r3, #45	@ 0x2d
 8009efe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009f02:	4a7e      	ldr	r2, [pc, #504]	@ (800a0fc <_printf_float+0x2d4>)
 8009f04:	4b7e      	ldr	r3, [pc, #504]	@ (800a100 <_printf_float+0x2d8>)
 8009f06:	e7d4      	b.n	8009eb2 <_printf_float+0x8a>
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f0e:	9206      	str	r2, [sp, #24]
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	d13b      	bne.n	8009f8c <_printf_float+0x164>
 8009f14:	2306      	movs	r3, #6
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f28:	ab09      	add	r3, sp, #36	@ 0x24
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	ec49 8b10 	vmov	d0, r8, r9
 8009f32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7ff fed6 	bl	8009ce8 <__cvt>
 8009f3c:	9b06      	ldr	r3, [sp, #24]
 8009f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f40:	2b47      	cmp	r3, #71	@ 0x47
 8009f42:	4680      	mov	r8, r0
 8009f44:	d129      	bne.n	8009f9a <_printf_float+0x172>
 8009f46:	1cc8      	adds	r0, r1, #3
 8009f48:	db02      	blt.n	8009f50 <_printf_float+0x128>
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	dd41      	ble.n	8009fd4 <_printf_float+0x1ac>
 8009f50:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f54:	fa5f fa8a 	uxtb.w	sl, sl
 8009f58:	3901      	subs	r1, #1
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f60:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f62:	f7ff ff26 	bl	8009db2 <__exponent>
 8009f66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f68:	1813      	adds	r3, r2, r0
 8009f6a:	2a01      	cmp	r2, #1
 8009f6c:	4681      	mov	r9, r0
 8009f6e:	6123      	str	r3, [r4, #16]
 8009f70:	dc02      	bgt.n	8009f78 <_printf_float+0x150>
 8009f72:	6822      	ldr	r2, [r4, #0]
 8009f74:	07d2      	lsls	r2, r2, #31
 8009f76:	d501      	bpl.n	8009f7c <_printf_float+0x154>
 8009f78:	3301      	adds	r3, #1
 8009f7a:	6123      	str	r3, [r4, #16]
 8009f7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0a2      	beq.n	8009eca <_printf_float+0xa2>
 8009f84:	232d      	movs	r3, #45	@ 0x2d
 8009f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f8a:	e79e      	b.n	8009eca <_printf_float+0xa2>
 8009f8c:	9a06      	ldr	r2, [sp, #24]
 8009f8e:	2a47      	cmp	r2, #71	@ 0x47
 8009f90:	d1c2      	bne.n	8009f18 <_printf_float+0xf0>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1c0      	bne.n	8009f18 <_printf_float+0xf0>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e7bd      	b.n	8009f16 <_printf_float+0xee>
 8009f9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f9e:	d9db      	bls.n	8009f58 <_printf_float+0x130>
 8009fa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009fa4:	d118      	bne.n	8009fd8 <_printf_float+0x1b0>
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	dd0b      	ble.n	8009fc4 <_printf_float+0x19c>
 8009fac:	6121      	str	r1, [r4, #16]
 8009fae:	b913      	cbnz	r3, 8009fb6 <_printf_float+0x18e>
 8009fb0:	6822      	ldr	r2, [r4, #0]
 8009fb2:	07d0      	lsls	r0, r2, #31
 8009fb4:	d502      	bpl.n	8009fbc <_printf_float+0x194>
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	440b      	add	r3, r1
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009fbe:	f04f 0900 	mov.w	r9, #0
 8009fc2:	e7db      	b.n	8009f7c <_printf_float+0x154>
 8009fc4:	b913      	cbnz	r3, 8009fcc <_printf_float+0x1a4>
 8009fc6:	6822      	ldr	r2, [r4, #0]
 8009fc8:	07d2      	lsls	r2, r2, #31
 8009fca:	d501      	bpl.n	8009fd0 <_printf_float+0x1a8>
 8009fcc:	3302      	adds	r3, #2
 8009fce:	e7f4      	b.n	8009fba <_printf_float+0x192>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e7f2      	b.n	8009fba <_printf_float+0x192>
 8009fd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	db05      	blt.n	8009fea <_printf_float+0x1c2>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	6121      	str	r1, [r4, #16]
 8009fe2:	07d8      	lsls	r0, r3, #31
 8009fe4:	d5ea      	bpl.n	8009fbc <_printf_float+0x194>
 8009fe6:	1c4b      	adds	r3, r1, #1
 8009fe8:	e7e7      	b.n	8009fba <_printf_float+0x192>
 8009fea:	2900      	cmp	r1, #0
 8009fec:	bfd4      	ite	le
 8009fee:	f1c1 0202 	rsble	r2, r1, #2
 8009ff2:	2201      	movgt	r2, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	e7e0      	b.n	8009fba <_printf_float+0x192>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	055a      	lsls	r2, r3, #21
 8009ffc:	d407      	bmi.n	800a00e <_printf_float+0x1e6>
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	4642      	mov	r2, r8
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	d12b      	bne.n	800a064 <_printf_float+0x23c>
 800a00c:	e767      	b.n	8009ede <_printf_float+0xb6>
 800a00e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a012:	f240 80dd 	bls.w	800a1d0 <_printf_float+0x3a8>
 800a016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	f7f6 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a022:	2800      	cmp	r0, #0
 800a024:	d033      	beq.n	800a08e <_printf_float+0x266>
 800a026:	4a37      	ldr	r2, [pc, #220]	@ (800a104 <_printf_float+0x2dc>)
 800a028:	2301      	movs	r3, #1
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	f43f af54 	beq.w	8009ede <_printf_float+0xb6>
 800a036:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a03a:	4543      	cmp	r3, r8
 800a03c:	db02      	blt.n	800a044 <_printf_float+0x21c>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07d8      	lsls	r0, r3, #31
 800a042:	d50f      	bpl.n	800a064 <_printf_float+0x23c>
 800a044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a048:	4631      	mov	r1, r6
 800a04a:	4628      	mov	r0, r5
 800a04c:	47b8      	blx	r7
 800a04e:	3001      	adds	r0, #1
 800a050:	f43f af45 	beq.w	8009ede <_printf_float+0xb6>
 800a054:	f04f 0900 	mov.w	r9, #0
 800a058:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a05c:	f104 0a1a 	add.w	sl, r4, #26
 800a060:	45c8      	cmp	r8, r9
 800a062:	dc09      	bgt.n	800a078 <_printf_float+0x250>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	079b      	lsls	r3, r3, #30
 800a068:	f100 8103 	bmi.w	800a272 <_printf_float+0x44a>
 800a06c:	68e0      	ldr	r0, [r4, #12]
 800a06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a070:	4298      	cmp	r0, r3
 800a072:	bfb8      	it	lt
 800a074:	4618      	movlt	r0, r3
 800a076:	e734      	b.n	8009ee2 <_printf_float+0xba>
 800a078:	2301      	movs	r3, #1
 800a07a:	4652      	mov	r2, sl
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f af2b 	beq.w	8009ede <_printf_float+0xb6>
 800a088:	f109 0901 	add.w	r9, r9, #1
 800a08c:	e7e8      	b.n	800a060 <_printf_float+0x238>
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	dc39      	bgt.n	800a108 <_printf_float+0x2e0>
 800a094:	4a1b      	ldr	r2, [pc, #108]	@ (800a104 <_printf_float+0x2dc>)
 800a096:	2301      	movs	r3, #1
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af1d 	beq.w	8009ede <_printf_float+0xb6>
 800a0a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a0a8:	ea59 0303 	orrs.w	r3, r9, r3
 800a0ac:	d102      	bne.n	800a0b4 <_printf_float+0x28c>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	07d9      	lsls	r1, r3, #31
 800a0b2:	d5d7      	bpl.n	800a064 <_printf_float+0x23c>
 800a0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b8      	blx	r7
 800a0be:	3001      	adds	r0, #1
 800a0c0:	f43f af0d 	beq.w	8009ede <_printf_float+0xb6>
 800a0c4:	f04f 0a00 	mov.w	sl, #0
 800a0c8:	f104 0b1a 	add.w	fp, r4, #26
 800a0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ce:	425b      	negs	r3, r3
 800a0d0:	4553      	cmp	r3, sl
 800a0d2:	dc01      	bgt.n	800a0d8 <_printf_float+0x2b0>
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	e793      	b.n	800a000 <_printf_float+0x1d8>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	465a      	mov	r2, fp
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f aefb 	beq.w	8009ede <_printf_float+0xb6>
 800a0e8:	f10a 0a01 	add.w	sl, sl, #1
 800a0ec:	e7ee      	b.n	800a0cc <_printf_float+0x2a4>
 800a0ee:	bf00      	nop
 800a0f0:	7fefffff 	.word	0x7fefffff
 800a0f4:	0800e5c4 	.word	0x0800e5c4
 800a0f8:	0800e5c8 	.word	0x0800e5c8
 800a0fc:	0800e5cc 	.word	0x0800e5cc
 800a100:	0800e5d0 	.word	0x0800e5d0
 800a104:	0800e5d4 	.word	0x0800e5d4
 800a108:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a10a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a10e:	4553      	cmp	r3, sl
 800a110:	bfa8      	it	ge
 800a112:	4653      	movge	r3, sl
 800a114:	2b00      	cmp	r3, #0
 800a116:	4699      	mov	r9, r3
 800a118:	dc36      	bgt.n	800a188 <_printf_float+0x360>
 800a11a:	f04f 0b00 	mov.w	fp, #0
 800a11e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a122:	f104 021a 	add.w	r2, r4, #26
 800a126:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a128:	9306      	str	r3, [sp, #24]
 800a12a:	eba3 0309 	sub.w	r3, r3, r9
 800a12e:	455b      	cmp	r3, fp
 800a130:	dc31      	bgt.n	800a196 <_printf_float+0x36e>
 800a132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a134:	459a      	cmp	sl, r3
 800a136:	dc3a      	bgt.n	800a1ae <_printf_float+0x386>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d437      	bmi.n	800a1ae <_printf_float+0x386>
 800a13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a140:	ebaa 0903 	sub.w	r9, sl, r3
 800a144:	9b06      	ldr	r3, [sp, #24]
 800a146:	ebaa 0303 	sub.w	r3, sl, r3
 800a14a:	4599      	cmp	r9, r3
 800a14c:	bfa8      	it	ge
 800a14e:	4699      	movge	r9, r3
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	dc33      	bgt.n	800a1be <_printf_float+0x396>
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a15e:	f104 0b1a 	add.w	fp, r4, #26
 800a162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a164:	ebaa 0303 	sub.w	r3, sl, r3
 800a168:	eba3 0309 	sub.w	r3, r3, r9
 800a16c:	4543      	cmp	r3, r8
 800a16e:	f77f af79 	ble.w	800a064 <_printf_float+0x23c>
 800a172:	2301      	movs	r3, #1
 800a174:	465a      	mov	r2, fp
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	f43f aeae 	beq.w	8009ede <_printf_float+0xb6>
 800a182:	f108 0801 	add.w	r8, r8, #1
 800a186:	e7ec      	b.n	800a162 <_printf_float+0x33a>
 800a188:	4642      	mov	r2, r8
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	d1c2      	bne.n	800a11a <_printf_float+0x2f2>
 800a194:	e6a3      	b.n	8009ede <_printf_float+0xb6>
 800a196:	2301      	movs	r3, #1
 800a198:	4631      	mov	r1, r6
 800a19a:	4628      	mov	r0, r5
 800a19c:	9206      	str	r2, [sp, #24]
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f43f ae9c 	beq.w	8009ede <_printf_float+0xb6>
 800a1a6:	9a06      	ldr	r2, [sp, #24]
 800a1a8:	f10b 0b01 	add.w	fp, fp, #1
 800a1ac:	e7bb      	b.n	800a126 <_printf_float+0x2fe>
 800a1ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b8      	blx	r7
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d1c0      	bne.n	800a13e <_printf_float+0x316>
 800a1bc:	e68f      	b.n	8009ede <_printf_float+0xb6>
 800a1be:	9a06      	ldr	r2, [sp, #24]
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	4442      	add	r2, r8
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d1c3      	bne.n	800a156 <_printf_float+0x32e>
 800a1ce:	e686      	b.n	8009ede <_printf_float+0xb6>
 800a1d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1d4:	f1ba 0f01 	cmp.w	sl, #1
 800a1d8:	dc01      	bgt.n	800a1de <_printf_float+0x3b6>
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d536      	bpl.n	800a24c <_printf_float+0x424>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f43f ae78 	beq.w	8009ede <_printf_float+0xb6>
 800a1ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f43f ae70 	beq.w	8009ede <_printf_float+0xb6>
 800a1fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a20a:	f7f6 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800a20e:	b9c0      	cbnz	r0, 800a242 <_printf_float+0x41a>
 800a210:	4653      	mov	r3, sl
 800a212:	f108 0201 	add.w	r2, r8, #1
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	d10c      	bne.n	800a23a <_printf_float+0x412>
 800a220:	e65d      	b.n	8009ede <_printf_float+0xb6>
 800a222:	2301      	movs	r3, #1
 800a224:	465a      	mov	r2, fp
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f ae56 	beq.w	8009ede <_printf_float+0xb6>
 800a232:	f108 0801 	add.w	r8, r8, #1
 800a236:	45d0      	cmp	r8, sl
 800a238:	dbf3      	blt.n	800a222 <_printf_float+0x3fa>
 800a23a:	464b      	mov	r3, r9
 800a23c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a240:	e6df      	b.n	800a002 <_printf_float+0x1da>
 800a242:	f04f 0800 	mov.w	r8, #0
 800a246:	f104 0b1a 	add.w	fp, r4, #26
 800a24a:	e7f4      	b.n	800a236 <_printf_float+0x40e>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4642      	mov	r2, r8
 800a250:	e7e1      	b.n	800a216 <_printf_float+0x3ee>
 800a252:	2301      	movs	r3, #1
 800a254:	464a      	mov	r2, r9
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	f43f ae3e 	beq.w	8009ede <_printf_float+0xb6>
 800a262:	f108 0801 	add.w	r8, r8, #1
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a26a:	1a5b      	subs	r3, r3, r1
 800a26c:	4543      	cmp	r3, r8
 800a26e:	dcf0      	bgt.n	800a252 <_printf_float+0x42a>
 800a270:	e6fc      	b.n	800a06c <_printf_float+0x244>
 800a272:	f04f 0800 	mov.w	r8, #0
 800a276:	f104 0919 	add.w	r9, r4, #25
 800a27a:	e7f4      	b.n	800a266 <_printf_float+0x43e>

0800a27c <_printf_common>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	4616      	mov	r6, r2
 800a282:	4698      	mov	r8, r3
 800a284:	688a      	ldr	r2, [r1, #8]
 800a286:	690b      	ldr	r3, [r1, #16]
 800a288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a28c:	4293      	cmp	r3, r2
 800a28e:	bfb8      	it	lt
 800a290:	4613      	movlt	r3, r2
 800a292:	6033      	str	r3, [r6, #0]
 800a294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a298:	4607      	mov	r7, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_printf_common+0x26>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	6033      	str	r3, [r6, #0]
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	0699      	lsls	r1, r3, #26
 800a2a6:	bf42      	ittt	mi
 800a2a8:	6833      	ldrmi	r3, [r6, #0]
 800a2aa:	3302      	addmi	r3, #2
 800a2ac:	6033      	strmi	r3, [r6, #0]
 800a2ae:	6825      	ldr	r5, [r4, #0]
 800a2b0:	f015 0506 	ands.w	r5, r5, #6
 800a2b4:	d106      	bne.n	800a2c4 <_printf_common+0x48>
 800a2b6:	f104 0a19 	add.w	sl, r4, #25
 800a2ba:	68e3      	ldr	r3, [r4, #12]
 800a2bc:	6832      	ldr	r2, [r6, #0]
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc26      	bgt.n	800a312 <_printf_common+0x96>
 800a2c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	3b00      	subs	r3, #0
 800a2cc:	bf18      	it	ne
 800a2ce:	2301      	movne	r3, #1
 800a2d0:	0692      	lsls	r2, r2, #26
 800a2d2:	d42b      	bmi.n	800a32c <_printf_common+0xb0>
 800a2d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2d8:	4641      	mov	r1, r8
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c8      	blx	r9
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d01e      	beq.n	800a320 <_printf_common+0xa4>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	6922      	ldr	r2, [r4, #16]
 800a2e6:	f003 0306 	and.w	r3, r3, #6
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	bf02      	ittt	eq
 800a2ee:	68e5      	ldreq	r5, [r4, #12]
 800a2f0:	6833      	ldreq	r3, [r6, #0]
 800a2f2:	1aed      	subeq	r5, r5, r3
 800a2f4:	68a3      	ldr	r3, [r4, #8]
 800a2f6:	bf0c      	ite	eq
 800a2f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2fc:	2500      	movne	r5, #0
 800a2fe:	4293      	cmp	r3, r2
 800a300:	bfc4      	itt	gt
 800a302:	1a9b      	subgt	r3, r3, r2
 800a304:	18ed      	addgt	r5, r5, r3
 800a306:	2600      	movs	r6, #0
 800a308:	341a      	adds	r4, #26
 800a30a:	42b5      	cmp	r5, r6
 800a30c:	d11a      	bne.n	800a344 <_printf_common+0xc8>
 800a30e:	2000      	movs	r0, #0
 800a310:	e008      	b.n	800a324 <_printf_common+0xa8>
 800a312:	2301      	movs	r3, #1
 800a314:	4652      	mov	r2, sl
 800a316:	4641      	mov	r1, r8
 800a318:	4638      	mov	r0, r7
 800a31a:	47c8      	blx	r9
 800a31c:	3001      	adds	r0, #1
 800a31e:	d103      	bne.n	800a328 <_printf_common+0xac>
 800a320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a328:	3501      	adds	r5, #1
 800a32a:	e7c6      	b.n	800a2ba <_printf_common+0x3e>
 800a32c:	18e1      	adds	r1, r4, r3
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	2030      	movs	r0, #48	@ 0x30
 800a332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a336:	4422      	add	r2, r4
 800a338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a33c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a340:	3302      	adds	r3, #2
 800a342:	e7c7      	b.n	800a2d4 <_printf_common+0x58>
 800a344:	2301      	movs	r3, #1
 800a346:	4622      	mov	r2, r4
 800a348:	4641      	mov	r1, r8
 800a34a:	4638      	mov	r0, r7
 800a34c:	47c8      	blx	r9
 800a34e:	3001      	adds	r0, #1
 800a350:	d0e6      	beq.n	800a320 <_printf_common+0xa4>
 800a352:	3601      	adds	r6, #1
 800a354:	e7d9      	b.n	800a30a <_printf_common+0x8e>
	...

0800a358 <_printf_i>:
 800a358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	7e0f      	ldrb	r7, [r1, #24]
 800a35e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a360:	2f78      	cmp	r7, #120	@ 0x78
 800a362:	4691      	mov	r9, r2
 800a364:	4680      	mov	r8, r0
 800a366:	460c      	mov	r4, r1
 800a368:	469a      	mov	sl, r3
 800a36a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a36e:	d807      	bhi.n	800a380 <_printf_i+0x28>
 800a370:	2f62      	cmp	r7, #98	@ 0x62
 800a372:	d80a      	bhi.n	800a38a <_printf_i+0x32>
 800a374:	2f00      	cmp	r7, #0
 800a376:	f000 80d2 	beq.w	800a51e <_printf_i+0x1c6>
 800a37a:	2f58      	cmp	r7, #88	@ 0x58
 800a37c:	f000 80b9 	beq.w	800a4f2 <_printf_i+0x19a>
 800a380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a388:	e03a      	b.n	800a400 <_printf_i+0xa8>
 800a38a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a38e:	2b15      	cmp	r3, #21
 800a390:	d8f6      	bhi.n	800a380 <_printf_i+0x28>
 800a392:	a101      	add	r1, pc, #4	@ (adr r1, 800a398 <_printf_i+0x40>)
 800a394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a398:	0800a3f1 	.word	0x0800a3f1
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a381 	.word	0x0800a381
 800a3a4:	0800a381 	.word	0x0800a381
 800a3a8:	0800a381 	.word	0x0800a381
 800a3ac:	0800a381 	.word	0x0800a381
 800a3b0:	0800a405 	.word	0x0800a405
 800a3b4:	0800a381 	.word	0x0800a381
 800a3b8:	0800a381 	.word	0x0800a381
 800a3bc:	0800a381 	.word	0x0800a381
 800a3c0:	0800a381 	.word	0x0800a381
 800a3c4:	0800a505 	.word	0x0800a505
 800a3c8:	0800a42f 	.word	0x0800a42f
 800a3cc:	0800a4bf 	.word	0x0800a4bf
 800a3d0:	0800a381 	.word	0x0800a381
 800a3d4:	0800a381 	.word	0x0800a381
 800a3d8:	0800a527 	.word	0x0800a527
 800a3dc:	0800a381 	.word	0x0800a381
 800a3e0:	0800a42f 	.word	0x0800a42f
 800a3e4:	0800a381 	.word	0x0800a381
 800a3e8:	0800a381 	.word	0x0800a381
 800a3ec:	0800a4c7 	.word	0x0800a4c7
 800a3f0:	6833      	ldr	r3, [r6, #0]
 800a3f2:	1d1a      	adds	r2, r3, #4
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6032      	str	r2, [r6, #0]
 800a3f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a400:	2301      	movs	r3, #1
 800a402:	e09d      	b.n	800a540 <_printf_i+0x1e8>
 800a404:	6833      	ldr	r3, [r6, #0]
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	1d19      	adds	r1, r3, #4
 800a40a:	6031      	str	r1, [r6, #0]
 800a40c:	0606      	lsls	r6, r0, #24
 800a40e:	d501      	bpl.n	800a414 <_printf_i+0xbc>
 800a410:	681d      	ldr	r5, [r3, #0]
 800a412:	e003      	b.n	800a41c <_printf_i+0xc4>
 800a414:	0645      	lsls	r5, r0, #25
 800a416:	d5fb      	bpl.n	800a410 <_printf_i+0xb8>
 800a418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	da03      	bge.n	800a428 <_printf_i+0xd0>
 800a420:	232d      	movs	r3, #45	@ 0x2d
 800a422:	426d      	negs	r5, r5
 800a424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a428:	4859      	ldr	r0, [pc, #356]	@ (800a590 <_printf_i+0x238>)
 800a42a:	230a      	movs	r3, #10
 800a42c:	e011      	b.n	800a452 <_printf_i+0xfa>
 800a42e:	6821      	ldr	r1, [r4, #0]
 800a430:	6833      	ldr	r3, [r6, #0]
 800a432:	0608      	lsls	r0, r1, #24
 800a434:	f853 5b04 	ldr.w	r5, [r3], #4
 800a438:	d402      	bmi.n	800a440 <_printf_i+0xe8>
 800a43a:	0649      	lsls	r1, r1, #25
 800a43c:	bf48      	it	mi
 800a43e:	b2ad      	uxthmi	r5, r5
 800a440:	2f6f      	cmp	r7, #111	@ 0x6f
 800a442:	4853      	ldr	r0, [pc, #332]	@ (800a590 <_printf_i+0x238>)
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	bf14      	ite	ne
 800a448:	230a      	movne	r3, #10
 800a44a:	2308      	moveq	r3, #8
 800a44c:	2100      	movs	r1, #0
 800a44e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a452:	6866      	ldr	r6, [r4, #4]
 800a454:	60a6      	str	r6, [r4, #8]
 800a456:	2e00      	cmp	r6, #0
 800a458:	bfa2      	ittt	ge
 800a45a:	6821      	ldrge	r1, [r4, #0]
 800a45c:	f021 0104 	bicge.w	r1, r1, #4
 800a460:	6021      	strge	r1, [r4, #0]
 800a462:	b90d      	cbnz	r5, 800a468 <_printf_i+0x110>
 800a464:	2e00      	cmp	r6, #0
 800a466:	d04b      	beq.n	800a500 <_printf_i+0x1a8>
 800a468:	4616      	mov	r6, r2
 800a46a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a46e:	fb03 5711 	mls	r7, r3, r1, r5
 800a472:	5dc7      	ldrb	r7, [r0, r7]
 800a474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a478:	462f      	mov	r7, r5
 800a47a:	42bb      	cmp	r3, r7
 800a47c:	460d      	mov	r5, r1
 800a47e:	d9f4      	bls.n	800a46a <_printf_i+0x112>
 800a480:	2b08      	cmp	r3, #8
 800a482:	d10b      	bne.n	800a49c <_printf_i+0x144>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	07df      	lsls	r7, r3, #31
 800a488:	d508      	bpl.n	800a49c <_printf_i+0x144>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	4299      	cmp	r1, r3
 800a490:	bfde      	ittt	le
 800a492:	2330      	movle	r3, #48	@ 0x30
 800a494:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a498:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a49c:	1b92      	subs	r2, r2, r6
 800a49e:	6122      	str	r2, [r4, #16]
 800a4a0:	f8cd a000 	str.w	sl, [sp]
 800a4a4:	464b      	mov	r3, r9
 800a4a6:	aa03      	add	r2, sp, #12
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f7ff fee6 	bl	800a27c <_printf_common>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d14a      	bne.n	800a54a <_printf_i+0x1f2>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4b8:	b004      	add	sp, #16
 800a4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	f043 0320 	orr.w	r3, r3, #32
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	4833      	ldr	r0, [pc, #204]	@ (800a594 <_printf_i+0x23c>)
 800a4c8:	2778      	movs	r7, #120	@ 0x78
 800a4ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	6831      	ldr	r1, [r6, #0]
 800a4d2:	061f      	lsls	r7, r3, #24
 800a4d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4d8:	d402      	bmi.n	800a4e0 <_printf_i+0x188>
 800a4da:	065f      	lsls	r7, r3, #25
 800a4dc:	bf48      	it	mi
 800a4de:	b2ad      	uxthmi	r5, r5
 800a4e0:	6031      	str	r1, [r6, #0]
 800a4e2:	07d9      	lsls	r1, r3, #31
 800a4e4:	bf44      	itt	mi
 800a4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ea:	6023      	strmi	r3, [r4, #0]
 800a4ec:	b11d      	cbz	r5, 800a4f6 <_printf_i+0x19e>
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	e7ac      	b.n	800a44c <_printf_i+0xf4>
 800a4f2:	4827      	ldr	r0, [pc, #156]	@ (800a590 <_printf_i+0x238>)
 800a4f4:	e7e9      	b.n	800a4ca <_printf_i+0x172>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	f023 0320 	bic.w	r3, r3, #32
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	e7f6      	b.n	800a4ee <_printf_i+0x196>
 800a500:	4616      	mov	r6, r2
 800a502:	e7bd      	b.n	800a480 <_printf_i+0x128>
 800a504:	6833      	ldr	r3, [r6, #0]
 800a506:	6825      	ldr	r5, [r4, #0]
 800a508:	6961      	ldr	r1, [r4, #20]
 800a50a:	1d18      	adds	r0, r3, #4
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	062e      	lsls	r6, r5, #24
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	d501      	bpl.n	800a518 <_printf_i+0x1c0>
 800a514:	6019      	str	r1, [r3, #0]
 800a516:	e002      	b.n	800a51e <_printf_i+0x1c6>
 800a518:	0668      	lsls	r0, r5, #25
 800a51a:	d5fb      	bpl.n	800a514 <_printf_i+0x1bc>
 800a51c:	8019      	strh	r1, [r3, #0]
 800a51e:	2300      	movs	r3, #0
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	4616      	mov	r6, r2
 800a524:	e7bc      	b.n	800a4a0 <_printf_i+0x148>
 800a526:	6833      	ldr	r3, [r6, #0]
 800a528:	1d1a      	adds	r2, r3, #4
 800a52a:	6032      	str	r2, [r6, #0]
 800a52c:	681e      	ldr	r6, [r3, #0]
 800a52e:	6862      	ldr	r2, [r4, #4]
 800a530:	2100      	movs	r1, #0
 800a532:	4630      	mov	r0, r6
 800a534:	f7f5 fe54 	bl	80001e0 <memchr>
 800a538:	b108      	cbz	r0, 800a53e <_printf_i+0x1e6>
 800a53a:	1b80      	subs	r0, r0, r6
 800a53c:	6060      	str	r0, [r4, #4]
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	2300      	movs	r3, #0
 800a544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a548:	e7aa      	b.n	800a4a0 <_printf_i+0x148>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	4632      	mov	r2, r6
 800a54e:	4649      	mov	r1, r9
 800a550:	4640      	mov	r0, r8
 800a552:	47d0      	blx	sl
 800a554:	3001      	adds	r0, #1
 800a556:	d0ad      	beq.n	800a4b4 <_printf_i+0x15c>
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	079b      	lsls	r3, r3, #30
 800a55c:	d413      	bmi.n	800a586 <_printf_i+0x22e>
 800a55e:	68e0      	ldr	r0, [r4, #12]
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	4298      	cmp	r0, r3
 800a564:	bfb8      	it	lt
 800a566:	4618      	movlt	r0, r3
 800a568:	e7a6      	b.n	800a4b8 <_printf_i+0x160>
 800a56a:	2301      	movs	r3, #1
 800a56c:	4632      	mov	r2, r6
 800a56e:	4649      	mov	r1, r9
 800a570:	4640      	mov	r0, r8
 800a572:	47d0      	blx	sl
 800a574:	3001      	adds	r0, #1
 800a576:	d09d      	beq.n	800a4b4 <_printf_i+0x15c>
 800a578:	3501      	adds	r5, #1
 800a57a:	68e3      	ldr	r3, [r4, #12]
 800a57c:	9903      	ldr	r1, [sp, #12]
 800a57e:	1a5b      	subs	r3, r3, r1
 800a580:	42ab      	cmp	r3, r5
 800a582:	dcf2      	bgt.n	800a56a <_printf_i+0x212>
 800a584:	e7eb      	b.n	800a55e <_printf_i+0x206>
 800a586:	2500      	movs	r5, #0
 800a588:	f104 0619 	add.w	r6, r4, #25
 800a58c:	e7f5      	b.n	800a57a <_printf_i+0x222>
 800a58e:	bf00      	nop
 800a590:	0800e5d6 	.word	0x0800e5d6
 800a594:	0800e5e7 	.word	0x0800e5e7

0800a598 <_scanf_float>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	b087      	sub	sp, #28
 800a59e:	4617      	mov	r7, r2
 800a5a0:	9303      	str	r3, [sp, #12]
 800a5a2:	688b      	ldr	r3, [r1, #8]
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a5aa:	bf81      	itttt	hi
 800a5ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a5b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a5b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a5b8:	608b      	strhi	r3, [r1, #8]
 800a5ba:	680b      	ldr	r3, [r1, #0]
 800a5bc:	460a      	mov	r2, r1
 800a5be:	f04f 0500 	mov.w	r5, #0
 800a5c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a5c6:	f842 3b1c 	str.w	r3, [r2], #28
 800a5ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5ce:	4680      	mov	r8, r0
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	bf98      	it	ls
 800a5d4:	f04f 0b00 	movls.w	fp, #0
 800a5d8:	9201      	str	r2, [sp, #4]
 800a5da:	4616      	mov	r6, r2
 800a5dc:	46aa      	mov	sl, r5
 800a5de:	46a9      	mov	r9, r5
 800a5e0:	9502      	str	r5, [sp, #8]
 800a5e2:	68a2      	ldr	r2, [r4, #8]
 800a5e4:	b152      	cbz	r2, 800a5fc <_scanf_float+0x64>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800a5ec:	d864      	bhi.n	800a6b8 <_scanf_float+0x120>
 800a5ee:	2b40      	cmp	r3, #64	@ 0x40
 800a5f0:	d83c      	bhi.n	800a66c <_scanf_float+0xd4>
 800a5f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a5f6:	b2c8      	uxtb	r0, r1
 800a5f8:	280e      	cmp	r0, #14
 800a5fa:	d93a      	bls.n	800a672 <_scanf_float+0xda>
 800a5fc:	f1b9 0f00 	cmp.w	r9, #0
 800a600:	d003      	beq.n	800a60a <_scanf_float+0x72>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a60e:	f1ba 0f01 	cmp.w	sl, #1
 800a612:	f200 8117 	bhi.w	800a844 <_scanf_float+0x2ac>
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	429e      	cmp	r6, r3
 800a61a:	f200 8108 	bhi.w	800a82e <_scanf_float+0x296>
 800a61e:	2001      	movs	r0, #1
 800a620:	b007      	add	sp, #28
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a62a:	2a0d      	cmp	r2, #13
 800a62c:	d8e6      	bhi.n	800a5fc <_scanf_float+0x64>
 800a62e:	a101      	add	r1, pc, #4	@ (adr r1, 800a634 <_scanf_float+0x9c>)
 800a630:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a634:	0800a77b 	.word	0x0800a77b
 800a638:	0800a5fd 	.word	0x0800a5fd
 800a63c:	0800a5fd 	.word	0x0800a5fd
 800a640:	0800a5fd 	.word	0x0800a5fd
 800a644:	0800a7db 	.word	0x0800a7db
 800a648:	0800a7b3 	.word	0x0800a7b3
 800a64c:	0800a5fd 	.word	0x0800a5fd
 800a650:	0800a5fd 	.word	0x0800a5fd
 800a654:	0800a789 	.word	0x0800a789
 800a658:	0800a5fd 	.word	0x0800a5fd
 800a65c:	0800a5fd 	.word	0x0800a5fd
 800a660:	0800a5fd 	.word	0x0800a5fd
 800a664:	0800a5fd 	.word	0x0800a5fd
 800a668:	0800a741 	.word	0x0800a741
 800a66c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a670:	e7db      	b.n	800a62a <_scanf_float+0x92>
 800a672:	290e      	cmp	r1, #14
 800a674:	d8c2      	bhi.n	800a5fc <_scanf_float+0x64>
 800a676:	a001      	add	r0, pc, #4	@ (adr r0, 800a67c <_scanf_float+0xe4>)
 800a678:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a67c:	0800a731 	.word	0x0800a731
 800a680:	0800a5fd 	.word	0x0800a5fd
 800a684:	0800a731 	.word	0x0800a731
 800a688:	0800a7c7 	.word	0x0800a7c7
 800a68c:	0800a5fd 	.word	0x0800a5fd
 800a690:	0800a6d9 	.word	0x0800a6d9
 800a694:	0800a717 	.word	0x0800a717
 800a698:	0800a717 	.word	0x0800a717
 800a69c:	0800a717 	.word	0x0800a717
 800a6a0:	0800a717 	.word	0x0800a717
 800a6a4:	0800a717 	.word	0x0800a717
 800a6a8:	0800a717 	.word	0x0800a717
 800a6ac:	0800a717 	.word	0x0800a717
 800a6b0:	0800a717 	.word	0x0800a717
 800a6b4:	0800a717 	.word	0x0800a717
 800a6b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a6ba:	d809      	bhi.n	800a6d0 <_scanf_float+0x138>
 800a6bc:	2b60      	cmp	r3, #96	@ 0x60
 800a6be:	d8b2      	bhi.n	800a626 <_scanf_float+0x8e>
 800a6c0:	2b54      	cmp	r3, #84	@ 0x54
 800a6c2:	d07b      	beq.n	800a7bc <_scanf_float+0x224>
 800a6c4:	2b59      	cmp	r3, #89	@ 0x59
 800a6c6:	d199      	bne.n	800a5fc <_scanf_float+0x64>
 800a6c8:	2d07      	cmp	r5, #7
 800a6ca:	d197      	bne.n	800a5fc <_scanf_float+0x64>
 800a6cc:	2508      	movs	r5, #8
 800a6ce:	e02c      	b.n	800a72a <_scanf_float+0x192>
 800a6d0:	2b74      	cmp	r3, #116	@ 0x74
 800a6d2:	d073      	beq.n	800a7bc <_scanf_float+0x224>
 800a6d4:	2b79      	cmp	r3, #121	@ 0x79
 800a6d6:	e7f6      	b.n	800a6c6 <_scanf_float+0x12e>
 800a6d8:	6821      	ldr	r1, [r4, #0]
 800a6da:	05c8      	lsls	r0, r1, #23
 800a6dc:	d51b      	bpl.n	800a716 <_scanf_float+0x17e>
 800a6de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a6e2:	6021      	str	r1, [r4, #0]
 800a6e4:	f109 0901 	add.w	r9, r9, #1
 800a6e8:	f1bb 0f00 	cmp.w	fp, #0
 800a6ec:	d003      	beq.n	800a6f6 <_scanf_float+0x15e>
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a6f4:	60a2      	str	r2, [r4, #8]
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	3301      	adds	r3, #1
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3b01      	subs	r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	607b      	str	r3, [r7, #4]
 800a70a:	f340 8087 	ble.w	800a81c <_scanf_float+0x284>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	3301      	adds	r3, #1
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	e765      	b.n	800a5e2 <_scanf_float+0x4a>
 800a716:	eb1a 0105 	adds.w	r1, sl, r5
 800a71a:	f47f af6f 	bne.w	800a5fc <_scanf_float+0x64>
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	460d      	mov	r5, r1
 800a728:	468a      	mov	sl, r1
 800a72a:	f806 3b01 	strb.w	r3, [r6], #1
 800a72e:	e7e2      	b.n	800a6f6 <_scanf_float+0x15e>
 800a730:	6822      	ldr	r2, [r4, #0]
 800a732:	0610      	lsls	r0, r2, #24
 800a734:	f57f af62 	bpl.w	800a5fc <_scanf_float+0x64>
 800a738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a73c:	6022      	str	r2, [r4, #0]
 800a73e:	e7f4      	b.n	800a72a <_scanf_float+0x192>
 800a740:	f1ba 0f00 	cmp.w	sl, #0
 800a744:	d10e      	bne.n	800a764 <_scanf_float+0x1cc>
 800a746:	f1b9 0f00 	cmp.w	r9, #0
 800a74a:	d10e      	bne.n	800a76a <_scanf_float+0x1d2>
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a752:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a756:	d108      	bne.n	800a76a <_scanf_float+0x1d2>
 800a758:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a75c:	6022      	str	r2, [r4, #0]
 800a75e:	f04f 0a01 	mov.w	sl, #1
 800a762:	e7e2      	b.n	800a72a <_scanf_float+0x192>
 800a764:	f1ba 0f02 	cmp.w	sl, #2
 800a768:	d055      	beq.n	800a816 <_scanf_float+0x27e>
 800a76a:	2d01      	cmp	r5, #1
 800a76c:	d002      	beq.n	800a774 <_scanf_float+0x1dc>
 800a76e:	2d04      	cmp	r5, #4
 800a770:	f47f af44 	bne.w	800a5fc <_scanf_float+0x64>
 800a774:	3501      	adds	r5, #1
 800a776:	b2ed      	uxtb	r5, r5
 800a778:	e7d7      	b.n	800a72a <_scanf_float+0x192>
 800a77a:	f1ba 0f01 	cmp.w	sl, #1
 800a77e:	f47f af3d 	bne.w	800a5fc <_scanf_float+0x64>
 800a782:	f04f 0a02 	mov.w	sl, #2
 800a786:	e7d0      	b.n	800a72a <_scanf_float+0x192>
 800a788:	b97d      	cbnz	r5, 800a7aa <_scanf_float+0x212>
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	f47f af38 	bne.w	800a602 <_scanf_float+0x6a>
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a798:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a79c:	f040 8108 	bne.w	800a9b0 <_scanf_float+0x418>
 800a7a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7a4:	6022      	str	r2, [r4, #0]
 800a7a6:	2501      	movs	r5, #1
 800a7a8:	e7bf      	b.n	800a72a <_scanf_float+0x192>
 800a7aa:	2d03      	cmp	r5, #3
 800a7ac:	d0e2      	beq.n	800a774 <_scanf_float+0x1dc>
 800a7ae:	2d05      	cmp	r5, #5
 800a7b0:	e7de      	b.n	800a770 <_scanf_float+0x1d8>
 800a7b2:	2d02      	cmp	r5, #2
 800a7b4:	f47f af22 	bne.w	800a5fc <_scanf_float+0x64>
 800a7b8:	2503      	movs	r5, #3
 800a7ba:	e7b6      	b.n	800a72a <_scanf_float+0x192>
 800a7bc:	2d06      	cmp	r5, #6
 800a7be:	f47f af1d 	bne.w	800a5fc <_scanf_float+0x64>
 800a7c2:	2507      	movs	r5, #7
 800a7c4:	e7b1      	b.n	800a72a <_scanf_float+0x192>
 800a7c6:	6822      	ldr	r2, [r4, #0]
 800a7c8:	0591      	lsls	r1, r2, #22
 800a7ca:	f57f af17 	bpl.w	800a5fc <_scanf_float+0x64>
 800a7ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a7d2:	6022      	str	r2, [r4, #0]
 800a7d4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7d8:	e7a7      	b.n	800a72a <_scanf_float+0x192>
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a7e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a7e4:	d006      	beq.n	800a7f4 <_scanf_float+0x25c>
 800a7e6:	0550      	lsls	r0, r2, #21
 800a7e8:	f57f af08 	bpl.w	800a5fc <_scanf_float+0x64>
 800a7ec:	f1b9 0f00 	cmp.w	r9, #0
 800a7f0:	f000 80de 	beq.w	800a9b0 <_scanf_float+0x418>
 800a7f4:	0591      	lsls	r1, r2, #22
 800a7f6:	bf58      	it	pl
 800a7f8:	9902      	ldrpl	r1, [sp, #8]
 800a7fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7fe:	bf58      	it	pl
 800a800:	eba9 0101 	subpl.w	r1, r9, r1
 800a804:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a808:	bf58      	it	pl
 800a80a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a80e:	6022      	str	r2, [r4, #0]
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	e789      	b.n	800a72a <_scanf_float+0x192>
 800a816:	f04f 0a03 	mov.w	sl, #3
 800a81a:	e786      	b.n	800a72a <_scanf_float+0x192>
 800a81c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a820:	4639      	mov	r1, r7
 800a822:	4640      	mov	r0, r8
 800a824:	4798      	blx	r3
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f aedb 	beq.w	800a5e2 <_scanf_float+0x4a>
 800a82c:	e6e6      	b.n	800a5fc <_scanf_float+0x64>
 800a82e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a836:	463a      	mov	r2, r7
 800a838:	4640      	mov	r0, r8
 800a83a:	4798      	blx	r3
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	3b01      	subs	r3, #1
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	e6e8      	b.n	800a616 <_scanf_float+0x7e>
 800a844:	1e6b      	subs	r3, r5, #1
 800a846:	2b06      	cmp	r3, #6
 800a848:	d824      	bhi.n	800a894 <_scanf_float+0x2fc>
 800a84a:	2d02      	cmp	r5, #2
 800a84c:	d836      	bhi.n	800a8bc <_scanf_float+0x324>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	429e      	cmp	r6, r3
 800a852:	f67f aee4 	bls.w	800a61e <_scanf_float+0x86>
 800a856:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a85a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a85e:	463a      	mov	r2, r7
 800a860:	4640      	mov	r0, r8
 800a862:	4798      	blx	r3
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	3b01      	subs	r3, #1
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	e7f0      	b.n	800a84e <_scanf_float+0x2b6>
 800a86c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a870:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a874:	463a      	mov	r2, r7
 800a876:	4640      	mov	r0, r8
 800a878:	4798      	blx	r3
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	6123      	str	r3, [r4, #16]
 800a880:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a884:	fa5f fa8a 	uxtb.w	sl, sl
 800a888:	f1ba 0f02 	cmp.w	sl, #2
 800a88c:	d1ee      	bne.n	800a86c <_scanf_float+0x2d4>
 800a88e:	3d03      	subs	r5, #3
 800a890:	b2ed      	uxtb	r5, r5
 800a892:	1b76      	subs	r6, r6, r5
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	05da      	lsls	r2, r3, #23
 800a898:	d530      	bpl.n	800a8fc <_scanf_float+0x364>
 800a89a:	055b      	lsls	r3, r3, #21
 800a89c:	d511      	bpl.n	800a8c2 <_scanf_float+0x32a>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	f67f aebc 	bls.w	800a61e <_scanf_float+0x86>
 800a8a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4798      	blx	r3
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	e7f0      	b.n	800a89e <_scanf_float+0x306>
 800a8bc:	46aa      	mov	sl, r5
 800a8be:	46b3      	mov	fp, r6
 800a8c0:	e7de      	b.n	800a880 <_scanf_float+0x2e8>
 800a8c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	2965      	cmp	r1, #101	@ 0x65
 800a8ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a8ce:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	d00c      	beq.n	800a8f0 <_scanf_float+0x358>
 800a8d6:	2945      	cmp	r1, #69	@ 0x45
 800a8d8:	d00a      	beq.n	800a8f0 <_scanf_float+0x358>
 800a8da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8de:	463a      	mov	r2, r7
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	4798      	blx	r3
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	1eb5      	subs	r5, r6, #2
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8f4:	463a      	mov	r2, r7
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4798      	blx	r3
 800a8fa:	462e      	mov	r6, r5
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	f012 0210 	ands.w	r2, r2, #16
 800a902:	d001      	beq.n	800a908 <_scanf_float+0x370>
 800a904:	2000      	movs	r0, #0
 800a906:	e68b      	b.n	800a620 <_scanf_float+0x88>
 800a908:	7032      	strb	r2, [r6, #0]
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a914:	d11c      	bne.n	800a950 <_scanf_float+0x3b8>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	454b      	cmp	r3, r9
 800a91a:	eba3 0209 	sub.w	r2, r3, r9
 800a91e:	d123      	bne.n	800a968 <_scanf_float+0x3d0>
 800a920:	9901      	ldr	r1, [sp, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	4640      	mov	r0, r8
 800a926:	f002 fc5b 	bl	800d1e0 <_strtod_r>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	6821      	ldr	r1, [r4, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f011 0f02 	tst.w	r1, #2
 800a934:	ec57 6b10 	vmov	r6, r7, d0
 800a938:	f103 0204 	add.w	r2, r3, #4
 800a93c:	d01f      	beq.n	800a97e <_scanf_float+0x3e6>
 800a93e:	9903      	ldr	r1, [sp, #12]
 800a940:	600a      	str	r2, [r1, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	e9c3 6700 	strd	r6, r7, [r3]
 800a948:	68e3      	ldr	r3, [r4, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	60e3      	str	r3, [r4, #12]
 800a94e:	e7d9      	b.n	800a904 <_scanf_float+0x36c>
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0e4      	beq.n	800a920 <_scanf_float+0x388>
 800a956:	9905      	ldr	r1, [sp, #20]
 800a958:	230a      	movs	r3, #10
 800a95a:	3101      	adds	r1, #1
 800a95c:	4640      	mov	r0, r8
 800a95e:	f002 fcbf 	bl	800d2e0 <_strtol_r>
 800a962:	9b04      	ldr	r3, [sp, #16]
 800a964:	9e05      	ldr	r6, [sp, #20]
 800a966:	1ac2      	subs	r2, r0, r3
 800a968:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a96c:	429e      	cmp	r6, r3
 800a96e:	bf28      	it	cs
 800a970:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a974:	4910      	ldr	r1, [pc, #64]	@ (800a9b8 <_scanf_float+0x420>)
 800a976:	4630      	mov	r0, r6
 800a978:	f000 f8e4 	bl	800ab44 <siprintf>
 800a97c:	e7d0      	b.n	800a920 <_scanf_float+0x388>
 800a97e:	f011 0f04 	tst.w	r1, #4
 800a982:	9903      	ldr	r1, [sp, #12]
 800a984:	600a      	str	r2, [r1, #0]
 800a986:	d1dc      	bne.n	800a942 <_scanf_float+0x3aa>
 800a988:	681d      	ldr	r5, [r3, #0]
 800a98a:	4632      	mov	r2, r6
 800a98c:	463b      	mov	r3, r7
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f6 f8d3 	bl	8000b3c <__aeabi_dcmpun>
 800a996:	b128      	cbz	r0, 800a9a4 <_scanf_float+0x40c>
 800a998:	4808      	ldr	r0, [pc, #32]	@ (800a9bc <_scanf_float+0x424>)
 800a99a:	f000 fa1b 	bl	800add4 <nanf>
 800a99e:	ed85 0a00 	vstr	s0, [r5]
 800a9a2:	e7d1      	b.n	800a948 <_scanf_float+0x3b0>
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f6 f926 	bl	8000bf8 <__aeabi_d2f>
 800a9ac:	6028      	str	r0, [r5, #0]
 800a9ae:	e7cb      	b.n	800a948 <_scanf_float+0x3b0>
 800a9b0:	f04f 0900 	mov.w	r9, #0
 800a9b4:	e629      	b.n	800a60a <_scanf_float+0x72>
 800a9b6:	bf00      	nop
 800a9b8:	0800e5f8 	.word	0x0800e5f8
 800a9bc:	0800e98d 	.word	0x0800e98d

0800a9c0 <std>:
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ce:	6083      	str	r3, [r0, #8]
 800a9d0:	8181      	strh	r1, [r0, #12]
 800a9d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9d4:	81c2      	strh	r2, [r0, #14]
 800a9d6:	6183      	str	r3, [r0, #24]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	2208      	movs	r2, #8
 800a9dc:	305c      	adds	r0, #92	@ 0x5c
 800a9de:	f000 f914 	bl	800ac0a <memset>
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <std+0x58>)
 800a9e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa1c <std+0x5c>)
 800a9e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800aa20 <std+0x60>)
 800a9ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <std+0x64>)
 800a9f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <std+0x68>)
 800a9f4:	6224      	str	r4, [r4, #32]
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	d006      	beq.n	800aa08 <std+0x48>
 800a9fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9fe:	4294      	cmp	r4, r2
 800aa00:	d002      	beq.n	800aa08 <std+0x48>
 800aa02:	33d0      	adds	r3, #208	@ 0xd0
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d105      	bne.n	800aa14 <std+0x54>
 800aa08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	f000 b9ce 	b.w	800adb0 <__retarget_lock_init_recursive>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	bf00      	nop
 800aa18:	0800ab85 	.word	0x0800ab85
 800aa1c:	0800aba7 	.word	0x0800aba7
 800aa20:	0800abdf 	.word	0x0800abdf
 800aa24:	0800ac03 	.word	0x0800ac03
 800aa28:	20004e7c 	.word	0x20004e7c

0800aa2c <stdio_exit_handler>:
 800aa2c:	4a02      	ldr	r2, [pc, #8]	@ (800aa38 <stdio_exit_handler+0xc>)
 800aa2e:	4903      	ldr	r1, [pc, #12]	@ (800aa3c <stdio_exit_handler+0x10>)
 800aa30:	4803      	ldr	r0, [pc, #12]	@ (800aa40 <stdio_exit_handler+0x14>)
 800aa32:	f000 b869 	b.w	800ab08 <_fwalk_sglue>
 800aa36:	bf00      	nop
 800aa38:	20000014 	.word	0x20000014
 800aa3c:	0800d69d 	.word	0x0800d69d
 800aa40:	20000024 	.word	0x20000024

0800aa44 <cleanup_stdio>:
 800aa44:	6841      	ldr	r1, [r0, #4]
 800aa46:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <cleanup_stdio+0x34>)
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	d001      	beq.n	800aa54 <cleanup_stdio+0x10>
 800aa50:	f002 fe24 	bl	800d69c <_fflush_r>
 800aa54:	68a1      	ldr	r1, [r4, #8]
 800aa56:	4b09      	ldr	r3, [pc, #36]	@ (800aa7c <cleanup_stdio+0x38>)
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d002      	beq.n	800aa62 <cleanup_stdio+0x1e>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f002 fe1d 	bl	800d69c <_fflush_r>
 800aa62:	68e1      	ldr	r1, [r4, #12]
 800aa64:	4b06      	ldr	r3, [pc, #24]	@ (800aa80 <cleanup_stdio+0x3c>)
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d004      	beq.n	800aa74 <cleanup_stdio+0x30>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa70:	f002 be14 	b.w	800d69c <_fflush_r>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	bf00      	nop
 800aa78:	20004e7c 	.word	0x20004e7c
 800aa7c:	20004ee4 	.word	0x20004ee4
 800aa80:	20004f4c 	.word	0x20004f4c

0800aa84 <global_stdio_init.part.0>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	4b0b      	ldr	r3, [pc, #44]	@ (800aab4 <global_stdio_init.part.0+0x30>)
 800aa88:	4c0b      	ldr	r4, [pc, #44]	@ (800aab8 <global_stdio_init.part.0+0x34>)
 800aa8a:	4a0c      	ldr	r2, [pc, #48]	@ (800aabc <global_stdio_init.part.0+0x38>)
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	2200      	movs	r2, #0
 800aa92:	2104      	movs	r1, #4
 800aa94:	f7ff ff94 	bl	800a9c0 <std>
 800aa98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	2109      	movs	r1, #9
 800aaa0:	f7ff ff8e 	bl	800a9c0 <std>
 800aaa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaae:	2112      	movs	r1, #18
 800aab0:	f7ff bf86 	b.w	800a9c0 <std>
 800aab4:	20004fb4 	.word	0x20004fb4
 800aab8:	20004e7c 	.word	0x20004e7c
 800aabc:	0800aa2d 	.word	0x0800aa2d

0800aac0 <__sfp_lock_acquire>:
 800aac0:	4801      	ldr	r0, [pc, #4]	@ (800aac8 <__sfp_lock_acquire+0x8>)
 800aac2:	f000 b976 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800aac6:	bf00      	nop
 800aac8:	20004fbd 	.word	0x20004fbd

0800aacc <__sfp_lock_release>:
 800aacc:	4801      	ldr	r0, [pc, #4]	@ (800aad4 <__sfp_lock_release+0x8>)
 800aace:	f000 b971 	b.w	800adb4 <__retarget_lock_release_recursive>
 800aad2:	bf00      	nop
 800aad4:	20004fbd 	.word	0x20004fbd

0800aad8 <__sinit>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	4604      	mov	r4, r0
 800aadc:	f7ff fff0 	bl	800aac0 <__sfp_lock_acquire>
 800aae0:	6a23      	ldr	r3, [r4, #32]
 800aae2:	b11b      	cbz	r3, 800aaec <__sinit+0x14>
 800aae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae8:	f7ff bff0 	b.w	800aacc <__sfp_lock_release>
 800aaec:	4b04      	ldr	r3, [pc, #16]	@ (800ab00 <__sinit+0x28>)
 800aaee:	6223      	str	r3, [r4, #32]
 800aaf0:	4b04      	ldr	r3, [pc, #16]	@ (800ab04 <__sinit+0x2c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f5      	bne.n	800aae4 <__sinit+0xc>
 800aaf8:	f7ff ffc4 	bl	800aa84 <global_stdio_init.part.0>
 800aafc:	e7f2      	b.n	800aae4 <__sinit+0xc>
 800aafe:	bf00      	nop
 800ab00:	0800aa45 	.word	0x0800aa45
 800ab04:	20004fb4 	.word	0x20004fb4

0800ab08 <_fwalk_sglue>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4688      	mov	r8, r1
 800ab10:	4614      	mov	r4, r2
 800ab12:	2600      	movs	r6, #0
 800ab14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab18:	f1b9 0901 	subs.w	r9, r9, #1
 800ab1c:	d505      	bpl.n	800ab2a <_fwalk_sglue+0x22>
 800ab1e:	6824      	ldr	r4, [r4, #0]
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	d1f7      	bne.n	800ab14 <_fwalk_sglue+0xc>
 800ab24:	4630      	mov	r0, r6
 800ab26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d907      	bls.n	800ab40 <_fwalk_sglue+0x38>
 800ab30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab34:	3301      	adds	r3, #1
 800ab36:	d003      	beq.n	800ab40 <_fwalk_sglue+0x38>
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	47c0      	blx	r8
 800ab3e:	4306      	orrs	r6, r0
 800ab40:	3568      	adds	r5, #104	@ 0x68
 800ab42:	e7e9      	b.n	800ab18 <_fwalk_sglue+0x10>

0800ab44 <siprintf>:
 800ab44:	b40e      	push	{r1, r2, r3}
 800ab46:	b500      	push	{lr}
 800ab48:	b09c      	sub	sp, #112	@ 0x70
 800ab4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab4c:	9002      	str	r0, [sp, #8]
 800ab4e:	9006      	str	r0, [sp, #24]
 800ab50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab54:	4809      	ldr	r0, [pc, #36]	@ (800ab7c <siprintf+0x38>)
 800ab56:	9107      	str	r1, [sp, #28]
 800ab58:	9104      	str	r1, [sp, #16]
 800ab5a:	4909      	ldr	r1, [pc, #36]	@ (800ab80 <siprintf+0x3c>)
 800ab5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab60:	9105      	str	r1, [sp, #20]
 800ab62:	6800      	ldr	r0, [r0, #0]
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	a902      	add	r1, sp, #8
 800ab68:	f002 fc18 	bl	800d39c <_svfiprintf_r>
 800ab6c:	9b02      	ldr	r3, [sp, #8]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	b01c      	add	sp, #112	@ 0x70
 800ab74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab78:	b003      	add	sp, #12
 800ab7a:	4770      	bx	lr
 800ab7c:	20000020 	.word	0x20000020
 800ab80:	ffff0208 	.word	0xffff0208

0800ab84 <__sread>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	460c      	mov	r4, r1
 800ab88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8c:	f000 f8c2 	bl	800ad14 <_read_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	bfab      	itete	ge
 800ab94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab96:	89a3      	ldrhlt	r3, [r4, #12]
 800ab98:	181b      	addge	r3, r3, r0
 800ab9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab9e:	bfac      	ite	ge
 800aba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aba2:	81a3      	strhlt	r3, [r4, #12]
 800aba4:	bd10      	pop	{r4, pc}

0800aba6 <__swrite>:
 800aba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abaa:	461f      	mov	r7, r3
 800abac:	898b      	ldrh	r3, [r1, #12]
 800abae:	05db      	lsls	r3, r3, #23
 800abb0:	4605      	mov	r5, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	4616      	mov	r6, r2
 800abb6:	d505      	bpl.n	800abc4 <__swrite+0x1e>
 800abb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abbc:	2302      	movs	r3, #2
 800abbe:	2200      	movs	r2, #0
 800abc0:	f000 f896 	bl	800acf0 <_lseek_r>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	4632      	mov	r2, r6
 800abd2:	463b      	mov	r3, r7
 800abd4:	4628      	mov	r0, r5
 800abd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abda:	f000 b8ad 	b.w	800ad38 <_write_r>

0800abde <__sseek>:
 800abde:	b510      	push	{r4, lr}
 800abe0:	460c      	mov	r4, r1
 800abe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe6:	f000 f883 	bl	800acf0 <_lseek_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	bf15      	itete	ne
 800abf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abfa:	81a3      	strheq	r3, [r4, #12]
 800abfc:	bf18      	it	ne
 800abfe:	81a3      	strhne	r3, [r4, #12]
 800ac00:	bd10      	pop	{r4, pc}

0800ac02 <__sclose>:
 800ac02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac06:	f000 b80d 	b.w	800ac24 <_close_r>

0800ac0a <memset>:
 800ac0a:	4402      	add	r2, r0
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d100      	bne.n	800ac14 <memset+0xa>
 800ac12:	4770      	bx	lr
 800ac14:	f803 1b01 	strb.w	r1, [r3], #1
 800ac18:	e7f9      	b.n	800ac0e <memset+0x4>
	...

0800ac1c <_localeconv_r>:
 800ac1c:	4800      	ldr	r0, [pc, #0]	@ (800ac20 <_localeconv_r+0x4>)
 800ac1e:	4770      	bx	lr
 800ac20:	20000160 	.word	0x20000160

0800ac24 <_close_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d06      	ldr	r5, [pc, #24]	@ (800ac40 <_close_r+0x1c>)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f7 f95a 	bl	8001ee8 <_close>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_close_r+0x1a>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_close_r+0x1a>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	20004fb8 	.word	0x20004fb8

0800ac44 <_reclaim_reent>:
 800ac44:	4b29      	ldr	r3, [pc, #164]	@ (800acec <_reclaim_reent+0xa8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4283      	cmp	r3, r0
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	d04b      	beq.n	800ace8 <_reclaim_reent+0xa4>
 800ac50:	69c3      	ldr	r3, [r0, #28]
 800ac52:	b1ab      	cbz	r3, 800ac80 <_reclaim_reent+0x3c>
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	b16b      	cbz	r3, 800ac74 <_reclaim_reent+0x30>
 800ac58:	2500      	movs	r5, #0
 800ac5a:	69e3      	ldr	r3, [r4, #28]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	5959      	ldr	r1, [r3, r5]
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d13b      	bne.n	800acdc <_reclaim_reent+0x98>
 800ac64:	3504      	adds	r5, #4
 800ac66:	2d80      	cmp	r5, #128	@ 0x80
 800ac68:	d1f7      	bne.n	800ac5a <_reclaim_reent+0x16>
 800ac6a:	69e3      	ldr	r3, [r4, #28]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	68d9      	ldr	r1, [r3, #12]
 800ac70:	f000 ff02 	bl	800ba78 <_free_r>
 800ac74:	69e3      	ldr	r3, [r4, #28]
 800ac76:	6819      	ldr	r1, [r3, #0]
 800ac78:	b111      	cbz	r1, 800ac80 <_reclaim_reent+0x3c>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fefc 	bl	800ba78 <_free_r>
 800ac80:	6961      	ldr	r1, [r4, #20]
 800ac82:	b111      	cbz	r1, 800ac8a <_reclaim_reent+0x46>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fef7 	bl	800ba78 <_free_r>
 800ac8a:	69e1      	ldr	r1, [r4, #28]
 800ac8c:	b111      	cbz	r1, 800ac94 <_reclaim_reent+0x50>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 fef2 	bl	800ba78 <_free_r>
 800ac94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac96:	b111      	cbz	r1, 800ac9e <_reclaim_reent+0x5a>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 feed 	bl	800ba78 <_free_r>
 800ac9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aca0:	b111      	cbz	r1, 800aca8 <_reclaim_reent+0x64>
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fee8 	bl	800ba78 <_free_r>
 800aca8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800acaa:	b111      	cbz	r1, 800acb2 <_reclaim_reent+0x6e>
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fee3 	bl	800ba78 <_free_r>
 800acb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800acb4:	b111      	cbz	r1, 800acbc <_reclaim_reent+0x78>
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fede 	bl	800ba78 <_free_r>
 800acbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800acbe:	b111      	cbz	r1, 800acc6 <_reclaim_reent+0x82>
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fed9 	bl	800ba78 <_free_r>
 800acc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800acc8:	b111      	cbz	r1, 800acd0 <_reclaim_reent+0x8c>
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fed4 	bl	800ba78 <_free_r>
 800acd0:	6a23      	ldr	r3, [r4, #32]
 800acd2:	b14b      	cbz	r3, 800ace8 <_reclaim_reent+0xa4>
 800acd4:	4620      	mov	r0, r4
 800acd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acda:	4718      	bx	r3
 800acdc:	680e      	ldr	r6, [r1, #0]
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 feca 	bl	800ba78 <_free_r>
 800ace4:	4631      	mov	r1, r6
 800ace6:	e7bb      	b.n	800ac60 <_reclaim_reent+0x1c>
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	bf00      	nop
 800acec:	20000020 	.word	0x20000020

0800acf0 <_lseek_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	@ (800ad10 <_lseek_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f7 f919 	bl	8001f36 <_lseek>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_lseek_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_lseek_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20004fb8 	.word	0x20004fb8

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	@ (800ad34 <_read_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f7 f8a7 	bl	8001e76 <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20004fb8 	.word	0x20004fb8

0800ad38 <_write_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	@ (800ad58 <_write_r+0x20>)
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4608      	mov	r0, r1
 800ad40:	4611      	mov	r1, r2
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7f7 f8b2 	bl	8001eb0 <_write>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_write_r+0x1e>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_write_r+0x1e>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20004fb8 	.word	0x20004fb8

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	@ (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20000020 	.word	0x20000020

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4d0d      	ldr	r5, [pc, #52]	@ (800ada0 <__libc_init_array+0x38>)
 800ad6c:	4c0d      	ldr	r4, [pc, #52]	@ (800ada4 <__libc_init_array+0x3c>)
 800ad6e:	1b64      	subs	r4, r4, r5
 800ad70:	10a4      	asrs	r4, r4, #2
 800ad72:	2600      	movs	r6, #0
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4d0b      	ldr	r5, [pc, #44]	@ (800ada8 <__libc_init_array+0x40>)
 800ad7a:	4c0c      	ldr	r4, [pc, #48]	@ (800adac <__libc_init_array+0x44>)
 800ad7c:	f003 fb72 	bl	800e464 <_init>
 800ad80:	1b64      	subs	r4, r4, r5
 800ad82:	10a4      	asrs	r4, r4, #2
 800ad84:	2600      	movs	r6, #0
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800e9f8 	.word	0x0800e9f8
 800ada4:	0800e9f8 	.word	0x0800e9f8
 800ada8:	0800e9f8 	.word	0x0800e9f8
 800adac:	0800e9fc 	.word	0x0800e9fc

0800adb0 <__retarget_lock_init_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_acquire_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__retarget_lock_release_recursive>:
 800adb4:	4770      	bx	lr

0800adb6 <memcpy>:
 800adb6:	440a      	add	r2, r1
 800adb8:	4291      	cmp	r1, r2
 800adba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800adbe:	d100      	bne.n	800adc2 <memcpy+0xc>
 800adc0:	4770      	bx	lr
 800adc2:	b510      	push	{r4, lr}
 800adc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adcc:	4291      	cmp	r1, r2
 800adce:	d1f9      	bne.n	800adc4 <memcpy+0xe>
 800add0:	bd10      	pop	{r4, pc}
	...

0800add4 <nanf>:
 800add4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800addc <nanf+0x8>
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	7fc00000 	.word	0x7fc00000

0800ade0 <quorem>:
 800ade0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	6903      	ldr	r3, [r0, #16]
 800ade6:	690c      	ldr	r4, [r1, #16]
 800ade8:	42a3      	cmp	r3, r4
 800adea:	4607      	mov	r7, r0
 800adec:	db7e      	blt.n	800aeec <quorem+0x10c>
 800adee:	3c01      	subs	r4, #1
 800adf0:	f101 0814 	add.w	r8, r1, #20
 800adf4:	00a3      	lsls	r3, r4, #2
 800adf6:	f100 0514 	add.w	r5, r0, #20
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae12:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae16:	d32e      	bcc.n	800ae76 <quorem+0x96>
 800ae18:	f04f 0a00 	mov.w	sl, #0
 800ae1c:	46c4      	mov	ip, r8
 800ae1e:	46ae      	mov	lr, r5
 800ae20:	46d3      	mov	fp, sl
 800ae22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae26:	b298      	uxth	r0, r3
 800ae28:	fb06 a000 	mla	r0, r6, r0, sl
 800ae2c:	0c02      	lsrs	r2, r0, #16
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	fb06 2303 	mla	r3, r6, r3, r2
 800ae34:	f8de 2000 	ldr.w	r2, [lr]
 800ae38:	b280      	uxth	r0, r0
 800ae3a:	b292      	uxth	r2, r2
 800ae3c:	1a12      	subs	r2, r2, r0
 800ae3e:	445a      	add	r2, fp
 800ae40:	f8de 0000 	ldr.w	r0, [lr]
 800ae44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae52:	b292      	uxth	r2, r2
 800ae54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae58:	45e1      	cmp	r9, ip
 800ae5a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ae62:	d2de      	bcs.n	800ae22 <quorem+0x42>
 800ae64:	9b00      	ldr	r3, [sp, #0]
 800ae66:	58eb      	ldr	r3, [r5, r3]
 800ae68:	b92b      	cbnz	r3, 800ae76 <quorem+0x96>
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	3b04      	subs	r3, #4
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	d32f      	bcc.n	800aed4 <quorem+0xf4>
 800ae74:	613c      	str	r4, [r7, #16]
 800ae76:	4638      	mov	r0, r7
 800ae78:	f001 f9c2 	bl	800c200 <__mcmp>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	db25      	blt.n	800aecc <quorem+0xec>
 800ae80:	4629      	mov	r1, r5
 800ae82:	2000      	movs	r0, #0
 800ae84:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae88:	f8d1 c000 	ldr.w	ip, [r1]
 800ae8c:	fa1f fe82 	uxth.w	lr, r2
 800ae90:	fa1f f38c 	uxth.w	r3, ip
 800ae94:	eba3 030e 	sub.w	r3, r3, lr
 800ae98:	4403      	add	r3, r0
 800ae9a:	0c12      	lsrs	r2, r2, #16
 800ae9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aea0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeaa:	45c1      	cmp	r9, r8
 800aeac:	f841 3b04 	str.w	r3, [r1], #4
 800aeb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aeb4:	d2e6      	bcs.n	800ae84 <quorem+0xa4>
 800aeb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aebe:	b922      	cbnz	r2, 800aeca <quorem+0xea>
 800aec0:	3b04      	subs	r3, #4
 800aec2:	429d      	cmp	r5, r3
 800aec4:	461a      	mov	r2, r3
 800aec6:	d30b      	bcc.n	800aee0 <quorem+0x100>
 800aec8:	613c      	str	r4, [r7, #16]
 800aeca:	3601      	adds	r6, #1
 800aecc:	4630      	mov	r0, r6
 800aece:	b003      	add	sp, #12
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	6812      	ldr	r2, [r2, #0]
 800aed6:	3b04      	subs	r3, #4
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d1cb      	bne.n	800ae74 <quorem+0x94>
 800aedc:	3c01      	subs	r4, #1
 800aede:	e7c6      	b.n	800ae6e <quorem+0x8e>
 800aee0:	6812      	ldr	r2, [r2, #0]
 800aee2:	3b04      	subs	r3, #4
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	d1ef      	bne.n	800aec8 <quorem+0xe8>
 800aee8:	3c01      	subs	r4, #1
 800aeea:	e7ea      	b.n	800aec2 <quorem+0xe2>
 800aeec:	2000      	movs	r0, #0
 800aeee:	e7ee      	b.n	800aece <quorem+0xee>

0800aef0 <_dtoa_r>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	69c7      	ldr	r7, [r0, #28]
 800aef6:	b099      	sub	sp, #100	@ 0x64
 800aef8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aefc:	ec55 4b10 	vmov	r4, r5, d0
 800af00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af02:	9109      	str	r1, [sp, #36]	@ 0x24
 800af04:	4683      	mov	fp, r0
 800af06:	920e      	str	r2, [sp, #56]	@ 0x38
 800af08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af0a:	b97f      	cbnz	r7, 800af2c <_dtoa_r+0x3c>
 800af0c:	2010      	movs	r0, #16
 800af0e:	f000 fdfd 	bl	800bb0c <malloc>
 800af12:	4602      	mov	r2, r0
 800af14:	f8cb 001c 	str.w	r0, [fp, #28]
 800af18:	b920      	cbnz	r0, 800af24 <_dtoa_r+0x34>
 800af1a:	4ba7      	ldr	r3, [pc, #668]	@ (800b1b8 <_dtoa_r+0x2c8>)
 800af1c:	21ef      	movs	r1, #239	@ 0xef
 800af1e:	48a7      	ldr	r0, [pc, #668]	@ (800b1bc <_dtoa_r+0x2cc>)
 800af20:	f002 fc2a 	bl	800d778 <__assert_func>
 800af24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af28:	6007      	str	r7, [r0, #0]
 800af2a:	60c7      	str	r7, [r0, #12]
 800af2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af30:	6819      	ldr	r1, [r3, #0]
 800af32:	b159      	cbz	r1, 800af4c <_dtoa_r+0x5c>
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	604a      	str	r2, [r1, #4]
 800af38:	2301      	movs	r3, #1
 800af3a:	4093      	lsls	r3, r2
 800af3c:	608b      	str	r3, [r1, #8]
 800af3e:	4658      	mov	r0, fp
 800af40:	f000 feda 	bl	800bcf8 <_Bfree>
 800af44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	1e2b      	subs	r3, r5, #0
 800af4e:	bfb9      	ittee	lt
 800af50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af54:	9303      	strlt	r3, [sp, #12]
 800af56:	2300      	movge	r3, #0
 800af58:	6033      	strge	r3, [r6, #0]
 800af5a:	9f03      	ldr	r7, [sp, #12]
 800af5c:	4b98      	ldr	r3, [pc, #608]	@ (800b1c0 <_dtoa_r+0x2d0>)
 800af5e:	bfbc      	itt	lt
 800af60:	2201      	movlt	r2, #1
 800af62:	6032      	strlt	r2, [r6, #0]
 800af64:	43bb      	bics	r3, r7
 800af66:	d112      	bne.n	800af8e <_dtoa_r+0x9e>
 800af68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af74:	4323      	orrs	r3, r4
 800af76:	f000 854d 	beq.w	800ba14 <_dtoa_r+0xb24>
 800af7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b1d4 <_dtoa_r+0x2e4>
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 854f 	beq.w	800ba24 <_dtoa_r+0xb34>
 800af86:	f10a 0303 	add.w	r3, sl, #3
 800af8a:	f000 bd49 	b.w	800ba20 <_dtoa_r+0xb30>
 800af8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af92:	2200      	movs	r2, #0
 800af94:	ec51 0b17 	vmov	r0, r1, d7
 800af98:	2300      	movs	r3, #0
 800af9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af9e:	f7f5 fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800afa2:	4680      	mov	r8, r0
 800afa4:	b158      	cbz	r0, 800afbe <_dtoa_r+0xce>
 800afa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afa8:	2301      	movs	r3, #1
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afae:	b113      	cbz	r3, 800afb6 <_dtoa_r+0xc6>
 800afb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800afb2:	4b84      	ldr	r3, [pc, #528]	@ (800b1c4 <_dtoa_r+0x2d4>)
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b1d8 <_dtoa_r+0x2e8>
 800afba:	f000 bd33 	b.w	800ba24 <_dtoa_r+0xb34>
 800afbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800afc2:	aa16      	add	r2, sp, #88	@ 0x58
 800afc4:	a917      	add	r1, sp, #92	@ 0x5c
 800afc6:	4658      	mov	r0, fp
 800afc8:	f001 fa3a 	bl	800c440 <__d2b>
 800afcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800afd0:	4681      	mov	r9, r0
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d077      	beq.n	800b0c6 <_dtoa_r+0x1d6>
 800afd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800afdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afe4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800afe8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800afec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aff0:	4619      	mov	r1, r3
 800aff2:	2200      	movs	r2, #0
 800aff4:	4b74      	ldr	r3, [pc, #464]	@ (800b1c8 <_dtoa_r+0x2d8>)
 800aff6:	f7f5 f94f 	bl	8000298 <__aeabi_dsub>
 800affa:	a369      	add	r3, pc, #420	@ (adr r3, 800b1a0 <_dtoa_r+0x2b0>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 fb02 	bl	8000608 <__aeabi_dmul>
 800b004:	a368      	add	r3, pc, #416	@ (adr r3, 800b1a8 <_dtoa_r+0x2b8>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f947 	bl	800029c <__adddf3>
 800b00e:	4604      	mov	r4, r0
 800b010:	4630      	mov	r0, r6
 800b012:	460d      	mov	r5, r1
 800b014:	f7f5 fa8e 	bl	8000534 <__aeabi_i2d>
 800b018:	a365      	add	r3, pc, #404	@ (adr r3, 800b1b0 <_dtoa_r+0x2c0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 faf3 	bl	8000608 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4620      	mov	r0, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 f937 	bl	800029c <__adddf3>
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	f7f5 fd99 	bl	8000b68 <__aeabi_d2iz>
 800b036:	2200      	movs	r2, #0
 800b038:	4607      	mov	r7, r0
 800b03a:	2300      	movs	r3, #0
 800b03c:	4620      	mov	r0, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	f7f5 fd54 	bl	8000aec <__aeabi_dcmplt>
 800b044:	b140      	cbz	r0, 800b058 <_dtoa_r+0x168>
 800b046:	4638      	mov	r0, r7
 800b048:	f7f5 fa74 	bl	8000534 <__aeabi_i2d>
 800b04c:	4622      	mov	r2, r4
 800b04e:	462b      	mov	r3, r5
 800b050:	f7f5 fd42 	bl	8000ad8 <__aeabi_dcmpeq>
 800b054:	b900      	cbnz	r0, 800b058 <_dtoa_r+0x168>
 800b056:	3f01      	subs	r7, #1
 800b058:	2f16      	cmp	r7, #22
 800b05a:	d851      	bhi.n	800b100 <_dtoa_r+0x210>
 800b05c:	4b5b      	ldr	r3, [pc, #364]	@ (800b1cc <_dtoa_r+0x2dc>)
 800b05e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b06a:	f7f5 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d048      	beq.n	800b104 <_dtoa_r+0x214>
 800b072:	3f01      	subs	r7, #1
 800b074:	2300      	movs	r3, #0
 800b076:	9312      	str	r3, [sp, #72]	@ 0x48
 800b078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b07a:	1b9b      	subs	r3, r3, r6
 800b07c:	1e5a      	subs	r2, r3, #1
 800b07e:	bf44      	itt	mi
 800b080:	f1c3 0801 	rsbmi	r8, r3, #1
 800b084:	2300      	movmi	r3, #0
 800b086:	9208      	str	r2, [sp, #32]
 800b088:	bf54      	ite	pl
 800b08a:	f04f 0800 	movpl.w	r8, #0
 800b08e:	9308      	strmi	r3, [sp, #32]
 800b090:	2f00      	cmp	r7, #0
 800b092:	db39      	blt.n	800b108 <_dtoa_r+0x218>
 800b094:	9b08      	ldr	r3, [sp, #32]
 800b096:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b098:	443b      	add	r3, r7
 800b09a:	9308      	str	r3, [sp, #32]
 800b09c:	2300      	movs	r3, #0
 800b09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a2:	2b09      	cmp	r3, #9
 800b0a4:	d864      	bhi.n	800b170 <_dtoa_r+0x280>
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	bfc4      	itt	gt
 800b0aa:	3b04      	subgt	r3, #4
 800b0ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b0b4:	bfcc      	ite	gt
 800b0b6:	2400      	movgt	r4, #0
 800b0b8:	2401      	movle	r4, #1
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d863      	bhi.n	800b186 <_dtoa_r+0x296>
 800b0be:	e8df f003 	tbb	[pc, r3]
 800b0c2:	372a      	.short	0x372a
 800b0c4:	5535      	.short	0x5535
 800b0c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b0ca:	441e      	add	r6, r3
 800b0cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b0d0:	2b20      	cmp	r3, #32
 800b0d2:	bfc1      	itttt	gt
 800b0d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b0d8:	409f      	lslgt	r7, r3
 800b0da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b0de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b0e2:	bfd6      	itet	le
 800b0e4:	f1c3 0320 	rsble	r3, r3, #32
 800b0e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b0ec:	fa04 f003 	lslle.w	r0, r4, r3
 800b0f0:	f7f5 fa10 	bl	8000514 <__aeabi_ui2d>
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b0fa:	3e01      	subs	r6, #1
 800b0fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b0fe:	e777      	b.n	800aff0 <_dtoa_r+0x100>
 800b100:	2301      	movs	r3, #1
 800b102:	e7b8      	b.n	800b076 <_dtoa_r+0x186>
 800b104:	9012      	str	r0, [sp, #72]	@ 0x48
 800b106:	e7b7      	b.n	800b078 <_dtoa_r+0x188>
 800b108:	427b      	negs	r3, r7
 800b10a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b10c:	2300      	movs	r3, #0
 800b10e:	eba8 0807 	sub.w	r8, r8, r7
 800b112:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b114:	e7c4      	b.n	800b0a0 <_dtoa_r+0x1b0>
 800b116:	2300      	movs	r3, #0
 800b118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dc35      	bgt.n	800b18c <_dtoa_r+0x29c>
 800b120:	2301      	movs	r3, #1
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	9307      	str	r3, [sp, #28]
 800b126:	461a      	mov	r2, r3
 800b128:	920e      	str	r2, [sp, #56]	@ 0x38
 800b12a:	e00b      	b.n	800b144 <_dtoa_r+0x254>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e7f3      	b.n	800b118 <_dtoa_r+0x228>
 800b130:	2300      	movs	r3, #0
 800b132:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b136:	18fb      	adds	r3, r7, r3
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	3301      	adds	r3, #1
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	9307      	str	r3, [sp, #28]
 800b140:	bfb8      	it	lt
 800b142:	2301      	movlt	r3, #1
 800b144:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b148:	2100      	movs	r1, #0
 800b14a:	2204      	movs	r2, #4
 800b14c:	f102 0514 	add.w	r5, r2, #20
 800b150:	429d      	cmp	r5, r3
 800b152:	d91f      	bls.n	800b194 <_dtoa_r+0x2a4>
 800b154:	6041      	str	r1, [r0, #4]
 800b156:	4658      	mov	r0, fp
 800b158:	f000 fd8e 	bl	800bc78 <_Balloc>
 800b15c:	4682      	mov	sl, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	d13c      	bne.n	800b1dc <_dtoa_r+0x2ec>
 800b162:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d0 <_dtoa_r+0x2e0>)
 800b164:	4602      	mov	r2, r0
 800b166:	f240 11af 	movw	r1, #431	@ 0x1af
 800b16a:	e6d8      	b.n	800af1e <_dtoa_r+0x2e>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e7e0      	b.n	800b132 <_dtoa_r+0x242>
 800b170:	2401      	movs	r4, #1
 800b172:	2300      	movs	r3, #0
 800b174:	9309      	str	r3, [sp, #36]	@ 0x24
 800b176:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	9307      	str	r3, [sp, #28]
 800b180:	2200      	movs	r2, #0
 800b182:	2312      	movs	r3, #18
 800b184:	e7d0      	b.n	800b128 <_dtoa_r+0x238>
 800b186:	2301      	movs	r3, #1
 800b188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b18a:	e7f5      	b.n	800b178 <_dtoa_r+0x288>
 800b18c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	9307      	str	r3, [sp, #28]
 800b192:	e7d7      	b.n	800b144 <_dtoa_r+0x254>
 800b194:	3101      	adds	r1, #1
 800b196:	0052      	lsls	r2, r2, #1
 800b198:	e7d8      	b.n	800b14c <_dtoa_r+0x25c>
 800b19a:	bf00      	nop
 800b19c:	f3af 8000 	nop.w
 800b1a0:	636f4361 	.word	0x636f4361
 800b1a4:	3fd287a7 	.word	0x3fd287a7
 800b1a8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ac:	3fc68a28 	.word	0x3fc68a28
 800b1b0:	509f79fb 	.word	0x509f79fb
 800b1b4:	3fd34413 	.word	0x3fd34413
 800b1b8:	0800e60a 	.word	0x0800e60a
 800b1bc:	0800e621 	.word	0x0800e621
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	0800e5d5 	.word	0x0800e5d5
 800b1c8:	3ff80000 	.word	0x3ff80000
 800b1cc:	0800e718 	.word	0x0800e718
 800b1d0:	0800e679 	.word	0x0800e679
 800b1d4:	0800e606 	.word	0x0800e606
 800b1d8:	0800e5d4 	.word	0x0800e5d4
 800b1dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1e0:	6018      	str	r0, [r3, #0]
 800b1e2:	9b07      	ldr	r3, [sp, #28]
 800b1e4:	2b0e      	cmp	r3, #14
 800b1e6:	f200 80a4 	bhi.w	800b332 <_dtoa_r+0x442>
 800b1ea:	2c00      	cmp	r4, #0
 800b1ec:	f000 80a1 	beq.w	800b332 <_dtoa_r+0x442>
 800b1f0:	2f00      	cmp	r7, #0
 800b1f2:	dd33      	ble.n	800b25c <_dtoa_r+0x36c>
 800b1f4:	4bad      	ldr	r3, [pc, #692]	@ (800b4ac <_dtoa_r+0x5bc>)
 800b1f6:	f007 020f 	and.w	r2, r7, #15
 800b1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fe:	ed93 7b00 	vldr	d7, [r3]
 800b202:	05f8      	lsls	r0, r7, #23
 800b204:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b208:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b20c:	d516      	bpl.n	800b23c <_dtoa_r+0x34c>
 800b20e:	4ba8      	ldr	r3, [pc, #672]	@ (800b4b0 <_dtoa_r+0x5c0>)
 800b210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b218:	f7f5 fb20 	bl	800085c <__aeabi_ddiv>
 800b21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b220:	f004 040f 	and.w	r4, r4, #15
 800b224:	2603      	movs	r6, #3
 800b226:	4da2      	ldr	r5, [pc, #648]	@ (800b4b0 <_dtoa_r+0x5c0>)
 800b228:	b954      	cbnz	r4, 800b240 <_dtoa_r+0x350>
 800b22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b232:	f7f5 fb13 	bl	800085c <__aeabi_ddiv>
 800b236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b23a:	e028      	b.n	800b28e <_dtoa_r+0x39e>
 800b23c:	2602      	movs	r6, #2
 800b23e:	e7f2      	b.n	800b226 <_dtoa_r+0x336>
 800b240:	07e1      	lsls	r1, r4, #31
 800b242:	d508      	bpl.n	800b256 <_dtoa_r+0x366>
 800b244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b248:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b24c:	f7f5 f9dc 	bl	8000608 <__aeabi_dmul>
 800b250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b254:	3601      	adds	r6, #1
 800b256:	1064      	asrs	r4, r4, #1
 800b258:	3508      	adds	r5, #8
 800b25a:	e7e5      	b.n	800b228 <_dtoa_r+0x338>
 800b25c:	f000 80d2 	beq.w	800b404 <_dtoa_r+0x514>
 800b260:	427c      	negs	r4, r7
 800b262:	4b92      	ldr	r3, [pc, #584]	@ (800b4ac <_dtoa_r+0x5bc>)
 800b264:	4d92      	ldr	r5, [pc, #584]	@ (800b4b0 <_dtoa_r+0x5c0>)
 800b266:	f004 020f 	and.w	r2, r4, #15
 800b26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b276:	f7f5 f9c7 	bl	8000608 <__aeabi_dmul>
 800b27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b27e:	1124      	asrs	r4, r4, #4
 800b280:	2300      	movs	r3, #0
 800b282:	2602      	movs	r6, #2
 800b284:	2c00      	cmp	r4, #0
 800b286:	f040 80b2 	bne.w	800b3ee <_dtoa_r+0x4fe>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1d3      	bne.n	800b236 <_dtoa_r+0x346>
 800b28e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b290:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 80b7 	beq.w	800b408 <_dtoa_r+0x518>
 800b29a:	4b86      	ldr	r3, [pc, #536]	@ (800b4b4 <_dtoa_r+0x5c4>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 fc23 	bl	8000aec <__aeabi_dcmplt>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f000 80ae 	beq.w	800b408 <_dtoa_r+0x518>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80aa 	beq.w	800b408 <_dtoa_r+0x518>
 800b2b4:	9b00      	ldr	r3, [sp, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dd37      	ble.n	800b32a <_dtoa_r+0x43a>
 800b2ba:	1e7b      	subs	r3, r7, #1
 800b2bc:	9304      	str	r3, [sp, #16]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4b7d      	ldr	r3, [pc, #500]	@ (800b4b8 <_dtoa_r+0x5c8>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	f7f5 f99f 	bl	8000608 <__aeabi_dmul>
 800b2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ce:	9c00      	ldr	r4, [sp, #0]
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7f5 f92e 	bl	8000534 <__aeabi_i2d>
 800b2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2dc:	f7f5 f994 	bl	8000608 <__aeabi_dmul>
 800b2e0:	4b76      	ldr	r3, [pc, #472]	@ (800b4bc <_dtoa_r+0x5cc>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f7f4 ffda 	bl	800029c <__adddf3>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b2ee:	2c00      	cmp	r4, #0
 800b2f0:	f040 808d 	bne.w	800b40e <_dtoa_r+0x51e>
 800b2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f8:	4b71      	ldr	r3, [pc, #452]	@ (800b4c0 <_dtoa_r+0x5d0>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f7f4 ffcc 	bl	8000298 <__aeabi_dsub>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b308:	462a      	mov	r2, r5
 800b30a:	4633      	mov	r3, r6
 800b30c:	f7f5 fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 800b310:	2800      	cmp	r0, #0
 800b312:	f040 828b 	bne.w	800b82c <_dtoa_r+0x93c>
 800b316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b31a:	462a      	mov	r2, r5
 800b31c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b320:	f7f5 fbe4 	bl	8000aec <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f040 8128 	bne.w	800b57a <_dtoa_r+0x68a>
 800b32a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b32e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b334:	2b00      	cmp	r3, #0
 800b336:	f2c0 815a 	blt.w	800b5ee <_dtoa_r+0x6fe>
 800b33a:	2f0e      	cmp	r7, #14
 800b33c:	f300 8157 	bgt.w	800b5ee <_dtoa_r+0x6fe>
 800b340:	4b5a      	ldr	r3, [pc, #360]	@ (800b4ac <_dtoa_r+0x5bc>)
 800b342:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b346:	ed93 7b00 	vldr	d7, [r3]
 800b34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	ed8d 7b00 	vstr	d7, [sp]
 800b352:	da03      	bge.n	800b35c <_dtoa_r+0x46c>
 800b354:	9b07      	ldr	r3, [sp, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f340 8101 	ble.w	800b55e <_dtoa_r+0x66e>
 800b35c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b360:	4656      	mov	r6, sl
 800b362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 fa77 	bl	800085c <__aeabi_ddiv>
 800b36e:	f7f5 fbfb 	bl	8000b68 <__aeabi_d2iz>
 800b372:	4680      	mov	r8, r0
 800b374:	f7f5 f8de 	bl	8000534 <__aeabi_i2d>
 800b378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b37c:	f7f5 f944 	bl	8000608 <__aeabi_dmul>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4620      	mov	r0, r4
 800b386:	4629      	mov	r1, r5
 800b388:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b38c:	f7f4 ff84 	bl	8000298 <__aeabi_dsub>
 800b390:	f806 4b01 	strb.w	r4, [r6], #1
 800b394:	9d07      	ldr	r5, [sp, #28]
 800b396:	eba6 040a 	sub.w	r4, r6, sl
 800b39a:	42a5      	cmp	r5, r4
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	f040 8117 	bne.w	800b5d2 <_dtoa_r+0x6e2>
 800b3a4:	f7f4 ff7a 	bl	800029c <__adddf3>
 800b3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	f7f5 fbba 	bl	8000b28 <__aeabi_dcmpgt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f040 80f9 	bne.w	800b5ac <_dtoa_r+0x6bc>
 800b3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 fb89 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3c6:	b118      	cbz	r0, 800b3d0 <_dtoa_r+0x4e0>
 800b3c8:	f018 0f01 	tst.w	r8, #1
 800b3cc:	f040 80ee 	bne.w	800b5ac <_dtoa_r+0x6bc>
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	4658      	mov	r0, fp
 800b3d4:	f000 fc90 	bl	800bcf8 <_Bfree>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	7033      	strb	r3, [r6, #0]
 800b3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b3de:	3701      	adds	r7, #1
 800b3e0:	601f      	str	r7, [r3, #0]
 800b3e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 831d 	beq.w	800ba24 <_dtoa_r+0xb34>
 800b3ea:	601e      	str	r6, [r3, #0]
 800b3ec:	e31a      	b.n	800ba24 <_dtoa_r+0xb34>
 800b3ee:	07e2      	lsls	r2, r4, #31
 800b3f0:	d505      	bpl.n	800b3fe <_dtoa_r+0x50e>
 800b3f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f6:	f7f5 f907 	bl	8000608 <__aeabi_dmul>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	1064      	asrs	r4, r4, #1
 800b400:	3508      	adds	r5, #8
 800b402:	e73f      	b.n	800b284 <_dtoa_r+0x394>
 800b404:	2602      	movs	r6, #2
 800b406:	e742      	b.n	800b28e <_dtoa_r+0x39e>
 800b408:	9c07      	ldr	r4, [sp, #28]
 800b40a:	9704      	str	r7, [sp, #16]
 800b40c:	e761      	b.n	800b2d2 <_dtoa_r+0x3e2>
 800b40e:	4b27      	ldr	r3, [pc, #156]	@ (800b4ac <_dtoa_r+0x5bc>)
 800b410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b416:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b41a:	4454      	add	r4, sl
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d053      	beq.n	800b4c8 <_dtoa_r+0x5d8>
 800b420:	4928      	ldr	r1, [pc, #160]	@ (800b4c4 <_dtoa_r+0x5d4>)
 800b422:	2000      	movs	r0, #0
 800b424:	f7f5 fa1a 	bl	800085c <__aeabi_ddiv>
 800b428:	4633      	mov	r3, r6
 800b42a:	462a      	mov	r2, r5
 800b42c:	f7f4 ff34 	bl	8000298 <__aeabi_dsub>
 800b430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b434:	4656      	mov	r6, sl
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	f7f5 fb95 	bl	8000b68 <__aeabi_d2iz>
 800b43e:	4605      	mov	r5, r0
 800b440:	f7f5 f878 	bl	8000534 <__aeabi_i2d>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b44c:	f7f4 ff24 	bl	8000298 <__aeabi_dsub>
 800b450:	3530      	adds	r5, #48	@ 0x30
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b45a:	f806 5b01 	strb.w	r5, [r6], #1
 800b45e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b462:	f7f5 fb43 	bl	8000aec <__aeabi_dcmplt>
 800b466:	2800      	cmp	r0, #0
 800b468:	d171      	bne.n	800b54e <_dtoa_r+0x65e>
 800b46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46e:	4911      	ldr	r1, [pc, #68]	@ (800b4b4 <_dtoa_r+0x5c4>)
 800b470:	2000      	movs	r0, #0
 800b472:	f7f4 ff11 	bl	8000298 <__aeabi_dsub>
 800b476:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b47a:	f7f5 fb37 	bl	8000aec <__aeabi_dcmplt>
 800b47e:	2800      	cmp	r0, #0
 800b480:	f040 8095 	bne.w	800b5ae <_dtoa_r+0x6be>
 800b484:	42a6      	cmp	r6, r4
 800b486:	f43f af50 	beq.w	800b32a <_dtoa_r+0x43a>
 800b48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b48e:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b8 <_dtoa_r+0x5c8>)
 800b490:	2200      	movs	r2, #0
 800b492:	f7f5 f8b9 	bl	8000608 <__aeabi_dmul>
 800b496:	4b08      	ldr	r3, [pc, #32]	@ (800b4b8 <_dtoa_r+0x5c8>)
 800b498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b49c:	2200      	movs	r2, #0
 800b49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a2:	f7f5 f8b1 	bl	8000608 <__aeabi_dmul>
 800b4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4aa:	e7c4      	b.n	800b436 <_dtoa_r+0x546>
 800b4ac:	0800e718 	.word	0x0800e718
 800b4b0:	0800e6f0 	.word	0x0800e6f0
 800b4b4:	3ff00000 	.word	0x3ff00000
 800b4b8:	40240000 	.word	0x40240000
 800b4bc:	401c0000 	.word	0x401c0000
 800b4c0:	40140000 	.word	0x40140000
 800b4c4:	3fe00000 	.word	0x3fe00000
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f7f5 f89c 	bl	8000608 <__aeabi_dmul>
 800b4d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b4d6:	4656      	mov	r6, sl
 800b4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4dc:	f7f5 fb44 	bl	8000b68 <__aeabi_d2iz>
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	f7f5 f827 	bl	8000534 <__aeabi_i2d>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ee:	f7f4 fed3 	bl	8000298 <__aeabi_dsub>
 800b4f2:	3530      	adds	r5, #48	@ 0x30
 800b4f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	42a6      	cmp	r6, r4
 800b4fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b502:	f04f 0200 	mov.w	r2, #0
 800b506:	d124      	bne.n	800b552 <_dtoa_r+0x662>
 800b508:	4bac      	ldr	r3, [pc, #688]	@ (800b7bc <_dtoa_r+0x8cc>)
 800b50a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b50e:	f7f4 fec5 	bl	800029c <__adddf3>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51a:	f7f5 fb05 	bl	8000b28 <__aeabi_dcmpgt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d145      	bne.n	800b5ae <_dtoa_r+0x6be>
 800b522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b526:	49a5      	ldr	r1, [pc, #660]	@ (800b7bc <_dtoa_r+0x8cc>)
 800b528:	2000      	movs	r0, #0
 800b52a:	f7f4 feb5 	bl	8000298 <__aeabi_dsub>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b536:	f7f5 fad9 	bl	8000aec <__aeabi_dcmplt>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f43f aef5 	beq.w	800b32a <_dtoa_r+0x43a>
 800b540:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b542:	1e73      	subs	r3, r6, #1
 800b544:	9315      	str	r3, [sp, #84]	@ 0x54
 800b546:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b54a:	2b30      	cmp	r3, #48	@ 0x30
 800b54c:	d0f8      	beq.n	800b540 <_dtoa_r+0x650>
 800b54e:	9f04      	ldr	r7, [sp, #16]
 800b550:	e73e      	b.n	800b3d0 <_dtoa_r+0x4e0>
 800b552:	4b9b      	ldr	r3, [pc, #620]	@ (800b7c0 <_dtoa_r+0x8d0>)
 800b554:	f7f5 f858 	bl	8000608 <__aeabi_dmul>
 800b558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b55c:	e7bc      	b.n	800b4d8 <_dtoa_r+0x5e8>
 800b55e:	d10c      	bne.n	800b57a <_dtoa_r+0x68a>
 800b560:	4b98      	ldr	r3, [pc, #608]	@ (800b7c4 <_dtoa_r+0x8d4>)
 800b562:	2200      	movs	r2, #0
 800b564:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b568:	f7f5 f84e 	bl	8000608 <__aeabi_dmul>
 800b56c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b570:	f7f5 fad0 	bl	8000b14 <__aeabi_dcmpge>
 800b574:	2800      	cmp	r0, #0
 800b576:	f000 8157 	beq.w	800b828 <_dtoa_r+0x938>
 800b57a:	2400      	movs	r4, #0
 800b57c:	4625      	mov	r5, r4
 800b57e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b580:	43db      	mvns	r3, r3
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	4656      	mov	r6, sl
 800b586:	2700      	movs	r7, #0
 800b588:	4621      	mov	r1, r4
 800b58a:	4658      	mov	r0, fp
 800b58c:	f000 fbb4 	bl	800bcf8 <_Bfree>
 800b590:	2d00      	cmp	r5, #0
 800b592:	d0dc      	beq.n	800b54e <_dtoa_r+0x65e>
 800b594:	b12f      	cbz	r7, 800b5a2 <_dtoa_r+0x6b2>
 800b596:	42af      	cmp	r7, r5
 800b598:	d003      	beq.n	800b5a2 <_dtoa_r+0x6b2>
 800b59a:	4639      	mov	r1, r7
 800b59c:	4658      	mov	r0, fp
 800b59e:	f000 fbab 	bl	800bcf8 <_Bfree>
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4658      	mov	r0, fp
 800b5a6:	f000 fba7 	bl	800bcf8 <_Bfree>
 800b5aa:	e7d0      	b.n	800b54e <_dtoa_r+0x65e>
 800b5ac:	9704      	str	r7, [sp, #16]
 800b5ae:	4633      	mov	r3, r6
 800b5b0:	461e      	mov	r6, r3
 800b5b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5b6:	2a39      	cmp	r2, #57	@ 0x39
 800b5b8:	d107      	bne.n	800b5ca <_dtoa_r+0x6da>
 800b5ba:	459a      	cmp	sl, r3
 800b5bc:	d1f8      	bne.n	800b5b0 <_dtoa_r+0x6c0>
 800b5be:	9a04      	ldr	r2, [sp, #16]
 800b5c0:	3201      	adds	r2, #1
 800b5c2:	9204      	str	r2, [sp, #16]
 800b5c4:	2230      	movs	r2, #48	@ 0x30
 800b5c6:	f88a 2000 	strb.w	r2, [sl]
 800b5ca:	781a      	ldrb	r2, [r3, #0]
 800b5cc:	3201      	adds	r2, #1
 800b5ce:	701a      	strb	r2, [r3, #0]
 800b5d0:	e7bd      	b.n	800b54e <_dtoa_r+0x65e>
 800b5d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b7c0 <_dtoa_r+0x8d0>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f7f5 f817 	bl	8000608 <__aeabi_dmul>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4604      	mov	r4, r0
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	f7f5 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f43f aebb 	beq.w	800b362 <_dtoa_r+0x472>
 800b5ec:	e6f0      	b.n	800b3d0 <_dtoa_r+0x4e0>
 800b5ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5f0:	2a00      	cmp	r2, #0
 800b5f2:	f000 80db 	beq.w	800b7ac <_dtoa_r+0x8bc>
 800b5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5f8:	2a01      	cmp	r2, #1
 800b5fa:	f300 80bf 	bgt.w	800b77c <_dtoa_r+0x88c>
 800b5fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b600:	2a00      	cmp	r2, #0
 800b602:	f000 80b7 	beq.w	800b774 <_dtoa_r+0x884>
 800b606:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b60a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b60c:	4646      	mov	r6, r8
 800b60e:	9a08      	ldr	r2, [sp, #32]
 800b610:	2101      	movs	r1, #1
 800b612:	441a      	add	r2, r3
 800b614:	4658      	mov	r0, fp
 800b616:	4498      	add	r8, r3
 800b618:	9208      	str	r2, [sp, #32]
 800b61a:	f000 fc6b 	bl	800bef4 <__i2b>
 800b61e:	4605      	mov	r5, r0
 800b620:	b15e      	cbz	r6, 800b63a <_dtoa_r+0x74a>
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	2b00      	cmp	r3, #0
 800b626:	dd08      	ble.n	800b63a <_dtoa_r+0x74a>
 800b628:	42b3      	cmp	r3, r6
 800b62a:	9a08      	ldr	r2, [sp, #32]
 800b62c:	bfa8      	it	ge
 800b62e:	4633      	movge	r3, r6
 800b630:	eba8 0803 	sub.w	r8, r8, r3
 800b634:	1af6      	subs	r6, r6, r3
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	9308      	str	r3, [sp, #32]
 800b63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b63c:	b1f3      	cbz	r3, 800b67c <_dtoa_r+0x78c>
 800b63e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 80b7 	beq.w	800b7b4 <_dtoa_r+0x8c4>
 800b646:	b18c      	cbz	r4, 800b66c <_dtoa_r+0x77c>
 800b648:	4629      	mov	r1, r5
 800b64a:	4622      	mov	r2, r4
 800b64c:	4658      	mov	r0, fp
 800b64e:	f000 fd11 	bl	800c074 <__pow5mult>
 800b652:	464a      	mov	r2, r9
 800b654:	4601      	mov	r1, r0
 800b656:	4605      	mov	r5, r0
 800b658:	4658      	mov	r0, fp
 800b65a:	f000 fc61 	bl	800bf20 <__multiply>
 800b65e:	4649      	mov	r1, r9
 800b660:	9004      	str	r0, [sp, #16]
 800b662:	4658      	mov	r0, fp
 800b664:	f000 fb48 	bl	800bcf8 <_Bfree>
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	4699      	mov	r9, r3
 800b66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b66e:	1b1a      	subs	r2, r3, r4
 800b670:	d004      	beq.n	800b67c <_dtoa_r+0x78c>
 800b672:	4649      	mov	r1, r9
 800b674:	4658      	mov	r0, fp
 800b676:	f000 fcfd 	bl	800c074 <__pow5mult>
 800b67a:	4681      	mov	r9, r0
 800b67c:	2101      	movs	r1, #1
 800b67e:	4658      	mov	r0, fp
 800b680:	f000 fc38 	bl	800bef4 <__i2b>
 800b684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b686:	4604      	mov	r4, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 81cf 	beq.w	800ba2c <_dtoa_r+0xb3c>
 800b68e:	461a      	mov	r2, r3
 800b690:	4601      	mov	r1, r0
 800b692:	4658      	mov	r0, fp
 800b694:	f000 fcee 	bl	800c074 <__pow5mult>
 800b698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	4604      	mov	r4, r0
 800b69e:	f300 8095 	bgt.w	800b7cc <_dtoa_r+0x8dc>
 800b6a2:	9b02      	ldr	r3, [sp, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f040 8087 	bne.w	800b7b8 <_dtoa_r+0x8c8>
 800b6aa:	9b03      	ldr	r3, [sp, #12]
 800b6ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f040 8089 	bne.w	800b7c8 <_dtoa_r+0x8d8>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6bc:	0d1b      	lsrs	r3, r3, #20
 800b6be:	051b      	lsls	r3, r3, #20
 800b6c0:	b12b      	cbz	r3, 800b6ce <_dtoa_r+0x7de>
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	9308      	str	r3, [sp, #32]
 800b6c8:	f108 0801 	add.w	r8, r8, #1
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 81b0 	beq.w	800ba38 <_dtoa_r+0xb48>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6de:	6918      	ldr	r0, [r3, #16]
 800b6e0:	f000 fbbc 	bl	800be5c <__hi0bits>
 800b6e4:	f1c0 0020 	rsb	r0, r0, #32
 800b6e8:	9b08      	ldr	r3, [sp, #32]
 800b6ea:	4418      	add	r0, r3
 800b6ec:	f010 001f 	ands.w	r0, r0, #31
 800b6f0:	d077      	beq.n	800b7e2 <_dtoa_r+0x8f2>
 800b6f2:	f1c0 0320 	rsb	r3, r0, #32
 800b6f6:	2b04      	cmp	r3, #4
 800b6f8:	dd6b      	ble.n	800b7d2 <_dtoa_r+0x8e2>
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	f1c0 001c 	rsb	r0, r0, #28
 800b700:	4403      	add	r3, r0
 800b702:	4480      	add	r8, r0
 800b704:	4406      	add	r6, r0
 800b706:	9308      	str	r3, [sp, #32]
 800b708:	f1b8 0f00 	cmp.w	r8, #0
 800b70c:	dd05      	ble.n	800b71a <_dtoa_r+0x82a>
 800b70e:	4649      	mov	r1, r9
 800b710:	4642      	mov	r2, r8
 800b712:	4658      	mov	r0, fp
 800b714:	f000 fd08 	bl	800c128 <__lshift>
 800b718:	4681      	mov	r9, r0
 800b71a:	9b08      	ldr	r3, [sp, #32]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	dd05      	ble.n	800b72c <_dtoa_r+0x83c>
 800b720:	4621      	mov	r1, r4
 800b722:	461a      	mov	r2, r3
 800b724:	4658      	mov	r0, fp
 800b726:	f000 fcff 	bl	800c128 <__lshift>
 800b72a:	4604      	mov	r4, r0
 800b72c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d059      	beq.n	800b7e6 <_dtoa_r+0x8f6>
 800b732:	4621      	mov	r1, r4
 800b734:	4648      	mov	r0, r9
 800b736:	f000 fd63 	bl	800c200 <__mcmp>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	da53      	bge.n	800b7e6 <_dtoa_r+0x8f6>
 800b73e:	1e7b      	subs	r3, r7, #1
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	4649      	mov	r1, r9
 800b744:	2300      	movs	r3, #0
 800b746:	220a      	movs	r2, #10
 800b748:	4658      	mov	r0, fp
 800b74a:	f000 faf7 	bl	800bd3c <__multadd>
 800b74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b750:	4681      	mov	r9, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8172 	beq.w	800ba3c <_dtoa_r+0xb4c>
 800b758:	2300      	movs	r3, #0
 800b75a:	4629      	mov	r1, r5
 800b75c:	220a      	movs	r2, #10
 800b75e:	4658      	mov	r0, fp
 800b760:	f000 faec 	bl	800bd3c <__multadd>
 800b764:	9b00      	ldr	r3, [sp, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	4605      	mov	r5, r0
 800b76a:	dc67      	bgt.n	800b83c <_dtoa_r+0x94c>
 800b76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76e:	2b02      	cmp	r3, #2
 800b770:	dc41      	bgt.n	800b7f6 <_dtoa_r+0x906>
 800b772:	e063      	b.n	800b83c <_dtoa_r+0x94c>
 800b774:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b776:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b77a:	e746      	b.n	800b60a <_dtoa_r+0x71a>
 800b77c:	9b07      	ldr	r3, [sp, #28]
 800b77e:	1e5c      	subs	r4, r3, #1
 800b780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b782:	42a3      	cmp	r3, r4
 800b784:	bfbf      	itttt	lt
 800b786:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b788:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b78a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b78c:	1ae3      	sublt	r3, r4, r3
 800b78e:	bfb4      	ite	lt
 800b790:	18d2      	addlt	r2, r2, r3
 800b792:	1b1c      	subge	r4, r3, r4
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	bfbc      	itt	lt
 800b798:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b79a:	2400      	movlt	r4, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bfb5      	itete	lt
 800b7a0:	eba8 0603 	sublt.w	r6, r8, r3
 800b7a4:	9b07      	ldrge	r3, [sp, #28]
 800b7a6:	2300      	movlt	r3, #0
 800b7a8:	4646      	movge	r6, r8
 800b7aa:	e730      	b.n	800b60e <_dtoa_r+0x71e>
 800b7ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b7b0:	4646      	mov	r6, r8
 800b7b2:	e735      	b.n	800b620 <_dtoa_r+0x730>
 800b7b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7b6:	e75c      	b.n	800b672 <_dtoa_r+0x782>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e788      	b.n	800b6ce <_dtoa_r+0x7de>
 800b7bc:	3fe00000 	.word	0x3fe00000
 800b7c0:	40240000 	.word	0x40240000
 800b7c4:	40140000 	.word	0x40140000
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	e780      	b.n	800b6ce <_dtoa_r+0x7de>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7d0:	e782      	b.n	800b6d8 <_dtoa_r+0x7e8>
 800b7d2:	d099      	beq.n	800b708 <_dtoa_r+0x818>
 800b7d4:	9a08      	ldr	r2, [sp, #32]
 800b7d6:	331c      	adds	r3, #28
 800b7d8:	441a      	add	r2, r3
 800b7da:	4498      	add	r8, r3
 800b7dc:	441e      	add	r6, r3
 800b7de:	9208      	str	r2, [sp, #32]
 800b7e0:	e792      	b.n	800b708 <_dtoa_r+0x818>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	e7f6      	b.n	800b7d4 <_dtoa_r+0x8e4>
 800b7e6:	9b07      	ldr	r3, [sp, #28]
 800b7e8:	9704      	str	r7, [sp, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dc20      	bgt.n	800b830 <_dtoa_r+0x940>
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	dd1e      	ble.n	800b834 <_dtoa_r+0x944>
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f47f aec0 	bne.w	800b57e <_dtoa_r+0x68e>
 800b7fe:	4621      	mov	r1, r4
 800b800:	2205      	movs	r2, #5
 800b802:	4658      	mov	r0, fp
 800b804:	f000 fa9a 	bl	800bd3c <__multadd>
 800b808:	4601      	mov	r1, r0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4648      	mov	r0, r9
 800b80e:	f000 fcf7 	bl	800c200 <__mcmp>
 800b812:	2800      	cmp	r0, #0
 800b814:	f77f aeb3 	ble.w	800b57e <_dtoa_r+0x68e>
 800b818:	4656      	mov	r6, sl
 800b81a:	2331      	movs	r3, #49	@ 0x31
 800b81c:	f806 3b01 	strb.w	r3, [r6], #1
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	3301      	adds	r3, #1
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	e6ae      	b.n	800b586 <_dtoa_r+0x696>
 800b828:	9c07      	ldr	r4, [sp, #28]
 800b82a:	9704      	str	r7, [sp, #16]
 800b82c:	4625      	mov	r5, r4
 800b82e:	e7f3      	b.n	800b818 <_dtoa_r+0x928>
 800b830:	9b07      	ldr	r3, [sp, #28]
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b836:	2b00      	cmp	r3, #0
 800b838:	f000 8104 	beq.w	800ba44 <_dtoa_r+0xb54>
 800b83c:	2e00      	cmp	r6, #0
 800b83e:	dd05      	ble.n	800b84c <_dtoa_r+0x95c>
 800b840:	4629      	mov	r1, r5
 800b842:	4632      	mov	r2, r6
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fc6f 	bl	800c128 <__lshift>
 800b84a:	4605      	mov	r5, r0
 800b84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d05a      	beq.n	800b908 <_dtoa_r+0xa18>
 800b852:	6869      	ldr	r1, [r5, #4]
 800b854:	4658      	mov	r0, fp
 800b856:	f000 fa0f 	bl	800bc78 <_Balloc>
 800b85a:	4606      	mov	r6, r0
 800b85c:	b928      	cbnz	r0, 800b86a <_dtoa_r+0x97a>
 800b85e:	4b84      	ldr	r3, [pc, #528]	@ (800ba70 <_dtoa_r+0xb80>)
 800b860:	4602      	mov	r2, r0
 800b862:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b866:	f7ff bb5a 	b.w	800af1e <_dtoa_r+0x2e>
 800b86a:	692a      	ldr	r2, [r5, #16]
 800b86c:	3202      	adds	r2, #2
 800b86e:	0092      	lsls	r2, r2, #2
 800b870:	f105 010c 	add.w	r1, r5, #12
 800b874:	300c      	adds	r0, #12
 800b876:	f7ff fa9e 	bl	800adb6 <memcpy>
 800b87a:	2201      	movs	r2, #1
 800b87c:	4631      	mov	r1, r6
 800b87e:	4658      	mov	r0, fp
 800b880:	f000 fc52 	bl	800c128 <__lshift>
 800b884:	f10a 0301 	add.w	r3, sl, #1
 800b888:	9307      	str	r3, [sp, #28]
 800b88a:	9b00      	ldr	r3, [sp, #0]
 800b88c:	4453      	add	r3, sl
 800b88e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b890:	9b02      	ldr	r3, [sp, #8]
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	462f      	mov	r7, r5
 800b898:	930a      	str	r3, [sp, #40]	@ 0x28
 800b89a:	4605      	mov	r5, r0
 800b89c:	9b07      	ldr	r3, [sp, #28]
 800b89e:	4621      	mov	r1, r4
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	4648      	mov	r0, r9
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	f7ff fa9b 	bl	800ade0 <quorem>
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	9002      	str	r0, [sp, #8]
 800b8ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	f000 fca4 	bl	800c200 <__mcmp>
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	9008      	str	r0, [sp, #32]
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4658      	mov	r0, fp
 800b8c0:	f000 fcba 	bl	800c238 <__mdiff>
 800b8c4:	68c2      	ldr	r2, [r0, #12]
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	bb02      	cbnz	r2, 800b90c <_dtoa_r+0xa1c>
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4648      	mov	r0, r9
 800b8ce:	f000 fc97 	bl	800c200 <__mcmp>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4658      	mov	r0, fp
 800b8d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8da:	f000 fa0d 	bl	800bcf8 <_Bfree>
 800b8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8e2:	9e07      	ldr	r6, [sp, #28]
 800b8e4:	ea43 0102 	orr.w	r1, r3, r2
 800b8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ea:	4319      	orrs	r1, r3
 800b8ec:	d110      	bne.n	800b910 <_dtoa_r+0xa20>
 800b8ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8f2:	d029      	beq.n	800b948 <_dtoa_r+0xa58>
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	dd02      	ble.n	800b900 <_dtoa_r+0xa10>
 800b8fa:	9b02      	ldr	r3, [sp, #8]
 800b8fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b900:	9b00      	ldr	r3, [sp, #0]
 800b902:	f883 8000 	strb.w	r8, [r3]
 800b906:	e63f      	b.n	800b588 <_dtoa_r+0x698>
 800b908:	4628      	mov	r0, r5
 800b90a:	e7bb      	b.n	800b884 <_dtoa_r+0x994>
 800b90c:	2201      	movs	r2, #1
 800b90e:	e7e1      	b.n	800b8d4 <_dtoa_r+0x9e4>
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	2b00      	cmp	r3, #0
 800b914:	db04      	blt.n	800b920 <_dtoa_r+0xa30>
 800b916:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b918:	430b      	orrs	r3, r1
 800b91a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b91c:	430b      	orrs	r3, r1
 800b91e:	d120      	bne.n	800b962 <_dtoa_r+0xa72>
 800b920:	2a00      	cmp	r2, #0
 800b922:	dded      	ble.n	800b900 <_dtoa_r+0xa10>
 800b924:	4649      	mov	r1, r9
 800b926:	2201      	movs	r2, #1
 800b928:	4658      	mov	r0, fp
 800b92a:	f000 fbfd 	bl	800c128 <__lshift>
 800b92e:	4621      	mov	r1, r4
 800b930:	4681      	mov	r9, r0
 800b932:	f000 fc65 	bl	800c200 <__mcmp>
 800b936:	2800      	cmp	r0, #0
 800b938:	dc03      	bgt.n	800b942 <_dtoa_r+0xa52>
 800b93a:	d1e1      	bne.n	800b900 <_dtoa_r+0xa10>
 800b93c:	f018 0f01 	tst.w	r8, #1
 800b940:	d0de      	beq.n	800b900 <_dtoa_r+0xa10>
 800b942:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b946:	d1d8      	bne.n	800b8fa <_dtoa_r+0xa0a>
 800b948:	9a00      	ldr	r2, [sp, #0]
 800b94a:	2339      	movs	r3, #57	@ 0x39
 800b94c:	7013      	strb	r3, [r2, #0]
 800b94e:	4633      	mov	r3, r6
 800b950:	461e      	mov	r6, r3
 800b952:	3b01      	subs	r3, #1
 800b954:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b958:	2a39      	cmp	r2, #57	@ 0x39
 800b95a:	d052      	beq.n	800ba02 <_dtoa_r+0xb12>
 800b95c:	3201      	adds	r2, #1
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	e612      	b.n	800b588 <_dtoa_r+0x698>
 800b962:	2a00      	cmp	r2, #0
 800b964:	dd07      	ble.n	800b976 <_dtoa_r+0xa86>
 800b966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b96a:	d0ed      	beq.n	800b948 <_dtoa_r+0xa58>
 800b96c:	9a00      	ldr	r2, [sp, #0]
 800b96e:	f108 0301 	add.w	r3, r8, #1
 800b972:	7013      	strb	r3, [r2, #0]
 800b974:	e608      	b.n	800b588 <_dtoa_r+0x698>
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	9a07      	ldr	r2, [sp, #28]
 800b97a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b97e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b980:	4293      	cmp	r3, r2
 800b982:	d028      	beq.n	800b9d6 <_dtoa_r+0xae6>
 800b984:	4649      	mov	r1, r9
 800b986:	2300      	movs	r3, #0
 800b988:	220a      	movs	r2, #10
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 f9d6 	bl	800bd3c <__multadd>
 800b990:	42af      	cmp	r7, r5
 800b992:	4681      	mov	r9, r0
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	f04f 020a 	mov.w	r2, #10
 800b99c:	4639      	mov	r1, r7
 800b99e:	4658      	mov	r0, fp
 800b9a0:	d107      	bne.n	800b9b2 <_dtoa_r+0xac2>
 800b9a2:	f000 f9cb 	bl	800bd3c <__multadd>
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	9b07      	ldr	r3, [sp, #28]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	e774      	b.n	800b89c <_dtoa_r+0x9ac>
 800b9b2:	f000 f9c3 	bl	800bd3c <__multadd>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	220a      	movs	r2, #10
 800b9be:	4658      	mov	r0, fp
 800b9c0:	f000 f9bc 	bl	800bd3c <__multadd>
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	e7f0      	b.n	800b9aa <_dtoa_r+0xaba>
 800b9c8:	9b00      	ldr	r3, [sp, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bfcc      	ite	gt
 800b9ce:	461e      	movgt	r6, r3
 800b9d0:	2601      	movle	r6, #1
 800b9d2:	4456      	add	r6, sl
 800b9d4:	2700      	movs	r7, #0
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	2201      	movs	r2, #1
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 fba4 	bl	800c128 <__lshift>
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	f000 fc0c 	bl	800c200 <__mcmp>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	dcb0      	bgt.n	800b94e <_dtoa_r+0xa5e>
 800b9ec:	d102      	bne.n	800b9f4 <_dtoa_r+0xb04>
 800b9ee:	f018 0f01 	tst.w	r8, #1
 800b9f2:	d1ac      	bne.n	800b94e <_dtoa_r+0xa5e>
 800b9f4:	4633      	mov	r3, r6
 800b9f6:	461e      	mov	r6, r3
 800b9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9fc:	2a30      	cmp	r2, #48	@ 0x30
 800b9fe:	d0fa      	beq.n	800b9f6 <_dtoa_r+0xb06>
 800ba00:	e5c2      	b.n	800b588 <_dtoa_r+0x698>
 800ba02:	459a      	cmp	sl, r3
 800ba04:	d1a4      	bne.n	800b950 <_dtoa_r+0xa60>
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	2331      	movs	r3, #49	@ 0x31
 800ba0e:	f88a 3000 	strb.w	r3, [sl]
 800ba12:	e5b9      	b.n	800b588 <_dtoa_r+0x698>
 800ba14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba74 <_dtoa_r+0xb84>
 800ba1a:	b11b      	cbz	r3, 800ba24 <_dtoa_r+0xb34>
 800ba1c:	f10a 0308 	add.w	r3, sl, #8
 800ba20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	4650      	mov	r0, sl
 800ba26:	b019      	add	sp, #100	@ 0x64
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	f77f ae37 	ble.w	800b6a2 <_dtoa_r+0x7b2>
 800ba34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba38:	2001      	movs	r0, #1
 800ba3a:	e655      	b.n	800b6e8 <_dtoa_r+0x7f8>
 800ba3c:	9b00      	ldr	r3, [sp, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f77f aed6 	ble.w	800b7f0 <_dtoa_r+0x900>
 800ba44:	4656      	mov	r6, sl
 800ba46:	4621      	mov	r1, r4
 800ba48:	4648      	mov	r0, r9
 800ba4a:	f7ff f9c9 	bl	800ade0 <quorem>
 800ba4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba52:	f806 8b01 	strb.w	r8, [r6], #1
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	eba6 020a 	sub.w	r2, r6, sl
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	ddb3      	ble.n	800b9c8 <_dtoa_r+0xad8>
 800ba60:	4649      	mov	r1, r9
 800ba62:	2300      	movs	r3, #0
 800ba64:	220a      	movs	r2, #10
 800ba66:	4658      	mov	r0, fp
 800ba68:	f000 f968 	bl	800bd3c <__multadd>
 800ba6c:	4681      	mov	r9, r0
 800ba6e:	e7ea      	b.n	800ba46 <_dtoa_r+0xb56>
 800ba70:	0800e679 	.word	0x0800e679
 800ba74:	0800e5fd 	.word	0x0800e5fd

0800ba78 <_free_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	d041      	beq.n	800bb04 <_free_r+0x8c>
 800ba80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba84:	1f0c      	subs	r4, r1, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	18e4      	addlt	r4, r4, r3
 800ba8c:	f000 f8e8 	bl	800bc60 <__malloc_lock>
 800ba90:	4a1d      	ldr	r2, [pc, #116]	@ (800bb08 <_free_r+0x90>)
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	b933      	cbnz	r3, 800baa4 <_free_r+0x2c>
 800ba96:	6063      	str	r3, [r4, #4]
 800ba98:	6014      	str	r4, [r2, #0]
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa0:	f000 b8e4 	b.w	800bc6c <__malloc_unlock>
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d908      	bls.n	800baba <_free_r+0x42>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	1821      	adds	r1, r4, r0
 800baac:	428b      	cmp	r3, r1
 800baae:	bf01      	itttt	eq
 800bab0:	6819      	ldreq	r1, [r3, #0]
 800bab2:	685b      	ldreq	r3, [r3, #4]
 800bab4:	1809      	addeq	r1, r1, r0
 800bab6:	6021      	streq	r1, [r4, #0]
 800bab8:	e7ed      	b.n	800ba96 <_free_r+0x1e>
 800baba:	461a      	mov	r2, r3
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	b10b      	cbz	r3, 800bac4 <_free_r+0x4c>
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	d9fa      	bls.n	800baba <_free_r+0x42>
 800bac4:	6811      	ldr	r1, [r2, #0]
 800bac6:	1850      	adds	r0, r2, r1
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d10b      	bne.n	800bae4 <_free_r+0x6c>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	4401      	add	r1, r0
 800bad0:	1850      	adds	r0, r2, r1
 800bad2:	4283      	cmp	r3, r0
 800bad4:	6011      	str	r1, [r2, #0]
 800bad6:	d1e0      	bne.n	800ba9a <_free_r+0x22>
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	6053      	str	r3, [r2, #4]
 800bade:	4408      	add	r0, r1
 800bae0:	6010      	str	r0, [r2, #0]
 800bae2:	e7da      	b.n	800ba9a <_free_r+0x22>
 800bae4:	d902      	bls.n	800baec <_free_r+0x74>
 800bae6:	230c      	movs	r3, #12
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	e7d6      	b.n	800ba9a <_free_r+0x22>
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	1821      	adds	r1, r4, r0
 800baf0:	428b      	cmp	r3, r1
 800baf2:	bf04      	itt	eq
 800baf4:	6819      	ldreq	r1, [r3, #0]
 800baf6:	685b      	ldreq	r3, [r3, #4]
 800baf8:	6063      	str	r3, [r4, #4]
 800bafa:	bf04      	itt	eq
 800bafc:	1809      	addeq	r1, r1, r0
 800bafe:	6021      	streq	r1, [r4, #0]
 800bb00:	6054      	str	r4, [r2, #4]
 800bb02:	e7ca      	b.n	800ba9a <_free_r+0x22>
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	20004fc4 	.word	0x20004fc4

0800bb0c <malloc>:
 800bb0c:	4b02      	ldr	r3, [pc, #8]	@ (800bb18 <malloc+0xc>)
 800bb0e:	4601      	mov	r1, r0
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	f000 b825 	b.w	800bb60 <_malloc_r>
 800bb16:	bf00      	nop
 800bb18:	20000020 	.word	0x20000020

0800bb1c <sbrk_aligned>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	4e0f      	ldr	r6, [pc, #60]	@ (800bb5c <sbrk_aligned+0x40>)
 800bb20:	460c      	mov	r4, r1
 800bb22:	6831      	ldr	r1, [r6, #0]
 800bb24:	4605      	mov	r5, r0
 800bb26:	b911      	cbnz	r1, 800bb2e <sbrk_aligned+0x12>
 800bb28:	f001 fe0c 	bl	800d744 <_sbrk_r>
 800bb2c:	6030      	str	r0, [r6, #0]
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f001 fe07 	bl	800d744 <_sbrk_r>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d103      	bne.n	800bb42 <sbrk_aligned+0x26>
 800bb3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bb3e:	4620      	mov	r0, r4
 800bb40:	bd70      	pop	{r4, r5, r6, pc}
 800bb42:	1cc4      	adds	r4, r0, #3
 800bb44:	f024 0403 	bic.w	r4, r4, #3
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d0f8      	beq.n	800bb3e <sbrk_aligned+0x22>
 800bb4c:	1a21      	subs	r1, r4, r0
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f001 fdf8 	bl	800d744 <_sbrk_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d1f2      	bne.n	800bb3e <sbrk_aligned+0x22>
 800bb58:	e7ef      	b.n	800bb3a <sbrk_aligned+0x1e>
 800bb5a:	bf00      	nop
 800bb5c:	20004fc0 	.word	0x20004fc0

0800bb60 <_malloc_r>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	1ccd      	adds	r5, r1, #3
 800bb66:	f025 0503 	bic.w	r5, r5, #3
 800bb6a:	3508      	adds	r5, #8
 800bb6c:	2d0c      	cmp	r5, #12
 800bb6e:	bf38      	it	cc
 800bb70:	250c      	movcc	r5, #12
 800bb72:	2d00      	cmp	r5, #0
 800bb74:	4606      	mov	r6, r0
 800bb76:	db01      	blt.n	800bb7c <_malloc_r+0x1c>
 800bb78:	42a9      	cmp	r1, r5
 800bb7a:	d904      	bls.n	800bb86 <_malloc_r+0x26>
 800bb7c:	230c      	movs	r3, #12
 800bb7e:	6033      	str	r3, [r6, #0]
 800bb80:	2000      	movs	r0, #0
 800bb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc5c <_malloc_r+0xfc>
 800bb8a:	f000 f869 	bl	800bc60 <__malloc_lock>
 800bb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb92:	461c      	mov	r4, r3
 800bb94:	bb44      	cbnz	r4, 800bbe8 <_malloc_r+0x88>
 800bb96:	4629      	mov	r1, r5
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff ffbf 	bl	800bb1c <sbrk_aligned>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	4604      	mov	r4, r0
 800bba2:	d158      	bne.n	800bc56 <_malloc_r+0xf6>
 800bba4:	f8d8 4000 	ldr.w	r4, [r8]
 800bba8:	4627      	mov	r7, r4
 800bbaa:	2f00      	cmp	r7, #0
 800bbac:	d143      	bne.n	800bc36 <_malloc_r+0xd6>
 800bbae:	2c00      	cmp	r4, #0
 800bbb0:	d04b      	beq.n	800bc4a <_malloc_r+0xea>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	eb04 0903 	add.w	r9, r4, r3
 800bbbc:	f001 fdc2 	bl	800d744 <_sbrk_r>
 800bbc0:	4581      	cmp	r9, r0
 800bbc2:	d142      	bne.n	800bc4a <_malloc_r+0xea>
 800bbc4:	6821      	ldr	r1, [r4, #0]
 800bbc6:	1a6d      	subs	r5, r5, r1
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7ff ffa6 	bl	800bb1c <sbrk_aligned>
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d03a      	beq.n	800bc4a <_malloc_r+0xea>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	442b      	add	r3, r5
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	f8d8 3000 	ldr.w	r3, [r8]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	bb62      	cbnz	r2, 800bc3c <_malloc_r+0xdc>
 800bbe2:	f8c8 7000 	str.w	r7, [r8]
 800bbe6:	e00f      	b.n	800bc08 <_malloc_r+0xa8>
 800bbe8:	6822      	ldr	r2, [r4, #0]
 800bbea:	1b52      	subs	r2, r2, r5
 800bbec:	d420      	bmi.n	800bc30 <_malloc_r+0xd0>
 800bbee:	2a0b      	cmp	r2, #11
 800bbf0:	d917      	bls.n	800bc22 <_malloc_r+0xc2>
 800bbf2:	1961      	adds	r1, r4, r5
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	6025      	str	r5, [r4, #0]
 800bbf8:	bf18      	it	ne
 800bbfa:	6059      	strne	r1, [r3, #4]
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	bf08      	it	eq
 800bc00:	f8c8 1000 	streq.w	r1, [r8]
 800bc04:	5162      	str	r2, [r4, r5]
 800bc06:	604b      	str	r3, [r1, #4]
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f000 f82f 	bl	800bc6c <__malloc_unlock>
 800bc0e:	f104 000b 	add.w	r0, r4, #11
 800bc12:	1d23      	adds	r3, r4, #4
 800bc14:	f020 0007 	bic.w	r0, r0, #7
 800bc18:	1ac2      	subs	r2, r0, r3
 800bc1a:	bf1c      	itt	ne
 800bc1c:	1a1b      	subne	r3, r3, r0
 800bc1e:	50a3      	strne	r3, [r4, r2]
 800bc20:	e7af      	b.n	800bb82 <_malloc_r+0x22>
 800bc22:	6862      	ldr	r2, [r4, #4]
 800bc24:	42a3      	cmp	r3, r4
 800bc26:	bf0c      	ite	eq
 800bc28:	f8c8 2000 	streq.w	r2, [r8]
 800bc2c:	605a      	strne	r2, [r3, #4]
 800bc2e:	e7eb      	b.n	800bc08 <_malloc_r+0xa8>
 800bc30:	4623      	mov	r3, r4
 800bc32:	6864      	ldr	r4, [r4, #4]
 800bc34:	e7ae      	b.n	800bb94 <_malloc_r+0x34>
 800bc36:	463c      	mov	r4, r7
 800bc38:	687f      	ldr	r7, [r7, #4]
 800bc3a:	e7b6      	b.n	800bbaa <_malloc_r+0x4a>
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	42a3      	cmp	r3, r4
 800bc42:	d1fb      	bne.n	800bc3c <_malloc_r+0xdc>
 800bc44:	2300      	movs	r3, #0
 800bc46:	6053      	str	r3, [r2, #4]
 800bc48:	e7de      	b.n	800bc08 <_malloc_r+0xa8>
 800bc4a:	230c      	movs	r3, #12
 800bc4c:	6033      	str	r3, [r6, #0]
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f000 f80c 	bl	800bc6c <__malloc_unlock>
 800bc54:	e794      	b.n	800bb80 <_malloc_r+0x20>
 800bc56:	6005      	str	r5, [r0, #0]
 800bc58:	e7d6      	b.n	800bc08 <_malloc_r+0xa8>
 800bc5a:	bf00      	nop
 800bc5c:	20004fc4 	.word	0x20004fc4

0800bc60 <__malloc_lock>:
 800bc60:	4801      	ldr	r0, [pc, #4]	@ (800bc68 <__malloc_lock+0x8>)
 800bc62:	f7ff b8a6 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800bc66:	bf00      	nop
 800bc68:	20004fbc 	.word	0x20004fbc

0800bc6c <__malloc_unlock>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	@ (800bc74 <__malloc_unlock+0x8>)
 800bc6e:	f7ff b8a1 	b.w	800adb4 <__retarget_lock_release_recursive>
 800bc72:	bf00      	nop
 800bc74:	20004fbc 	.word	0x20004fbc

0800bc78 <_Balloc>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	69c6      	ldr	r6, [r0, #28]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	b976      	cbnz	r6, 800bca0 <_Balloc+0x28>
 800bc82:	2010      	movs	r0, #16
 800bc84:	f7ff ff42 	bl	800bb0c <malloc>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	61e0      	str	r0, [r4, #28]
 800bc8c:	b920      	cbnz	r0, 800bc98 <_Balloc+0x20>
 800bc8e:	4b18      	ldr	r3, [pc, #96]	@ (800bcf0 <_Balloc+0x78>)
 800bc90:	4818      	ldr	r0, [pc, #96]	@ (800bcf4 <_Balloc+0x7c>)
 800bc92:	216b      	movs	r1, #107	@ 0x6b
 800bc94:	f001 fd70 	bl	800d778 <__assert_func>
 800bc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc9c:	6006      	str	r6, [r0, #0]
 800bc9e:	60c6      	str	r6, [r0, #12]
 800bca0:	69e6      	ldr	r6, [r4, #28]
 800bca2:	68f3      	ldr	r3, [r6, #12]
 800bca4:	b183      	cbz	r3, 800bcc8 <_Balloc+0x50>
 800bca6:	69e3      	ldr	r3, [r4, #28]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcae:	b9b8      	cbnz	r0, 800bce0 <_Balloc+0x68>
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	fa01 f605 	lsl.w	r6, r1, r5
 800bcb6:	1d72      	adds	r2, r6, #5
 800bcb8:	0092      	lsls	r2, r2, #2
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f001 fd7a 	bl	800d7b4 <_calloc_r>
 800bcc0:	b160      	cbz	r0, 800bcdc <_Balloc+0x64>
 800bcc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcc6:	e00e      	b.n	800bce6 <_Balloc+0x6e>
 800bcc8:	2221      	movs	r2, #33	@ 0x21
 800bcca:	2104      	movs	r1, #4
 800bccc:	4620      	mov	r0, r4
 800bcce:	f001 fd71 	bl	800d7b4 <_calloc_r>
 800bcd2:	69e3      	ldr	r3, [r4, #28]
 800bcd4:	60f0      	str	r0, [r6, #12]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e4      	bne.n	800bca6 <_Balloc+0x2e>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	6802      	ldr	r2, [r0, #0]
 800bce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bce6:	2300      	movs	r3, #0
 800bce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcec:	e7f7      	b.n	800bcde <_Balloc+0x66>
 800bcee:	bf00      	nop
 800bcf0:	0800e60a 	.word	0x0800e60a
 800bcf4:	0800e68a 	.word	0x0800e68a

0800bcf8 <_Bfree>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	69c6      	ldr	r6, [r0, #28]
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	460c      	mov	r4, r1
 800bd00:	b976      	cbnz	r6, 800bd20 <_Bfree+0x28>
 800bd02:	2010      	movs	r0, #16
 800bd04:	f7ff ff02 	bl	800bb0c <malloc>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	61e8      	str	r0, [r5, #28]
 800bd0c:	b920      	cbnz	r0, 800bd18 <_Bfree+0x20>
 800bd0e:	4b09      	ldr	r3, [pc, #36]	@ (800bd34 <_Bfree+0x3c>)
 800bd10:	4809      	ldr	r0, [pc, #36]	@ (800bd38 <_Bfree+0x40>)
 800bd12:	218f      	movs	r1, #143	@ 0x8f
 800bd14:	f001 fd30 	bl	800d778 <__assert_func>
 800bd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd1c:	6006      	str	r6, [r0, #0]
 800bd1e:	60c6      	str	r6, [r0, #12]
 800bd20:	b13c      	cbz	r4, 800bd32 <_Bfree+0x3a>
 800bd22:	69eb      	ldr	r3, [r5, #28]
 800bd24:	6862      	ldr	r2, [r4, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd2c:	6021      	str	r1, [r4, #0]
 800bd2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	0800e60a 	.word	0x0800e60a
 800bd38:	0800e68a 	.word	0x0800e68a

0800bd3c <__multadd>:
 800bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd40:	690d      	ldr	r5, [r1, #16]
 800bd42:	4607      	mov	r7, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	461e      	mov	r6, r3
 800bd48:	f101 0c14 	add.w	ip, r1, #20
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	f8dc 3000 	ldr.w	r3, [ip]
 800bd52:	b299      	uxth	r1, r3
 800bd54:	fb02 6101 	mla	r1, r2, r1, r6
 800bd58:	0c1e      	lsrs	r6, r3, #16
 800bd5a:	0c0b      	lsrs	r3, r1, #16
 800bd5c:	fb02 3306 	mla	r3, r2, r6, r3
 800bd60:	b289      	uxth	r1, r1
 800bd62:	3001      	adds	r0, #1
 800bd64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd68:	4285      	cmp	r5, r0
 800bd6a:	f84c 1b04 	str.w	r1, [ip], #4
 800bd6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd72:	dcec      	bgt.n	800bd4e <__multadd+0x12>
 800bd74:	b30e      	cbz	r6, 800bdba <__multadd+0x7e>
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	42ab      	cmp	r3, r5
 800bd7a:	dc19      	bgt.n	800bdb0 <__multadd+0x74>
 800bd7c:	6861      	ldr	r1, [r4, #4]
 800bd7e:	4638      	mov	r0, r7
 800bd80:	3101      	adds	r1, #1
 800bd82:	f7ff ff79 	bl	800bc78 <_Balloc>
 800bd86:	4680      	mov	r8, r0
 800bd88:	b928      	cbnz	r0, 800bd96 <__multadd+0x5a>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc0 <__multadd+0x84>)
 800bd8e:	480d      	ldr	r0, [pc, #52]	@ (800bdc4 <__multadd+0x88>)
 800bd90:	21ba      	movs	r1, #186	@ 0xba
 800bd92:	f001 fcf1 	bl	800d778 <__assert_func>
 800bd96:	6922      	ldr	r2, [r4, #16]
 800bd98:	3202      	adds	r2, #2
 800bd9a:	f104 010c 	add.w	r1, r4, #12
 800bd9e:	0092      	lsls	r2, r2, #2
 800bda0:	300c      	adds	r0, #12
 800bda2:	f7ff f808 	bl	800adb6 <memcpy>
 800bda6:	4621      	mov	r1, r4
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f7ff ffa5 	bl	800bcf8 <_Bfree>
 800bdae:	4644      	mov	r4, r8
 800bdb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	615e      	str	r6, [r3, #20]
 800bdb8:	6125      	str	r5, [r4, #16]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc0:	0800e679 	.word	0x0800e679
 800bdc4:	0800e68a 	.word	0x0800e68a

0800bdc8 <__s2b>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	460c      	mov	r4, r1
 800bdce:	4615      	mov	r5, r2
 800bdd0:	461f      	mov	r7, r3
 800bdd2:	2209      	movs	r2, #9
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bddc:	2100      	movs	r1, #0
 800bdde:	2201      	movs	r2, #1
 800bde0:	429a      	cmp	r2, r3
 800bde2:	db09      	blt.n	800bdf8 <__s2b+0x30>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff ff47 	bl	800bc78 <_Balloc>
 800bdea:	b940      	cbnz	r0, 800bdfe <__s2b+0x36>
 800bdec:	4602      	mov	r2, r0
 800bdee:	4b19      	ldr	r3, [pc, #100]	@ (800be54 <__s2b+0x8c>)
 800bdf0:	4819      	ldr	r0, [pc, #100]	@ (800be58 <__s2b+0x90>)
 800bdf2:	21d3      	movs	r1, #211	@ 0xd3
 800bdf4:	f001 fcc0 	bl	800d778 <__assert_func>
 800bdf8:	0052      	lsls	r2, r2, #1
 800bdfa:	3101      	adds	r1, #1
 800bdfc:	e7f0      	b.n	800bde0 <__s2b+0x18>
 800bdfe:	9b08      	ldr	r3, [sp, #32]
 800be00:	6143      	str	r3, [r0, #20]
 800be02:	2d09      	cmp	r5, #9
 800be04:	f04f 0301 	mov.w	r3, #1
 800be08:	6103      	str	r3, [r0, #16]
 800be0a:	dd16      	ble.n	800be3a <__s2b+0x72>
 800be0c:	f104 0909 	add.w	r9, r4, #9
 800be10:	46c8      	mov	r8, r9
 800be12:	442c      	add	r4, r5
 800be14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be18:	4601      	mov	r1, r0
 800be1a:	3b30      	subs	r3, #48	@ 0x30
 800be1c:	220a      	movs	r2, #10
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff ff8c 	bl	800bd3c <__multadd>
 800be24:	45a0      	cmp	r8, r4
 800be26:	d1f5      	bne.n	800be14 <__s2b+0x4c>
 800be28:	f1a5 0408 	sub.w	r4, r5, #8
 800be2c:	444c      	add	r4, r9
 800be2e:	1b2d      	subs	r5, r5, r4
 800be30:	1963      	adds	r3, r4, r5
 800be32:	42bb      	cmp	r3, r7
 800be34:	db04      	blt.n	800be40 <__s2b+0x78>
 800be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be3a:	340a      	adds	r4, #10
 800be3c:	2509      	movs	r5, #9
 800be3e:	e7f6      	b.n	800be2e <__s2b+0x66>
 800be40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be44:	4601      	mov	r1, r0
 800be46:	3b30      	subs	r3, #48	@ 0x30
 800be48:	220a      	movs	r2, #10
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ff76 	bl	800bd3c <__multadd>
 800be50:	e7ee      	b.n	800be30 <__s2b+0x68>
 800be52:	bf00      	nop
 800be54:	0800e679 	.word	0x0800e679
 800be58:	0800e68a 	.word	0x0800e68a

0800be5c <__hi0bits>:
 800be5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be60:	4603      	mov	r3, r0
 800be62:	bf36      	itet	cc
 800be64:	0403      	lslcc	r3, r0, #16
 800be66:	2000      	movcs	r0, #0
 800be68:	2010      	movcc	r0, #16
 800be6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be6e:	bf3c      	itt	cc
 800be70:	021b      	lslcc	r3, r3, #8
 800be72:	3008      	addcc	r0, #8
 800be74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be78:	bf3c      	itt	cc
 800be7a:	011b      	lslcc	r3, r3, #4
 800be7c:	3004      	addcc	r0, #4
 800be7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be82:	bf3c      	itt	cc
 800be84:	009b      	lslcc	r3, r3, #2
 800be86:	3002      	addcc	r0, #2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	db05      	blt.n	800be98 <__hi0bits+0x3c>
 800be8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be90:	f100 0001 	add.w	r0, r0, #1
 800be94:	bf08      	it	eq
 800be96:	2020      	moveq	r0, #32
 800be98:	4770      	bx	lr

0800be9a <__lo0bits>:
 800be9a:	6803      	ldr	r3, [r0, #0]
 800be9c:	4602      	mov	r2, r0
 800be9e:	f013 0007 	ands.w	r0, r3, #7
 800bea2:	d00b      	beq.n	800bebc <__lo0bits+0x22>
 800bea4:	07d9      	lsls	r1, r3, #31
 800bea6:	d421      	bmi.n	800beec <__lo0bits+0x52>
 800bea8:	0798      	lsls	r0, r3, #30
 800beaa:	bf49      	itett	mi
 800beac:	085b      	lsrmi	r3, r3, #1
 800beae:	089b      	lsrpl	r3, r3, #2
 800beb0:	2001      	movmi	r0, #1
 800beb2:	6013      	strmi	r3, [r2, #0]
 800beb4:	bf5c      	itt	pl
 800beb6:	6013      	strpl	r3, [r2, #0]
 800beb8:	2002      	movpl	r0, #2
 800beba:	4770      	bx	lr
 800bebc:	b299      	uxth	r1, r3
 800bebe:	b909      	cbnz	r1, 800bec4 <__lo0bits+0x2a>
 800bec0:	0c1b      	lsrs	r3, r3, #16
 800bec2:	2010      	movs	r0, #16
 800bec4:	b2d9      	uxtb	r1, r3
 800bec6:	b909      	cbnz	r1, 800becc <__lo0bits+0x32>
 800bec8:	3008      	adds	r0, #8
 800beca:	0a1b      	lsrs	r3, r3, #8
 800becc:	0719      	lsls	r1, r3, #28
 800bece:	bf04      	itt	eq
 800bed0:	091b      	lsreq	r3, r3, #4
 800bed2:	3004      	addeq	r0, #4
 800bed4:	0799      	lsls	r1, r3, #30
 800bed6:	bf04      	itt	eq
 800bed8:	089b      	lsreq	r3, r3, #2
 800beda:	3002      	addeq	r0, #2
 800bedc:	07d9      	lsls	r1, r3, #31
 800bede:	d403      	bmi.n	800bee8 <__lo0bits+0x4e>
 800bee0:	085b      	lsrs	r3, r3, #1
 800bee2:	f100 0001 	add.w	r0, r0, #1
 800bee6:	d003      	beq.n	800bef0 <__lo0bits+0x56>
 800bee8:	6013      	str	r3, [r2, #0]
 800beea:	4770      	bx	lr
 800beec:	2000      	movs	r0, #0
 800beee:	4770      	bx	lr
 800bef0:	2020      	movs	r0, #32
 800bef2:	4770      	bx	lr

0800bef4 <__i2b>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	460c      	mov	r4, r1
 800bef8:	2101      	movs	r1, #1
 800befa:	f7ff febd 	bl	800bc78 <_Balloc>
 800befe:	4602      	mov	r2, r0
 800bf00:	b928      	cbnz	r0, 800bf0e <__i2b+0x1a>
 800bf02:	4b05      	ldr	r3, [pc, #20]	@ (800bf18 <__i2b+0x24>)
 800bf04:	4805      	ldr	r0, [pc, #20]	@ (800bf1c <__i2b+0x28>)
 800bf06:	f240 1145 	movw	r1, #325	@ 0x145
 800bf0a:	f001 fc35 	bl	800d778 <__assert_func>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	6144      	str	r4, [r0, #20]
 800bf12:	6103      	str	r3, [r0, #16]
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	bf00      	nop
 800bf18:	0800e679 	.word	0x0800e679
 800bf1c:	0800e68a 	.word	0x0800e68a

0800bf20 <__multiply>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	4614      	mov	r4, r2
 800bf26:	690a      	ldr	r2, [r1, #16]
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	bfa8      	it	ge
 800bf2e:	4623      	movge	r3, r4
 800bf30:	460f      	mov	r7, r1
 800bf32:	bfa4      	itt	ge
 800bf34:	460c      	movge	r4, r1
 800bf36:	461f      	movge	r7, r3
 800bf38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf40:	68a3      	ldr	r3, [r4, #8]
 800bf42:	6861      	ldr	r1, [r4, #4]
 800bf44:	eb0a 0609 	add.w	r6, sl, r9
 800bf48:	42b3      	cmp	r3, r6
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	bfb8      	it	lt
 800bf4e:	3101      	addlt	r1, #1
 800bf50:	f7ff fe92 	bl	800bc78 <_Balloc>
 800bf54:	b930      	cbnz	r0, 800bf64 <__multiply+0x44>
 800bf56:	4602      	mov	r2, r0
 800bf58:	4b44      	ldr	r3, [pc, #272]	@ (800c06c <__multiply+0x14c>)
 800bf5a:	4845      	ldr	r0, [pc, #276]	@ (800c070 <__multiply+0x150>)
 800bf5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf60:	f001 fc0a 	bl	800d778 <__assert_func>
 800bf64:	f100 0514 	add.w	r5, r0, #20
 800bf68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	2200      	movs	r2, #0
 800bf70:	4543      	cmp	r3, r8
 800bf72:	d321      	bcc.n	800bfb8 <__multiply+0x98>
 800bf74:	f107 0114 	add.w	r1, r7, #20
 800bf78:	f104 0214 	add.w	r2, r4, #20
 800bf7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf84:	9302      	str	r3, [sp, #8]
 800bf86:	1b13      	subs	r3, r2, r4
 800bf88:	3b15      	subs	r3, #21
 800bf8a:	f023 0303 	bic.w	r3, r3, #3
 800bf8e:	3304      	adds	r3, #4
 800bf90:	f104 0715 	add.w	r7, r4, #21
 800bf94:	42ba      	cmp	r2, r7
 800bf96:	bf38      	it	cc
 800bf98:	2304      	movcc	r3, #4
 800bf9a:	9301      	str	r3, [sp, #4]
 800bf9c:	9b02      	ldr	r3, [sp, #8]
 800bf9e:	9103      	str	r1, [sp, #12]
 800bfa0:	428b      	cmp	r3, r1
 800bfa2:	d80c      	bhi.n	800bfbe <__multiply+0x9e>
 800bfa4:	2e00      	cmp	r6, #0
 800bfa6:	dd03      	ble.n	800bfb0 <__multiply+0x90>
 800bfa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d05b      	beq.n	800c068 <__multiply+0x148>
 800bfb0:	6106      	str	r6, [r0, #16]
 800bfb2:	b005      	add	sp, #20
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	f843 2b04 	str.w	r2, [r3], #4
 800bfbc:	e7d8      	b.n	800bf70 <__multiply+0x50>
 800bfbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfc2:	f1ba 0f00 	cmp.w	sl, #0
 800bfc6:	d024      	beq.n	800c012 <__multiply+0xf2>
 800bfc8:	f104 0e14 	add.w	lr, r4, #20
 800bfcc:	46a9      	mov	r9, r5
 800bfce:	f04f 0c00 	mov.w	ip, #0
 800bfd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfd6:	f8d9 3000 	ldr.w	r3, [r9]
 800bfda:	fa1f fb87 	uxth.w	fp, r7
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfe4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bfe8:	f8d9 7000 	ldr.w	r7, [r9]
 800bfec:	4463      	add	r3, ip
 800bfee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bff2:	fb0a c70b 	mla	r7, sl, fp, ip
 800bff6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c000:	4572      	cmp	r2, lr
 800c002:	f849 3b04 	str.w	r3, [r9], #4
 800c006:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c00a:	d8e2      	bhi.n	800bfd2 <__multiply+0xb2>
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	f845 c003 	str.w	ip, [r5, r3]
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c018:	3104      	adds	r1, #4
 800c01a:	f1b9 0f00 	cmp.w	r9, #0
 800c01e:	d021      	beq.n	800c064 <__multiply+0x144>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	f104 0c14 	add.w	ip, r4, #20
 800c026:	46ae      	mov	lr, r5
 800c028:	f04f 0a00 	mov.w	sl, #0
 800c02c:	f8bc b000 	ldrh.w	fp, [ip]
 800c030:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c034:	fb09 770b 	mla	r7, r9, fp, r7
 800c038:	4457      	add	r7, sl
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c040:	f84e 3b04 	str.w	r3, [lr], #4
 800c044:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c04c:	f8be 3000 	ldrh.w	r3, [lr]
 800c050:	fb09 330a 	mla	r3, r9, sl, r3
 800c054:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c058:	4562      	cmp	r2, ip
 800c05a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c05e:	d8e5      	bhi.n	800c02c <__multiply+0x10c>
 800c060:	9f01      	ldr	r7, [sp, #4]
 800c062:	51eb      	str	r3, [r5, r7]
 800c064:	3504      	adds	r5, #4
 800c066:	e799      	b.n	800bf9c <__multiply+0x7c>
 800c068:	3e01      	subs	r6, #1
 800c06a:	e79b      	b.n	800bfa4 <__multiply+0x84>
 800c06c:	0800e679 	.word	0x0800e679
 800c070:	0800e68a 	.word	0x0800e68a

0800c074 <__pow5mult>:
 800c074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c078:	4615      	mov	r5, r2
 800c07a:	f012 0203 	ands.w	r2, r2, #3
 800c07e:	4607      	mov	r7, r0
 800c080:	460e      	mov	r6, r1
 800c082:	d007      	beq.n	800c094 <__pow5mult+0x20>
 800c084:	4c25      	ldr	r4, [pc, #148]	@ (800c11c <__pow5mult+0xa8>)
 800c086:	3a01      	subs	r2, #1
 800c088:	2300      	movs	r3, #0
 800c08a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c08e:	f7ff fe55 	bl	800bd3c <__multadd>
 800c092:	4606      	mov	r6, r0
 800c094:	10ad      	asrs	r5, r5, #2
 800c096:	d03d      	beq.n	800c114 <__pow5mult+0xa0>
 800c098:	69fc      	ldr	r4, [r7, #28]
 800c09a:	b97c      	cbnz	r4, 800c0bc <__pow5mult+0x48>
 800c09c:	2010      	movs	r0, #16
 800c09e:	f7ff fd35 	bl	800bb0c <malloc>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	61f8      	str	r0, [r7, #28]
 800c0a6:	b928      	cbnz	r0, 800c0b4 <__pow5mult+0x40>
 800c0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800c120 <__pow5mult+0xac>)
 800c0aa:	481e      	ldr	r0, [pc, #120]	@ (800c124 <__pow5mult+0xb0>)
 800c0ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0b0:	f001 fb62 	bl	800d778 <__assert_func>
 800c0b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0b8:	6004      	str	r4, [r0, #0]
 800c0ba:	60c4      	str	r4, [r0, #12]
 800c0bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0c4:	b94c      	cbnz	r4, 800c0da <__pow5mult+0x66>
 800c0c6:	f240 2171 	movw	r1, #625	@ 0x271
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	f7ff ff12 	bl	800bef4 <__i2b>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	07eb      	lsls	r3, r5, #31
 800c0e0:	d50a      	bpl.n	800c0f8 <__pow5mult+0x84>
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f7ff ff1a 	bl	800bf20 <__multiply>
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	4680      	mov	r8, r0
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff fe01 	bl	800bcf8 <_Bfree>
 800c0f6:	4646      	mov	r6, r8
 800c0f8:	106d      	asrs	r5, r5, #1
 800c0fa:	d00b      	beq.n	800c114 <__pow5mult+0xa0>
 800c0fc:	6820      	ldr	r0, [r4, #0]
 800c0fe:	b938      	cbnz	r0, 800c110 <__pow5mult+0x9c>
 800c100:	4622      	mov	r2, r4
 800c102:	4621      	mov	r1, r4
 800c104:	4638      	mov	r0, r7
 800c106:	f7ff ff0b 	bl	800bf20 <__multiply>
 800c10a:	6020      	str	r0, [r4, #0]
 800c10c:	f8c0 9000 	str.w	r9, [r0]
 800c110:	4604      	mov	r4, r0
 800c112:	e7e4      	b.n	800c0de <__pow5mult+0x6a>
 800c114:	4630      	mov	r0, r6
 800c116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c11a:	bf00      	nop
 800c11c:	0800e6e4 	.word	0x0800e6e4
 800c120:	0800e60a 	.word	0x0800e60a
 800c124:	0800e68a 	.word	0x0800e68a

0800c128 <__lshift>:
 800c128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	6849      	ldr	r1, [r1, #4]
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	4607      	mov	r7, r0
 800c13a:	4691      	mov	r9, r2
 800c13c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c140:	f108 0601 	add.w	r6, r8, #1
 800c144:	42b3      	cmp	r3, r6
 800c146:	db0b      	blt.n	800c160 <__lshift+0x38>
 800c148:	4638      	mov	r0, r7
 800c14a:	f7ff fd95 	bl	800bc78 <_Balloc>
 800c14e:	4605      	mov	r5, r0
 800c150:	b948      	cbnz	r0, 800c166 <__lshift+0x3e>
 800c152:	4602      	mov	r2, r0
 800c154:	4b28      	ldr	r3, [pc, #160]	@ (800c1f8 <__lshift+0xd0>)
 800c156:	4829      	ldr	r0, [pc, #164]	@ (800c1fc <__lshift+0xd4>)
 800c158:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c15c:	f001 fb0c 	bl	800d778 <__assert_func>
 800c160:	3101      	adds	r1, #1
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	e7ee      	b.n	800c144 <__lshift+0x1c>
 800c166:	2300      	movs	r3, #0
 800c168:	f100 0114 	add.w	r1, r0, #20
 800c16c:	f100 0210 	add.w	r2, r0, #16
 800c170:	4618      	mov	r0, r3
 800c172:	4553      	cmp	r3, sl
 800c174:	db33      	blt.n	800c1de <__lshift+0xb6>
 800c176:	6920      	ldr	r0, [r4, #16]
 800c178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c17c:	f104 0314 	add.w	r3, r4, #20
 800c180:	f019 091f 	ands.w	r9, r9, #31
 800c184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c188:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c18c:	d02b      	beq.n	800c1e6 <__lshift+0xbe>
 800c18e:	f1c9 0e20 	rsb	lr, r9, #32
 800c192:	468a      	mov	sl, r1
 800c194:	2200      	movs	r2, #0
 800c196:	6818      	ldr	r0, [r3, #0]
 800c198:	fa00 f009 	lsl.w	r0, r0, r9
 800c19c:	4310      	orrs	r0, r2
 800c19e:	f84a 0b04 	str.w	r0, [sl], #4
 800c1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a6:	459c      	cmp	ip, r3
 800c1a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1ac:	d8f3      	bhi.n	800c196 <__lshift+0x6e>
 800c1ae:	ebac 0304 	sub.w	r3, ip, r4
 800c1b2:	3b15      	subs	r3, #21
 800c1b4:	f023 0303 	bic.w	r3, r3, #3
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	f104 0015 	add.w	r0, r4, #21
 800c1be:	4584      	cmp	ip, r0
 800c1c0:	bf38      	it	cc
 800c1c2:	2304      	movcc	r3, #4
 800c1c4:	50ca      	str	r2, [r1, r3]
 800c1c6:	b10a      	cbz	r2, 800c1cc <__lshift+0xa4>
 800c1c8:	f108 0602 	add.w	r6, r8, #2
 800c1cc:	3e01      	subs	r6, #1
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	612e      	str	r6, [r5, #16]
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	f7ff fd90 	bl	800bcf8 <_Bfree>
 800c1d8:	4628      	mov	r0, r5
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	e7c5      	b.n	800c172 <__lshift+0x4a>
 800c1e6:	3904      	subs	r1, #4
 800c1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1f0:	459c      	cmp	ip, r3
 800c1f2:	d8f9      	bhi.n	800c1e8 <__lshift+0xc0>
 800c1f4:	e7ea      	b.n	800c1cc <__lshift+0xa4>
 800c1f6:	bf00      	nop
 800c1f8:	0800e679 	.word	0x0800e679
 800c1fc:	0800e68a 	.word	0x0800e68a

0800c200 <__mcmp>:
 800c200:	690a      	ldr	r2, [r1, #16]
 800c202:	4603      	mov	r3, r0
 800c204:	6900      	ldr	r0, [r0, #16]
 800c206:	1a80      	subs	r0, r0, r2
 800c208:	b530      	push	{r4, r5, lr}
 800c20a:	d10e      	bne.n	800c22a <__mcmp+0x2a>
 800c20c:	3314      	adds	r3, #20
 800c20e:	3114      	adds	r1, #20
 800c210:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c214:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c218:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c21c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c220:	4295      	cmp	r5, r2
 800c222:	d003      	beq.n	800c22c <__mcmp+0x2c>
 800c224:	d205      	bcs.n	800c232 <__mcmp+0x32>
 800c226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c22a:	bd30      	pop	{r4, r5, pc}
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	d3f3      	bcc.n	800c218 <__mcmp+0x18>
 800c230:	e7fb      	b.n	800c22a <__mcmp+0x2a>
 800c232:	2001      	movs	r0, #1
 800c234:	e7f9      	b.n	800c22a <__mcmp+0x2a>
	...

0800c238 <__mdiff>:
 800c238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	4689      	mov	r9, r1
 800c23e:	4606      	mov	r6, r0
 800c240:	4611      	mov	r1, r2
 800c242:	4648      	mov	r0, r9
 800c244:	4614      	mov	r4, r2
 800c246:	f7ff ffdb 	bl	800c200 <__mcmp>
 800c24a:	1e05      	subs	r5, r0, #0
 800c24c:	d112      	bne.n	800c274 <__mdiff+0x3c>
 800c24e:	4629      	mov	r1, r5
 800c250:	4630      	mov	r0, r6
 800c252:	f7ff fd11 	bl	800bc78 <_Balloc>
 800c256:	4602      	mov	r2, r0
 800c258:	b928      	cbnz	r0, 800c266 <__mdiff+0x2e>
 800c25a:	4b3f      	ldr	r3, [pc, #252]	@ (800c358 <__mdiff+0x120>)
 800c25c:	f240 2137 	movw	r1, #567	@ 0x237
 800c260:	483e      	ldr	r0, [pc, #248]	@ (800c35c <__mdiff+0x124>)
 800c262:	f001 fa89 	bl	800d778 <__assert_func>
 800c266:	2301      	movs	r3, #1
 800c268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c26c:	4610      	mov	r0, r2
 800c26e:	b003      	add	sp, #12
 800c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c274:	bfbc      	itt	lt
 800c276:	464b      	movlt	r3, r9
 800c278:	46a1      	movlt	r9, r4
 800c27a:	4630      	mov	r0, r6
 800c27c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c280:	bfba      	itte	lt
 800c282:	461c      	movlt	r4, r3
 800c284:	2501      	movlt	r5, #1
 800c286:	2500      	movge	r5, #0
 800c288:	f7ff fcf6 	bl	800bc78 <_Balloc>
 800c28c:	4602      	mov	r2, r0
 800c28e:	b918      	cbnz	r0, 800c298 <__mdiff+0x60>
 800c290:	4b31      	ldr	r3, [pc, #196]	@ (800c358 <__mdiff+0x120>)
 800c292:	f240 2145 	movw	r1, #581	@ 0x245
 800c296:	e7e3      	b.n	800c260 <__mdiff+0x28>
 800c298:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c29c:	6926      	ldr	r6, [r4, #16]
 800c29e:	60c5      	str	r5, [r0, #12]
 800c2a0:	f109 0310 	add.w	r3, r9, #16
 800c2a4:	f109 0514 	add.w	r5, r9, #20
 800c2a8:	f104 0e14 	add.w	lr, r4, #20
 800c2ac:	f100 0b14 	add.w	fp, r0, #20
 800c2b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	46d9      	mov	r9, fp
 800c2bc:	f04f 0c00 	mov.w	ip, #0
 800c2c0:	9b01      	ldr	r3, [sp, #4]
 800c2c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	fa1f f38a 	uxth.w	r3, sl
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	b283      	uxth	r3, r0
 800c2d4:	1acb      	subs	r3, r1, r3
 800c2d6:	0c00      	lsrs	r0, r0, #16
 800c2d8:	4463      	add	r3, ip
 800c2da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2e8:	4576      	cmp	r6, lr
 800c2ea:	f849 3b04 	str.w	r3, [r9], #4
 800c2ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2f2:	d8e5      	bhi.n	800c2c0 <__mdiff+0x88>
 800c2f4:	1b33      	subs	r3, r6, r4
 800c2f6:	3b15      	subs	r3, #21
 800c2f8:	f023 0303 	bic.w	r3, r3, #3
 800c2fc:	3415      	adds	r4, #21
 800c2fe:	3304      	adds	r3, #4
 800c300:	42a6      	cmp	r6, r4
 800c302:	bf38      	it	cc
 800c304:	2304      	movcc	r3, #4
 800c306:	441d      	add	r5, r3
 800c308:	445b      	add	r3, fp
 800c30a:	461e      	mov	r6, r3
 800c30c:	462c      	mov	r4, r5
 800c30e:	4544      	cmp	r4, r8
 800c310:	d30e      	bcc.n	800c330 <__mdiff+0xf8>
 800c312:	f108 0103 	add.w	r1, r8, #3
 800c316:	1b49      	subs	r1, r1, r5
 800c318:	f021 0103 	bic.w	r1, r1, #3
 800c31c:	3d03      	subs	r5, #3
 800c31e:	45a8      	cmp	r8, r5
 800c320:	bf38      	it	cc
 800c322:	2100      	movcc	r1, #0
 800c324:	440b      	add	r3, r1
 800c326:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c32a:	b191      	cbz	r1, 800c352 <__mdiff+0x11a>
 800c32c:	6117      	str	r7, [r2, #16]
 800c32e:	e79d      	b.n	800c26c <__mdiff+0x34>
 800c330:	f854 1b04 	ldr.w	r1, [r4], #4
 800c334:	46e6      	mov	lr, ip
 800c336:	0c08      	lsrs	r0, r1, #16
 800c338:	fa1c fc81 	uxtah	ip, ip, r1
 800c33c:	4471      	add	r1, lr
 800c33e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c342:	b289      	uxth	r1, r1
 800c344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c348:	f846 1b04 	str.w	r1, [r6], #4
 800c34c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c350:	e7dd      	b.n	800c30e <__mdiff+0xd6>
 800c352:	3f01      	subs	r7, #1
 800c354:	e7e7      	b.n	800c326 <__mdiff+0xee>
 800c356:	bf00      	nop
 800c358:	0800e679 	.word	0x0800e679
 800c35c:	0800e68a 	.word	0x0800e68a

0800c360 <__ulp>:
 800c360:	b082      	sub	sp, #8
 800c362:	ed8d 0b00 	vstr	d0, [sp]
 800c366:	9a01      	ldr	r2, [sp, #4]
 800c368:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a8 <__ulp+0x48>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c370:	2b00      	cmp	r3, #0
 800c372:	dc08      	bgt.n	800c386 <__ulp+0x26>
 800c374:	425b      	negs	r3, r3
 800c376:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c37a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c37e:	da04      	bge.n	800c38a <__ulp+0x2a>
 800c380:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c384:	4113      	asrs	r3, r2
 800c386:	2200      	movs	r2, #0
 800c388:	e008      	b.n	800c39c <__ulp+0x3c>
 800c38a:	f1a2 0314 	sub.w	r3, r2, #20
 800c38e:	2b1e      	cmp	r3, #30
 800c390:	bfda      	itte	le
 800c392:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c396:	40da      	lsrle	r2, r3
 800c398:	2201      	movgt	r2, #1
 800c39a:	2300      	movs	r3, #0
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	ec41 0b10 	vmov	d0, r0, r1
 800c3a4:	b002      	add	sp, #8
 800c3a6:	4770      	bx	lr
 800c3a8:	7ff00000 	.word	0x7ff00000

0800c3ac <__b2d>:
 800c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b0:	6906      	ldr	r6, [r0, #16]
 800c3b2:	f100 0814 	add.w	r8, r0, #20
 800c3b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c3ba:	1f37      	subs	r7, r6, #4
 800c3bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	f7ff fd4b 	bl	800be5c <__hi0bits>
 800c3c6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ca:	280a      	cmp	r0, #10
 800c3cc:	600b      	str	r3, [r1, #0]
 800c3ce:	491b      	ldr	r1, [pc, #108]	@ (800c43c <__b2d+0x90>)
 800c3d0:	dc15      	bgt.n	800c3fe <__b2d+0x52>
 800c3d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c3d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c3da:	45b8      	cmp	r8, r7
 800c3dc:	ea43 0501 	orr.w	r5, r3, r1
 800c3e0:	bf34      	ite	cc
 800c3e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3e6:	2300      	movcs	r3, #0
 800c3e8:	3015      	adds	r0, #21
 800c3ea:	fa02 f000 	lsl.w	r0, r2, r0
 800c3ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800c3f2:	4303      	orrs	r3, r0
 800c3f4:	461c      	mov	r4, r3
 800c3f6:	ec45 4b10 	vmov	d0, r4, r5
 800c3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fe:	45b8      	cmp	r8, r7
 800c400:	bf3a      	itte	cc
 800c402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c406:	f1a6 0708 	subcc.w	r7, r6, #8
 800c40a:	2300      	movcs	r3, #0
 800c40c:	380b      	subs	r0, #11
 800c40e:	d012      	beq.n	800c436 <__b2d+0x8a>
 800c410:	f1c0 0120 	rsb	r1, r0, #32
 800c414:	fa23 f401 	lsr.w	r4, r3, r1
 800c418:	4082      	lsls	r2, r0
 800c41a:	4322      	orrs	r2, r4
 800c41c:	4547      	cmp	r7, r8
 800c41e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c422:	bf8c      	ite	hi
 800c424:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c428:	2200      	movls	r2, #0
 800c42a:	4083      	lsls	r3, r0
 800c42c:	40ca      	lsrs	r2, r1
 800c42e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c432:	4313      	orrs	r3, r2
 800c434:	e7de      	b.n	800c3f4 <__b2d+0x48>
 800c436:	ea42 0501 	orr.w	r5, r2, r1
 800c43a:	e7db      	b.n	800c3f4 <__b2d+0x48>
 800c43c:	3ff00000 	.word	0x3ff00000

0800c440 <__d2b>:
 800c440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c444:	460f      	mov	r7, r1
 800c446:	2101      	movs	r1, #1
 800c448:	ec59 8b10 	vmov	r8, r9, d0
 800c44c:	4616      	mov	r6, r2
 800c44e:	f7ff fc13 	bl	800bc78 <_Balloc>
 800c452:	4604      	mov	r4, r0
 800c454:	b930      	cbnz	r0, 800c464 <__d2b+0x24>
 800c456:	4602      	mov	r2, r0
 800c458:	4b23      	ldr	r3, [pc, #140]	@ (800c4e8 <__d2b+0xa8>)
 800c45a:	4824      	ldr	r0, [pc, #144]	@ (800c4ec <__d2b+0xac>)
 800c45c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c460:	f001 f98a 	bl	800d778 <__assert_func>
 800c464:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c46c:	b10d      	cbz	r5, 800c472 <__d2b+0x32>
 800c46e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	f1b8 0300 	subs.w	r3, r8, #0
 800c478:	d023      	beq.n	800c4c2 <__d2b+0x82>
 800c47a:	4668      	mov	r0, sp
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	f7ff fd0c 	bl	800be9a <__lo0bits>
 800c482:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c486:	b1d0      	cbz	r0, 800c4be <__d2b+0x7e>
 800c488:	f1c0 0320 	rsb	r3, r0, #32
 800c48c:	fa02 f303 	lsl.w	r3, r2, r3
 800c490:	430b      	orrs	r3, r1
 800c492:	40c2      	lsrs	r2, r0
 800c494:	6163      	str	r3, [r4, #20]
 800c496:	9201      	str	r2, [sp, #4]
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	61a3      	str	r3, [r4, #24]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bf0c      	ite	eq
 800c4a0:	2201      	moveq	r2, #1
 800c4a2:	2202      	movne	r2, #2
 800c4a4:	6122      	str	r2, [r4, #16]
 800c4a6:	b1a5      	cbz	r5, 800c4d2 <__d2b+0x92>
 800c4a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4ac:	4405      	add	r5, r0
 800c4ae:	603d      	str	r5, [r7, #0]
 800c4b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c4b4:	6030      	str	r0, [r6, #0]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	b003      	add	sp, #12
 800c4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4be:	6161      	str	r1, [r4, #20]
 800c4c0:	e7ea      	b.n	800c498 <__d2b+0x58>
 800c4c2:	a801      	add	r0, sp, #4
 800c4c4:	f7ff fce9 	bl	800be9a <__lo0bits>
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	3020      	adds	r0, #32
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	e7e8      	b.n	800c4a4 <__d2b+0x64>
 800c4d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c4da:	6038      	str	r0, [r7, #0]
 800c4dc:	6918      	ldr	r0, [r3, #16]
 800c4de:	f7ff fcbd 	bl	800be5c <__hi0bits>
 800c4e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4e6:	e7e5      	b.n	800c4b4 <__d2b+0x74>
 800c4e8:	0800e679 	.word	0x0800e679
 800c4ec:	0800e68a 	.word	0x0800e68a

0800c4f0 <__ratio>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	b085      	sub	sp, #20
 800c4f6:	e9cd 1000 	strd	r1, r0, [sp]
 800c4fa:	a902      	add	r1, sp, #8
 800c4fc:	f7ff ff56 	bl	800c3ac <__b2d>
 800c500:	9800      	ldr	r0, [sp, #0]
 800c502:	a903      	add	r1, sp, #12
 800c504:	ec55 4b10 	vmov	r4, r5, d0
 800c508:	f7ff ff50 	bl	800c3ac <__b2d>
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	6919      	ldr	r1, [r3, #16]
 800c510:	9b00      	ldr	r3, [sp, #0]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	1ac9      	subs	r1, r1, r3
 800c516:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	ec5b ab10 	vmov	sl, fp, d0
 800c520:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c524:	2b00      	cmp	r3, #0
 800c526:	bfce      	itee	gt
 800c528:	462a      	movgt	r2, r5
 800c52a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c52e:	465a      	movle	r2, fp
 800c530:	462f      	mov	r7, r5
 800c532:	46d9      	mov	r9, fp
 800c534:	bfcc      	ite	gt
 800c536:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c53a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c53e:	464b      	mov	r3, r9
 800c540:	4652      	mov	r2, sl
 800c542:	4620      	mov	r0, r4
 800c544:	4639      	mov	r1, r7
 800c546:	f7f4 f989 	bl	800085c <__aeabi_ddiv>
 800c54a:	ec41 0b10 	vmov	d0, r0, r1
 800c54e:	b005      	add	sp, #20
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c554 <__copybits>:
 800c554:	3901      	subs	r1, #1
 800c556:	b570      	push	{r4, r5, r6, lr}
 800c558:	1149      	asrs	r1, r1, #5
 800c55a:	6914      	ldr	r4, [r2, #16]
 800c55c:	3101      	adds	r1, #1
 800c55e:	f102 0314 	add.w	r3, r2, #20
 800c562:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c566:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c56a:	1f05      	subs	r5, r0, #4
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	d30c      	bcc.n	800c58a <__copybits+0x36>
 800c570:	1aa3      	subs	r3, r4, r2
 800c572:	3b11      	subs	r3, #17
 800c574:	f023 0303 	bic.w	r3, r3, #3
 800c578:	3211      	adds	r2, #17
 800c57a:	42a2      	cmp	r2, r4
 800c57c:	bf88      	it	hi
 800c57e:	2300      	movhi	r3, #0
 800c580:	4418      	add	r0, r3
 800c582:	2300      	movs	r3, #0
 800c584:	4288      	cmp	r0, r1
 800c586:	d305      	bcc.n	800c594 <__copybits+0x40>
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c58e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c592:	e7eb      	b.n	800c56c <__copybits+0x18>
 800c594:	f840 3b04 	str.w	r3, [r0], #4
 800c598:	e7f4      	b.n	800c584 <__copybits+0x30>

0800c59a <__any_on>:
 800c59a:	f100 0214 	add.w	r2, r0, #20
 800c59e:	6900      	ldr	r0, [r0, #16]
 800c5a0:	114b      	asrs	r3, r1, #5
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	db11      	blt.n	800c5cc <__any_on+0x32>
 800c5a8:	dd0a      	ble.n	800c5c0 <__any_on+0x26>
 800c5aa:	f011 011f 	ands.w	r1, r1, #31
 800c5ae:	d007      	beq.n	800c5c0 <__any_on+0x26>
 800c5b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5b4:	fa24 f001 	lsr.w	r0, r4, r1
 800c5b8:	fa00 f101 	lsl.w	r1, r0, r1
 800c5bc:	428c      	cmp	r4, r1
 800c5be:	d10b      	bne.n	800c5d8 <__any_on+0x3e>
 800c5c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d803      	bhi.n	800c5d0 <__any_on+0x36>
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	bd10      	pop	{r4, pc}
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	e7f7      	b.n	800c5c0 <__any_on+0x26>
 800c5d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d0f5      	beq.n	800c5c4 <__any_on+0x2a>
 800c5d8:	2001      	movs	r0, #1
 800c5da:	e7f6      	b.n	800c5ca <__any_on+0x30>

0800c5dc <sulp>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4604      	mov	r4, r0
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	ec45 4b10 	vmov	d0, r4, r5
 800c5e6:	4616      	mov	r6, r2
 800c5e8:	f7ff feba 	bl	800c360 <__ulp>
 800c5ec:	ec51 0b10 	vmov	r0, r1, d0
 800c5f0:	b17e      	cbz	r6, 800c612 <sulp+0x36>
 800c5f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd09      	ble.n	800c612 <sulp+0x36>
 800c5fe:	051b      	lsls	r3, r3, #20
 800c600:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c604:	2400      	movs	r4, #0
 800c606:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c60a:	4622      	mov	r2, r4
 800c60c:	462b      	mov	r3, r5
 800c60e:	f7f3 fffb 	bl	8000608 <__aeabi_dmul>
 800c612:	ec41 0b10 	vmov	d0, r0, r1
 800c616:	bd70      	pop	{r4, r5, r6, pc}

0800c618 <_strtod_l>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b09f      	sub	sp, #124	@ 0x7c
 800c61e:	460c      	mov	r4, r1
 800c620:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c622:	2200      	movs	r2, #0
 800c624:	921a      	str	r2, [sp, #104]	@ 0x68
 800c626:	9005      	str	r0, [sp, #20]
 800c628:	f04f 0a00 	mov.w	sl, #0
 800c62c:	f04f 0b00 	mov.w	fp, #0
 800c630:	460a      	mov	r2, r1
 800c632:	9219      	str	r2, [sp, #100]	@ 0x64
 800c634:	7811      	ldrb	r1, [r2, #0]
 800c636:	292b      	cmp	r1, #43	@ 0x2b
 800c638:	d04a      	beq.n	800c6d0 <_strtod_l+0xb8>
 800c63a:	d838      	bhi.n	800c6ae <_strtod_l+0x96>
 800c63c:	290d      	cmp	r1, #13
 800c63e:	d832      	bhi.n	800c6a6 <_strtod_l+0x8e>
 800c640:	2908      	cmp	r1, #8
 800c642:	d832      	bhi.n	800c6aa <_strtod_l+0x92>
 800c644:	2900      	cmp	r1, #0
 800c646:	d03b      	beq.n	800c6c0 <_strtod_l+0xa8>
 800c648:	2200      	movs	r2, #0
 800c64a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c64c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c64e:	782a      	ldrb	r2, [r5, #0]
 800c650:	2a30      	cmp	r2, #48	@ 0x30
 800c652:	f040 80b3 	bne.w	800c7bc <_strtod_l+0x1a4>
 800c656:	786a      	ldrb	r2, [r5, #1]
 800c658:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c65c:	2a58      	cmp	r2, #88	@ 0x58
 800c65e:	d16e      	bne.n	800c73e <_strtod_l+0x126>
 800c660:	9302      	str	r3, [sp, #8]
 800c662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	ab1a      	add	r3, sp, #104	@ 0x68
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	4a8e      	ldr	r2, [pc, #568]	@ (800c8a4 <_strtod_l+0x28c>)
 800c66c:	9805      	ldr	r0, [sp, #20]
 800c66e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c670:	a919      	add	r1, sp, #100	@ 0x64
 800c672:	f001 f91b 	bl	800d8ac <__gethex>
 800c676:	f010 060f 	ands.w	r6, r0, #15
 800c67a:	4604      	mov	r4, r0
 800c67c:	d005      	beq.n	800c68a <_strtod_l+0x72>
 800c67e:	2e06      	cmp	r6, #6
 800c680:	d128      	bne.n	800c6d4 <_strtod_l+0xbc>
 800c682:	3501      	adds	r5, #1
 800c684:	2300      	movs	r3, #0
 800c686:	9519      	str	r5, [sp, #100]	@ 0x64
 800c688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c68a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 858e 	bne.w	800d1ae <_strtod_l+0xb96>
 800c692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c694:	b1cb      	cbz	r3, 800c6ca <_strtod_l+0xb2>
 800c696:	4652      	mov	r2, sl
 800c698:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c69c:	ec43 2b10 	vmov	d0, r2, r3
 800c6a0:	b01f      	add	sp, #124	@ 0x7c
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	2920      	cmp	r1, #32
 800c6a8:	d1ce      	bne.n	800c648 <_strtod_l+0x30>
 800c6aa:	3201      	adds	r2, #1
 800c6ac:	e7c1      	b.n	800c632 <_strtod_l+0x1a>
 800c6ae:	292d      	cmp	r1, #45	@ 0x2d
 800c6b0:	d1ca      	bne.n	800c648 <_strtod_l+0x30>
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c6b6:	1c51      	adds	r1, r2, #1
 800c6b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6ba:	7852      	ldrb	r2, [r2, #1]
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	d1c5      	bne.n	800c64c <_strtod_l+0x34>
 800c6c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f040 8570 	bne.w	800d1aa <_strtod_l+0xb92>
 800c6ca:	4652      	mov	r2, sl
 800c6cc:	465b      	mov	r3, fp
 800c6ce:	e7e5      	b.n	800c69c <_strtod_l+0x84>
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	e7ef      	b.n	800c6b4 <_strtod_l+0x9c>
 800c6d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c6d6:	b13a      	cbz	r2, 800c6e8 <_strtod_l+0xd0>
 800c6d8:	2135      	movs	r1, #53	@ 0x35
 800c6da:	a81c      	add	r0, sp, #112	@ 0x70
 800c6dc:	f7ff ff3a 	bl	800c554 <__copybits>
 800c6e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6e2:	9805      	ldr	r0, [sp, #20]
 800c6e4:	f7ff fb08 	bl	800bcf8 <_Bfree>
 800c6e8:	3e01      	subs	r6, #1
 800c6ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c6ec:	2e04      	cmp	r6, #4
 800c6ee:	d806      	bhi.n	800c6fe <_strtod_l+0xe6>
 800c6f0:	e8df f006 	tbb	[pc, r6]
 800c6f4:	201d0314 	.word	0x201d0314
 800c6f8:	14          	.byte	0x14
 800c6f9:	00          	.byte	0x00
 800c6fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c6fe:	05e1      	lsls	r1, r4, #23
 800c700:	bf48      	it	mi
 800c702:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c706:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c70a:	0d1b      	lsrs	r3, r3, #20
 800c70c:	051b      	lsls	r3, r3, #20
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1bb      	bne.n	800c68a <_strtod_l+0x72>
 800c712:	f7fe fb23 	bl	800ad5c <__errno>
 800c716:	2322      	movs	r3, #34	@ 0x22
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	e7b6      	b.n	800c68a <_strtod_l+0x72>
 800c71c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c720:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c724:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c728:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c72c:	e7e7      	b.n	800c6fe <_strtod_l+0xe6>
 800c72e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c8ac <_strtod_l+0x294>
 800c732:	e7e4      	b.n	800c6fe <_strtod_l+0xe6>
 800c734:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c738:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c73c:	e7df      	b.n	800c6fe <_strtod_l+0xe6>
 800c73e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	9219      	str	r2, [sp, #100]	@ 0x64
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	2b30      	cmp	r3, #48	@ 0x30
 800c748:	d0f9      	beq.n	800c73e <_strtod_l+0x126>
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d09d      	beq.n	800c68a <_strtod_l+0x72>
 800c74e:	2301      	movs	r3, #1
 800c750:	9309      	str	r3, [sp, #36]	@ 0x24
 800c752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c754:	930c      	str	r3, [sp, #48]	@ 0x30
 800c756:	2300      	movs	r3, #0
 800c758:	9308      	str	r3, [sp, #32]
 800c75a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c75c:	461f      	mov	r7, r3
 800c75e:	220a      	movs	r2, #10
 800c760:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c762:	7805      	ldrb	r5, [r0, #0]
 800c764:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c768:	b2d9      	uxtb	r1, r3
 800c76a:	2909      	cmp	r1, #9
 800c76c:	d928      	bls.n	800c7c0 <_strtod_l+0x1a8>
 800c76e:	494e      	ldr	r1, [pc, #312]	@ (800c8a8 <_strtod_l+0x290>)
 800c770:	2201      	movs	r2, #1
 800c772:	f000 ffd5 	bl	800d720 <strncmp>
 800c776:	2800      	cmp	r0, #0
 800c778:	d032      	beq.n	800c7e0 <_strtod_l+0x1c8>
 800c77a:	2000      	movs	r0, #0
 800c77c:	462a      	mov	r2, r5
 800c77e:	4681      	mov	r9, r0
 800c780:	463d      	mov	r5, r7
 800c782:	4603      	mov	r3, r0
 800c784:	2a65      	cmp	r2, #101	@ 0x65
 800c786:	d001      	beq.n	800c78c <_strtod_l+0x174>
 800c788:	2a45      	cmp	r2, #69	@ 0x45
 800c78a:	d114      	bne.n	800c7b6 <_strtod_l+0x19e>
 800c78c:	b91d      	cbnz	r5, 800c796 <_strtod_l+0x17e>
 800c78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c790:	4302      	orrs	r2, r0
 800c792:	d095      	beq.n	800c6c0 <_strtod_l+0xa8>
 800c794:	2500      	movs	r5, #0
 800c796:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c798:	1c62      	adds	r2, r4, #1
 800c79a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c79c:	7862      	ldrb	r2, [r4, #1]
 800c79e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c7a0:	d077      	beq.n	800c892 <_strtod_l+0x27a>
 800c7a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c7a4:	d07b      	beq.n	800c89e <_strtod_l+0x286>
 800c7a6:	f04f 0c00 	mov.w	ip, #0
 800c7aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c7ae:	2909      	cmp	r1, #9
 800c7b0:	f240 8082 	bls.w	800c8b8 <_strtod_l+0x2a0>
 800c7b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7b6:	f04f 0800 	mov.w	r8, #0
 800c7ba:	e0a2      	b.n	800c902 <_strtod_l+0x2ea>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	e7c7      	b.n	800c750 <_strtod_l+0x138>
 800c7c0:	2f08      	cmp	r7, #8
 800c7c2:	bfd5      	itete	le
 800c7c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c7c6:	9908      	ldrgt	r1, [sp, #32]
 800c7c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c7d0:	f100 0001 	add.w	r0, r0, #1
 800c7d4:	bfd4      	ite	le
 800c7d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c7d8:	9308      	strgt	r3, [sp, #32]
 800c7da:	3701      	adds	r7, #1
 800c7dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c7de:	e7bf      	b.n	800c760 <_strtod_l+0x148>
 800c7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7e2:	1c5a      	adds	r2, r3, #1
 800c7e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7e6:	785a      	ldrb	r2, [r3, #1]
 800c7e8:	b37f      	cbz	r7, 800c84a <_strtod_l+0x232>
 800c7ea:	4681      	mov	r9, r0
 800c7ec:	463d      	mov	r5, r7
 800c7ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c7f2:	2b09      	cmp	r3, #9
 800c7f4:	d912      	bls.n	800c81c <_strtod_l+0x204>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7c4      	b.n	800c784 <_strtod_l+0x16c>
 800c7fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7fc:	1c5a      	adds	r2, r3, #1
 800c7fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800c800:	785a      	ldrb	r2, [r3, #1]
 800c802:	3001      	adds	r0, #1
 800c804:	2a30      	cmp	r2, #48	@ 0x30
 800c806:	d0f8      	beq.n	800c7fa <_strtod_l+0x1e2>
 800c808:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c80c:	2b08      	cmp	r3, #8
 800c80e:	f200 84d3 	bhi.w	800d1b8 <_strtod_l+0xba0>
 800c812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c814:	930c      	str	r3, [sp, #48]	@ 0x30
 800c816:	4681      	mov	r9, r0
 800c818:	2000      	movs	r0, #0
 800c81a:	4605      	mov	r5, r0
 800c81c:	3a30      	subs	r2, #48	@ 0x30
 800c81e:	f100 0301 	add.w	r3, r0, #1
 800c822:	d02a      	beq.n	800c87a <_strtod_l+0x262>
 800c824:	4499      	add	r9, r3
 800c826:	eb00 0c05 	add.w	ip, r0, r5
 800c82a:	462b      	mov	r3, r5
 800c82c:	210a      	movs	r1, #10
 800c82e:	4563      	cmp	r3, ip
 800c830:	d10d      	bne.n	800c84e <_strtod_l+0x236>
 800c832:	1c69      	adds	r1, r5, #1
 800c834:	4401      	add	r1, r0
 800c836:	4428      	add	r0, r5
 800c838:	2808      	cmp	r0, #8
 800c83a:	dc16      	bgt.n	800c86a <_strtod_l+0x252>
 800c83c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c83e:	230a      	movs	r3, #10
 800c840:	fb03 2300 	mla	r3, r3, r0, r2
 800c844:	930a      	str	r3, [sp, #40]	@ 0x28
 800c846:	2300      	movs	r3, #0
 800c848:	e018      	b.n	800c87c <_strtod_l+0x264>
 800c84a:	4638      	mov	r0, r7
 800c84c:	e7da      	b.n	800c804 <_strtod_l+0x1ec>
 800c84e:	2b08      	cmp	r3, #8
 800c850:	f103 0301 	add.w	r3, r3, #1
 800c854:	dc03      	bgt.n	800c85e <_strtod_l+0x246>
 800c856:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c858:	434e      	muls	r6, r1
 800c85a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c85c:	e7e7      	b.n	800c82e <_strtod_l+0x216>
 800c85e:	2b10      	cmp	r3, #16
 800c860:	bfde      	ittt	le
 800c862:	9e08      	ldrle	r6, [sp, #32]
 800c864:	434e      	mulle	r6, r1
 800c866:	9608      	strle	r6, [sp, #32]
 800c868:	e7e1      	b.n	800c82e <_strtod_l+0x216>
 800c86a:	280f      	cmp	r0, #15
 800c86c:	dceb      	bgt.n	800c846 <_strtod_l+0x22e>
 800c86e:	9808      	ldr	r0, [sp, #32]
 800c870:	230a      	movs	r3, #10
 800c872:	fb03 2300 	mla	r3, r3, r0, r2
 800c876:	9308      	str	r3, [sp, #32]
 800c878:	e7e5      	b.n	800c846 <_strtod_l+0x22e>
 800c87a:	4629      	mov	r1, r5
 800c87c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c87e:	1c50      	adds	r0, r2, #1
 800c880:	9019      	str	r0, [sp, #100]	@ 0x64
 800c882:	7852      	ldrb	r2, [r2, #1]
 800c884:	4618      	mov	r0, r3
 800c886:	460d      	mov	r5, r1
 800c888:	e7b1      	b.n	800c7ee <_strtod_l+0x1d6>
 800c88a:	f04f 0900 	mov.w	r9, #0
 800c88e:	2301      	movs	r3, #1
 800c890:	e77d      	b.n	800c78e <_strtod_l+0x176>
 800c892:	f04f 0c00 	mov.w	ip, #0
 800c896:	1ca2      	adds	r2, r4, #2
 800c898:	9219      	str	r2, [sp, #100]	@ 0x64
 800c89a:	78a2      	ldrb	r2, [r4, #2]
 800c89c:	e785      	b.n	800c7aa <_strtod_l+0x192>
 800c89e:	f04f 0c01 	mov.w	ip, #1
 800c8a2:	e7f8      	b.n	800c896 <_strtod_l+0x27e>
 800c8a4:	0800e7f8 	.word	0x0800e7f8
 800c8a8:	0800e7e0 	.word	0x0800e7e0
 800c8ac:	7ff00000 	.word	0x7ff00000
 800c8b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8b2:	1c51      	adds	r1, r2, #1
 800c8b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8b6:	7852      	ldrb	r2, [r2, #1]
 800c8b8:	2a30      	cmp	r2, #48	@ 0x30
 800c8ba:	d0f9      	beq.n	800c8b0 <_strtod_l+0x298>
 800c8bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c8c0:	2908      	cmp	r1, #8
 800c8c2:	f63f af78 	bhi.w	800c7b6 <_strtod_l+0x19e>
 800c8c6:	3a30      	subs	r2, #48	@ 0x30
 800c8c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c8ce:	f04f 080a 	mov.w	r8, #10
 800c8d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8d4:	1c56      	adds	r6, r2, #1
 800c8d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c8d8:	7852      	ldrb	r2, [r2, #1]
 800c8da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c8de:	f1be 0f09 	cmp.w	lr, #9
 800c8e2:	d939      	bls.n	800c958 <_strtod_l+0x340>
 800c8e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c8e6:	1a76      	subs	r6, r6, r1
 800c8e8:	2e08      	cmp	r6, #8
 800c8ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c8ee:	dc03      	bgt.n	800c8f8 <_strtod_l+0x2e0>
 800c8f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c8f2:	4588      	cmp	r8, r1
 800c8f4:	bfa8      	it	ge
 800c8f6:	4688      	movge	r8, r1
 800c8f8:	f1bc 0f00 	cmp.w	ip, #0
 800c8fc:	d001      	beq.n	800c902 <_strtod_l+0x2ea>
 800c8fe:	f1c8 0800 	rsb	r8, r8, #0
 800c902:	2d00      	cmp	r5, #0
 800c904:	d14e      	bne.n	800c9a4 <_strtod_l+0x38c>
 800c906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c908:	4308      	orrs	r0, r1
 800c90a:	f47f aebe 	bne.w	800c68a <_strtod_l+0x72>
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f47f aed6 	bne.w	800c6c0 <_strtod_l+0xa8>
 800c914:	2a69      	cmp	r2, #105	@ 0x69
 800c916:	d028      	beq.n	800c96a <_strtod_l+0x352>
 800c918:	dc25      	bgt.n	800c966 <_strtod_l+0x34e>
 800c91a:	2a49      	cmp	r2, #73	@ 0x49
 800c91c:	d025      	beq.n	800c96a <_strtod_l+0x352>
 800c91e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c920:	f47f aece 	bne.w	800c6c0 <_strtod_l+0xa8>
 800c924:	499b      	ldr	r1, [pc, #620]	@ (800cb94 <_strtod_l+0x57c>)
 800c926:	a819      	add	r0, sp, #100	@ 0x64
 800c928:	f001 f9e2 	bl	800dcf0 <__match>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	f43f aec7 	beq.w	800c6c0 <_strtod_l+0xa8>
 800c932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b28      	cmp	r3, #40	@ 0x28
 800c938:	d12e      	bne.n	800c998 <_strtod_l+0x380>
 800c93a:	4997      	ldr	r1, [pc, #604]	@ (800cb98 <_strtod_l+0x580>)
 800c93c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c93e:	a819      	add	r0, sp, #100	@ 0x64
 800c940:	f001 f9ea 	bl	800dd18 <__hexnan>
 800c944:	2805      	cmp	r0, #5
 800c946:	d127      	bne.n	800c998 <_strtod_l+0x380>
 800c948:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c94a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c94e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c952:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c956:	e698      	b.n	800c68a <_strtod_l+0x72>
 800c958:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c95a:	fb08 2101 	mla	r1, r8, r1, r2
 800c95e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c962:	920e      	str	r2, [sp, #56]	@ 0x38
 800c964:	e7b5      	b.n	800c8d2 <_strtod_l+0x2ba>
 800c966:	2a6e      	cmp	r2, #110	@ 0x6e
 800c968:	e7da      	b.n	800c920 <_strtod_l+0x308>
 800c96a:	498c      	ldr	r1, [pc, #560]	@ (800cb9c <_strtod_l+0x584>)
 800c96c:	a819      	add	r0, sp, #100	@ 0x64
 800c96e:	f001 f9bf 	bl	800dcf0 <__match>
 800c972:	2800      	cmp	r0, #0
 800c974:	f43f aea4 	beq.w	800c6c0 <_strtod_l+0xa8>
 800c978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c97a:	4989      	ldr	r1, [pc, #548]	@ (800cba0 <_strtod_l+0x588>)
 800c97c:	3b01      	subs	r3, #1
 800c97e:	a819      	add	r0, sp, #100	@ 0x64
 800c980:	9319      	str	r3, [sp, #100]	@ 0x64
 800c982:	f001 f9b5 	bl	800dcf0 <__match>
 800c986:	b910      	cbnz	r0, 800c98e <_strtod_l+0x376>
 800c988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c98a:	3301      	adds	r3, #1
 800c98c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c98e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cbb0 <_strtod_l+0x598>
 800c992:	f04f 0a00 	mov.w	sl, #0
 800c996:	e678      	b.n	800c68a <_strtod_l+0x72>
 800c998:	4882      	ldr	r0, [pc, #520]	@ (800cba4 <_strtod_l+0x58c>)
 800c99a:	f000 fee5 	bl	800d768 <nan>
 800c99e:	ec5b ab10 	vmov	sl, fp, d0
 800c9a2:	e672      	b.n	800c68a <_strtod_l+0x72>
 800c9a4:	eba8 0309 	sub.w	r3, r8, r9
 800c9a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ac:	2f00      	cmp	r7, #0
 800c9ae:	bf08      	it	eq
 800c9b0:	462f      	moveq	r7, r5
 800c9b2:	2d10      	cmp	r5, #16
 800c9b4:	462c      	mov	r4, r5
 800c9b6:	bfa8      	it	ge
 800c9b8:	2410      	movge	r4, #16
 800c9ba:	f7f3 fdab 	bl	8000514 <__aeabi_ui2d>
 800c9be:	2d09      	cmp	r5, #9
 800c9c0:	4682      	mov	sl, r0
 800c9c2:	468b      	mov	fp, r1
 800c9c4:	dc13      	bgt.n	800c9ee <_strtod_l+0x3d6>
 800c9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f43f ae5e 	beq.w	800c68a <_strtod_l+0x72>
 800c9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d0:	dd78      	ble.n	800cac4 <_strtod_l+0x4ac>
 800c9d2:	2b16      	cmp	r3, #22
 800c9d4:	dc5f      	bgt.n	800ca96 <_strtod_l+0x47e>
 800c9d6:	4974      	ldr	r1, [pc, #464]	@ (800cba8 <_strtod_l+0x590>)
 800c9d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	f7f3 fe10 	bl	8000608 <__aeabi_dmul>
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	468b      	mov	fp, r1
 800c9ec:	e64d      	b.n	800c68a <_strtod_l+0x72>
 800c9ee:	4b6e      	ldr	r3, [pc, #440]	@ (800cba8 <_strtod_l+0x590>)
 800c9f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c9f8:	f7f3 fe06 	bl	8000608 <__aeabi_dmul>
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	9808      	ldr	r0, [sp, #32]
 800ca00:	468b      	mov	fp, r1
 800ca02:	f7f3 fd87 	bl	8000514 <__aeabi_ui2d>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	f7f3 fc45 	bl	800029c <__adddf3>
 800ca12:	2d0f      	cmp	r5, #15
 800ca14:	4682      	mov	sl, r0
 800ca16:	468b      	mov	fp, r1
 800ca18:	ddd5      	ble.n	800c9c6 <_strtod_l+0x3ae>
 800ca1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca1c:	1b2c      	subs	r4, r5, r4
 800ca1e:	441c      	add	r4, r3
 800ca20:	2c00      	cmp	r4, #0
 800ca22:	f340 8096 	ble.w	800cb52 <_strtod_l+0x53a>
 800ca26:	f014 030f 	ands.w	r3, r4, #15
 800ca2a:	d00a      	beq.n	800ca42 <_strtod_l+0x42a>
 800ca2c:	495e      	ldr	r1, [pc, #376]	@ (800cba8 <_strtod_l+0x590>)
 800ca2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca32:	4652      	mov	r2, sl
 800ca34:	465b      	mov	r3, fp
 800ca36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca3a:	f7f3 fde5 	bl	8000608 <__aeabi_dmul>
 800ca3e:	4682      	mov	sl, r0
 800ca40:	468b      	mov	fp, r1
 800ca42:	f034 040f 	bics.w	r4, r4, #15
 800ca46:	d073      	beq.n	800cb30 <_strtod_l+0x518>
 800ca48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ca4c:	dd48      	ble.n	800cae0 <_strtod_l+0x4c8>
 800ca4e:	2400      	movs	r4, #0
 800ca50:	46a0      	mov	r8, r4
 800ca52:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca54:	46a1      	mov	r9, r4
 800ca56:	9a05      	ldr	r2, [sp, #20]
 800ca58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cbb0 <_strtod_l+0x598>
 800ca5c:	2322      	movs	r3, #34	@ 0x22
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	f04f 0a00 	mov.w	sl, #0
 800ca64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f43f ae0f 	beq.w	800c68a <_strtod_l+0x72>
 800ca6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca6e:	9805      	ldr	r0, [sp, #20]
 800ca70:	f7ff f942 	bl	800bcf8 <_Bfree>
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	4649      	mov	r1, r9
 800ca78:	f7ff f93e 	bl	800bcf8 <_Bfree>
 800ca7c:	9805      	ldr	r0, [sp, #20]
 800ca7e:	4641      	mov	r1, r8
 800ca80:	f7ff f93a 	bl	800bcf8 <_Bfree>
 800ca84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca86:	9805      	ldr	r0, [sp, #20]
 800ca88:	f7ff f936 	bl	800bcf8 <_Bfree>
 800ca8c:	9805      	ldr	r0, [sp, #20]
 800ca8e:	4621      	mov	r1, r4
 800ca90:	f7ff f932 	bl	800bcf8 <_Bfree>
 800ca94:	e5f9      	b.n	800c68a <_strtod_l+0x72>
 800ca96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	dbbc      	blt.n	800ca1a <_strtod_l+0x402>
 800caa0:	4c41      	ldr	r4, [pc, #260]	@ (800cba8 <_strtod_l+0x590>)
 800caa2:	f1c5 050f 	rsb	r5, r5, #15
 800caa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800caaa:	4652      	mov	r2, sl
 800caac:	465b      	mov	r3, fp
 800caae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab2:	f7f3 fda9 	bl	8000608 <__aeabi_dmul>
 800cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab8:	1b5d      	subs	r5, r3, r5
 800caba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cabe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cac2:	e78f      	b.n	800c9e4 <_strtod_l+0x3cc>
 800cac4:	3316      	adds	r3, #22
 800cac6:	dba8      	blt.n	800ca1a <_strtod_l+0x402>
 800cac8:	4b37      	ldr	r3, [pc, #220]	@ (800cba8 <_strtod_l+0x590>)
 800caca:	eba9 0808 	sub.w	r8, r9, r8
 800cace:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cad2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cad6:	4650      	mov	r0, sl
 800cad8:	4659      	mov	r1, fp
 800cada:	f7f3 febf 	bl	800085c <__aeabi_ddiv>
 800cade:	e783      	b.n	800c9e8 <_strtod_l+0x3d0>
 800cae0:	4b32      	ldr	r3, [pc, #200]	@ (800cbac <_strtod_l+0x594>)
 800cae2:	9308      	str	r3, [sp, #32]
 800cae4:	2300      	movs	r3, #0
 800cae6:	1124      	asrs	r4, r4, #4
 800cae8:	4650      	mov	r0, sl
 800caea:	4659      	mov	r1, fp
 800caec:	461e      	mov	r6, r3
 800caee:	2c01      	cmp	r4, #1
 800caf0:	dc21      	bgt.n	800cb36 <_strtod_l+0x51e>
 800caf2:	b10b      	cbz	r3, 800caf8 <_strtod_l+0x4e0>
 800caf4:	4682      	mov	sl, r0
 800caf6:	468b      	mov	fp, r1
 800caf8:	492c      	ldr	r1, [pc, #176]	@ (800cbac <_strtod_l+0x594>)
 800cafa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cafe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cb02:	4652      	mov	r2, sl
 800cb04:	465b      	mov	r3, fp
 800cb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb0a:	f7f3 fd7d 	bl	8000608 <__aeabi_dmul>
 800cb0e:	4b28      	ldr	r3, [pc, #160]	@ (800cbb0 <_strtod_l+0x598>)
 800cb10:	460a      	mov	r2, r1
 800cb12:	400b      	ands	r3, r1
 800cb14:	4927      	ldr	r1, [pc, #156]	@ (800cbb4 <_strtod_l+0x59c>)
 800cb16:	428b      	cmp	r3, r1
 800cb18:	4682      	mov	sl, r0
 800cb1a:	d898      	bhi.n	800ca4e <_strtod_l+0x436>
 800cb1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cb20:	428b      	cmp	r3, r1
 800cb22:	bf86      	itte	hi
 800cb24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cbb8 <_strtod_l+0x5a0>
 800cb28:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800cb2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cb30:	2300      	movs	r3, #0
 800cb32:	9308      	str	r3, [sp, #32]
 800cb34:	e07a      	b.n	800cc2c <_strtod_l+0x614>
 800cb36:	07e2      	lsls	r2, r4, #31
 800cb38:	d505      	bpl.n	800cb46 <_strtod_l+0x52e>
 800cb3a:	9b08      	ldr	r3, [sp, #32]
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fd62 	bl	8000608 <__aeabi_dmul>
 800cb44:	2301      	movs	r3, #1
 800cb46:	9a08      	ldr	r2, [sp, #32]
 800cb48:	3208      	adds	r2, #8
 800cb4a:	3601      	adds	r6, #1
 800cb4c:	1064      	asrs	r4, r4, #1
 800cb4e:	9208      	str	r2, [sp, #32]
 800cb50:	e7cd      	b.n	800caee <_strtod_l+0x4d6>
 800cb52:	d0ed      	beq.n	800cb30 <_strtod_l+0x518>
 800cb54:	4264      	negs	r4, r4
 800cb56:	f014 020f 	ands.w	r2, r4, #15
 800cb5a:	d00a      	beq.n	800cb72 <_strtod_l+0x55a>
 800cb5c:	4b12      	ldr	r3, [pc, #72]	@ (800cba8 <_strtod_l+0x590>)
 800cb5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb62:	4650      	mov	r0, sl
 800cb64:	4659      	mov	r1, fp
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7f3 fe77 	bl	800085c <__aeabi_ddiv>
 800cb6e:	4682      	mov	sl, r0
 800cb70:	468b      	mov	fp, r1
 800cb72:	1124      	asrs	r4, r4, #4
 800cb74:	d0dc      	beq.n	800cb30 <_strtod_l+0x518>
 800cb76:	2c1f      	cmp	r4, #31
 800cb78:	dd20      	ble.n	800cbbc <_strtod_l+0x5a4>
 800cb7a:	2400      	movs	r4, #0
 800cb7c:	46a0      	mov	r8, r4
 800cb7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb80:	46a1      	mov	r9, r4
 800cb82:	9a05      	ldr	r2, [sp, #20]
 800cb84:	2322      	movs	r3, #34	@ 0x22
 800cb86:	f04f 0a00 	mov.w	sl, #0
 800cb8a:	f04f 0b00 	mov.w	fp, #0
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	e768      	b.n	800ca64 <_strtod_l+0x44c>
 800cb92:	bf00      	nop
 800cb94:	0800e5d1 	.word	0x0800e5d1
 800cb98:	0800e7e4 	.word	0x0800e7e4
 800cb9c:	0800e5c9 	.word	0x0800e5c9
 800cba0:	0800e600 	.word	0x0800e600
 800cba4:	0800e98d 	.word	0x0800e98d
 800cba8:	0800e718 	.word	0x0800e718
 800cbac:	0800e6f0 	.word	0x0800e6f0
 800cbb0:	7ff00000 	.word	0x7ff00000
 800cbb4:	7ca00000 	.word	0x7ca00000
 800cbb8:	7fefffff 	.word	0x7fefffff
 800cbbc:	f014 0310 	ands.w	r3, r4, #16
 800cbc0:	bf18      	it	ne
 800cbc2:	236a      	movne	r3, #106	@ 0x6a
 800cbc4:	4ea9      	ldr	r6, [pc, #676]	@ (800ce6c <_strtod_l+0x854>)
 800cbc6:	9308      	str	r3, [sp, #32]
 800cbc8:	4650      	mov	r0, sl
 800cbca:	4659      	mov	r1, fp
 800cbcc:	2300      	movs	r3, #0
 800cbce:	07e2      	lsls	r2, r4, #31
 800cbd0:	d504      	bpl.n	800cbdc <_strtod_l+0x5c4>
 800cbd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbd6:	f7f3 fd17 	bl	8000608 <__aeabi_dmul>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	1064      	asrs	r4, r4, #1
 800cbde:	f106 0608 	add.w	r6, r6, #8
 800cbe2:	d1f4      	bne.n	800cbce <_strtod_l+0x5b6>
 800cbe4:	b10b      	cbz	r3, 800cbea <_strtod_l+0x5d2>
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	468b      	mov	fp, r1
 800cbea:	9b08      	ldr	r3, [sp, #32]
 800cbec:	b1b3      	cbz	r3, 800cc1c <_strtod_l+0x604>
 800cbee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cbf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	4659      	mov	r1, fp
 800cbfa:	dd0f      	ble.n	800cc1c <_strtod_l+0x604>
 800cbfc:	2b1f      	cmp	r3, #31
 800cbfe:	dd55      	ble.n	800ccac <_strtod_l+0x694>
 800cc00:	2b34      	cmp	r3, #52	@ 0x34
 800cc02:	bfde      	ittt	le
 800cc04:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800cc08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cc0c:	4093      	lslle	r3, r2
 800cc0e:	f04f 0a00 	mov.w	sl, #0
 800cc12:	bfcc      	ite	gt
 800cc14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc18:	ea03 0b01 	andle.w	fp, r3, r1
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	4650      	mov	r0, sl
 800cc22:	4659      	mov	r1, fp
 800cc24:	f7f3 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d1a6      	bne.n	800cb7a <_strtod_l+0x562>
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc32:	9805      	ldr	r0, [sp, #20]
 800cc34:	462b      	mov	r3, r5
 800cc36:	463a      	mov	r2, r7
 800cc38:	f7ff f8c6 	bl	800bdc8 <__s2b>
 800cc3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f43f af05 	beq.w	800ca4e <_strtod_l+0x436>
 800cc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc46:	2a00      	cmp	r2, #0
 800cc48:	eba9 0308 	sub.w	r3, r9, r8
 800cc4c:	bfa8      	it	ge
 800cc4e:	2300      	movge	r3, #0
 800cc50:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc52:	2400      	movs	r4, #0
 800cc54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cc58:	9316      	str	r3, [sp, #88]	@ 0x58
 800cc5a:	46a0      	mov	r8, r4
 800cc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc5e:	9805      	ldr	r0, [sp, #20]
 800cc60:	6859      	ldr	r1, [r3, #4]
 800cc62:	f7ff f809 	bl	800bc78 <_Balloc>
 800cc66:	4681      	mov	r9, r0
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	f43f aef4 	beq.w	800ca56 <_strtod_l+0x43e>
 800cc6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc70:	691a      	ldr	r2, [r3, #16]
 800cc72:	3202      	adds	r2, #2
 800cc74:	f103 010c 	add.w	r1, r3, #12
 800cc78:	0092      	lsls	r2, r2, #2
 800cc7a:	300c      	adds	r0, #12
 800cc7c:	f7fe f89b 	bl	800adb6 <memcpy>
 800cc80:	ec4b ab10 	vmov	d0, sl, fp
 800cc84:	9805      	ldr	r0, [sp, #20]
 800cc86:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc88:	a91b      	add	r1, sp, #108	@ 0x6c
 800cc8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cc8e:	f7ff fbd7 	bl	800c440 <__d2b>
 800cc92:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f aede 	beq.w	800ca56 <_strtod_l+0x43e>
 800cc9a:	9805      	ldr	r0, [sp, #20]
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	f7ff f929 	bl	800bef4 <__i2b>
 800cca2:	4680      	mov	r8, r0
 800cca4:	b948      	cbnz	r0, 800ccba <_strtod_l+0x6a2>
 800cca6:	f04f 0800 	mov.w	r8, #0
 800ccaa:	e6d4      	b.n	800ca56 <_strtod_l+0x43e>
 800ccac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb4:	ea03 0a0a 	and.w	sl, r3, sl
 800ccb8:	e7b0      	b.n	800cc1c <_strtod_l+0x604>
 800ccba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ccbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ccbe:	2d00      	cmp	r5, #0
 800ccc0:	bfab      	itete	ge
 800ccc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ccc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ccc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ccc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ccca:	bfac      	ite	ge
 800cccc:	18ef      	addge	r7, r5, r3
 800ccce:	1b5e      	sublt	r6, r3, r5
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	1aed      	subs	r5, r5, r3
 800ccd4:	4415      	add	r5, r2
 800ccd6:	4b66      	ldr	r3, [pc, #408]	@ (800ce70 <_strtod_l+0x858>)
 800ccd8:	3d01      	subs	r5, #1
 800ccda:	429d      	cmp	r5, r3
 800ccdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cce0:	da50      	bge.n	800cd84 <_strtod_l+0x76c>
 800cce2:	1b5b      	subs	r3, r3, r5
 800cce4:	2b1f      	cmp	r3, #31
 800cce6:	eba2 0203 	sub.w	r2, r2, r3
 800ccea:	f04f 0101 	mov.w	r1, #1
 800ccee:	dc3d      	bgt.n	800cd6c <_strtod_l+0x754>
 800ccf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccfa:	18bd      	adds	r5, r7, r2
 800ccfc:	9b08      	ldr	r3, [sp, #32]
 800ccfe:	42af      	cmp	r7, r5
 800cd00:	4416      	add	r6, r2
 800cd02:	441e      	add	r6, r3
 800cd04:	463b      	mov	r3, r7
 800cd06:	bfa8      	it	ge
 800cd08:	462b      	movge	r3, r5
 800cd0a:	42b3      	cmp	r3, r6
 800cd0c:	bfa8      	it	ge
 800cd0e:	4633      	movge	r3, r6
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	bfc2      	ittt	gt
 800cd14:	1aed      	subgt	r5, r5, r3
 800cd16:	1af6      	subgt	r6, r6, r3
 800cd18:	1aff      	subgt	r7, r7, r3
 800cd1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dd16      	ble.n	800cd4e <_strtod_l+0x736>
 800cd20:	4641      	mov	r1, r8
 800cd22:	9805      	ldr	r0, [sp, #20]
 800cd24:	461a      	mov	r2, r3
 800cd26:	f7ff f9a5 	bl	800c074 <__pow5mult>
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d0ba      	beq.n	800cca6 <_strtod_l+0x68e>
 800cd30:	4601      	mov	r1, r0
 800cd32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd34:	9805      	ldr	r0, [sp, #20]
 800cd36:	f7ff f8f3 	bl	800bf20 <__multiply>
 800cd3a:	900e      	str	r0, [sp, #56]	@ 0x38
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f43f ae8a 	beq.w	800ca56 <_strtod_l+0x43e>
 800cd42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd44:	9805      	ldr	r0, [sp, #20]
 800cd46:	f7fe ffd7 	bl	800bcf8 <_Bfree>
 800cd4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd4e:	2d00      	cmp	r5, #0
 800cd50:	dc1d      	bgt.n	800cd8e <_strtod_l+0x776>
 800cd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dd23      	ble.n	800cda0 <_strtod_l+0x788>
 800cd58:	4649      	mov	r1, r9
 800cd5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cd5c:	9805      	ldr	r0, [sp, #20]
 800cd5e:	f7ff f989 	bl	800c074 <__pow5mult>
 800cd62:	4681      	mov	r9, r0
 800cd64:	b9e0      	cbnz	r0, 800cda0 <_strtod_l+0x788>
 800cd66:	f04f 0900 	mov.w	r9, #0
 800cd6a:	e674      	b.n	800ca56 <_strtod_l+0x43e>
 800cd6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cd70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cd74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cd78:	35e2      	adds	r5, #226	@ 0xe2
 800cd7a:	fa01 f305 	lsl.w	r3, r1, r5
 800cd7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd80:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cd82:	e7ba      	b.n	800ccfa <_strtod_l+0x6e2>
 800cd84:	2300      	movs	r3, #0
 800cd86:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd88:	2301      	movs	r3, #1
 800cd8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd8c:	e7b5      	b.n	800ccfa <_strtod_l+0x6e2>
 800cd8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd90:	9805      	ldr	r0, [sp, #20]
 800cd92:	462a      	mov	r2, r5
 800cd94:	f7ff f9c8 	bl	800c128 <__lshift>
 800cd98:	901a      	str	r0, [sp, #104]	@ 0x68
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d1d9      	bne.n	800cd52 <_strtod_l+0x73a>
 800cd9e:	e65a      	b.n	800ca56 <_strtod_l+0x43e>
 800cda0:	2e00      	cmp	r6, #0
 800cda2:	dd07      	ble.n	800cdb4 <_strtod_l+0x79c>
 800cda4:	4649      	mov	r1, r9
 800cda6:	9805      	ldr	r0, [sp, #20]
 800cda8:	4632      	mov	r2, r6
 800cdaa:	f7ff f9bd 	bl	800c128 <__lshift>
 800cdae:	4681      	mov	r9, r0
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d0d8      	beq.n	800cd66 <_strtod_l+0x74e>
 800cdb4:	2f00      	cmp	r7, #0
 800cdb6:	dd08      	ble.n	800cdca <_strtod_l+0x7b2>
 800cdb8:	4641      	mov	r1, r8
 800cdba:	9805      	ldr	r0, [sp, #20]
 800cdbc:	463a      	mov	r2, r7
 800cdbe:	f7ff f9b3 	bl	800c128 <__lshift>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f43f ae46 	beq.w	800ca56 <_strtod_l+0x43e>
 800cdca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdcc:	9805      	ldr	r0, [sp, #20]
 800cdce:	464a      	mov	r2, r9
 800cdd0:	f7ff fa32 	bl	800c238 <__mdiff>
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	f43f ae3d 	beq.w	800ca56 <_strtod_l+0x43e>
 800cddc:	68c3      	ldr	r3, [r0, #12]
 800cdde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cde0:	2300      	movs	r3, #0
 800cde2:	60c3      	str	r3, [r0, #12]
 800cde4:	4641      	mov	r1, r8
 800cde6:	f7ff fa0b 	bl	800c200 <__mcmp>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	da46      	bge.n	800ce7c <_strtod_l+0x864>
 800cdee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdf0:	ea53 030a 	orrs.w	r3, r3, sl
 800cdf4:	d16c      	bne.n	800ced0 <_strtod_l+0x8b8>
 800cdf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d168      	bne.n	800ced0 <_strtod_l+0x8b8>
 800cdfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce02:	0d1b      	lsrs	r3, r3, #20
 800ce04:	051b      	lsls	r3, r3, #20
 800ce06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce0a:	d961      	bls.n	800ced0 <_strtod_l+0x8b8>
 800ce0c:	6963      	ldr	r3, [r4, #20]
 800ce0e:	b913      	cbnz	r3, 800ce16 <_strtod_l+0x7fe>
 800ce10:	6923      	ldr	r3, [r4, #16]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	dd5c      	ble.n	800ced0 <_strtod_l+0x8b8>
 800ce16:	4621      	mov	r1, r4
 800ce18:	2201      	movs	r2, #1
 800ce1a:	9805      	ldr	r0, [sp, #20]
 800ce1c:	f7ff f984 	bl	800c128 <__lshift>
 800ce20:	4641      	mov	r1, r8
 800ce22:	4604      	mov	r4, r0
 800ce24:	f7ff f9ec 	bl	800c200 <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	dd51      	ble.n	800ced0 <_strtod_l+0x8b8>
 800ce2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce30:	9a08      	ldr	r2, [sp, #32]
 800ce32:	0d1b      	lsrs	r3, r3, #20
 800ce34:	051b      	lsls	r3, r3, #20
 800ce36:	2a00      	cmp	r2, #0
 800ce38:	d06b      	beq.n	800cf12 <_strtod_l+0x8fa>
 800ce3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce3e:	d868      	bhi.n	800cf12 <_strtod_l+0x8fa>
 800ce40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ce44:	f67f ae9d 	bls.w	800cb82 <_strtod_l+0x56a>
 800ce48:	4b0a      	ldr	r3, [pc, #40]	@ (800ce74 <_strtod_l+0x85c>)
 800ce4a:	4650      	mov	r0, sl
 800ce4c:	4659      	mov	r1, fp
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f7f3 fbda 	bl	8000608 <__aeabi_dmul>
 800ce54:	4b08      	ldr	r3, [pc, #32]	@ (800ce78 <_strtod_l+0x860>)
 800ce56:	400b      	ands	r3, r1
 800ce58:	4682      	mov	sl, r0
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f47f ae05 	bne.w	800ca6c <_strtod_l+0x454>
 800ce62:	9a05      	ldr	r2, [sp, #20]
 800ce64:	2322      	movs	r3, #34	@ 0x22
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	e600      	b.n	800ca6c <_strtod_l+0x454>
 800ce6a:	bf00      	nop
 800ce6c:	0800e810 	.word	0x0800e810
 800ce70:	fffffc02 	.word	0xfffffc02
 800ce74:	39500000 	.word	0x39500000
 800ce78:	7ff00000 	.word	0x7ff00000
 800ce7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ce80:	d165      	bne.n	800cf4e <_strtod_l+0x936>
 800ce82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce88:	b35a      	cbz	r2, 800cee2 <_strtod_l+0x8ca>
 800ce8a:	4a9f      	ldr	r2, [pc, #636]	@ (800d108 <_strtod_l+0xaf0>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d12b      	bne.n	800cee8 <_strtod_l+0x8d0>
 800ce90:	9b08      	ldr	r3, [sp, #32]
 800ce92:	4651      	mov	r1, sl
 800ce94:	b303      	cbz	r3, 800ced8 <_strtod_l+0x8c0>
 800ce96:	4b9d      	ldr	r3, [pc, #628]	@ (800d10c <_strtod_l+0xaf4>)
 800ce98:	465a      	mov	r2, fp
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cea4:	d81b      	bhi.n	800cede <_strtod_l+0x8c6>
 800cea6:	0d1b      	lsrs	r3, r3, #20
 800cea8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	4299      	cmp	r1, r3
 800ceb2:	d119      	bne.n	800cee8 <_strtod_l+0x8d0>
 800ceb4:	4b96      	ldr	r3, [pc, #600]	@ (800d110 <_strtod_l+0xaf8>)
 800ceb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d102      	bne.n	800cec2 <_strtod_l+0x8aa>
 800cebc:	3101      	adds	r1, #1
 800cebe:	f43f adca 	beq.w	800ca56 <_strtod_l+0x43e>
 800cec2:	4b92      	ldr	r3, [pc, #584]	@ (800d10c <_strtod_l+0xaf4>)
 800cec4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cec6:	401a      	ands	r2, r3
 800cec8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cecc:	f04f 0a00 	mov.w	sl, #0
 800ced0:	9b08      	ldr	r3, [sp, #32]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1b8      	bne.n	800ce48 <_strtod_l+0x830>
 800ced6:	e5c9      	b.n	800ca6c <_strtod_l+0x454>
 800ced8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cedc:	e7e8      	b.n	800ceb0 <_strtod_l+0x898>
 800cede:	4613      	mov	r3, r2
 800cee0:	e7e6      	b.n	800ceb0 <_strtod_l+0x898>
 800cee2:	ea53 030a 	orrs.w	r3, r3, sl
 800cee6:	d0a1      	beq.n	800ce2c <_strtod_l+0x814>
 800cee8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ceea:	b1db      	cbz	r3, 800cf24 <_strtod_l+0x90c>
 800ceec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceee:	4213      	tst	r3, r2
 800cef0:	d0ee      	beq.n	800ced0 <_strtod_l+0x8b8>
 800cef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef4:	9a08      	ldr	r2, [sp, #32]
 800cef6:	4650      	mov	r0, sl
 800cef8:	4659      	mov	r1, fp
 800cefa:	b1bb      	cbz	r3, 800cf2c <_strtod_l+0x914>
 800cefc:	f7ff fb6e 	bl	800c5dc <sulp>
 800cf00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf04:	ec53 2b10 	vmov	r2, r3, d0
 800cf08:	f7f3 f9c8 	bl	800029c <__adddf3>
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	468b      	mov	fp, r1
 800cf10:	e7de      	b.n	800ced0 <_strtod_l+0x8b8>
 800cf12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf1e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cf22:	e7d5      	b.n	800ced0 <_strtod_l+0x8b8>
 800cf24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf26:	ea13 0f0a 	tst.w	r3, sl
 800cf2a:	e7e1      	b.n	800cef0 <_strtod_l+0x8d8>
 800cf2c:	f7ff fb56 	bl	800c5dc <sulp>
 800cf30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf34:	ec53 2b10 	vmov	r2, r3, d0
 800cf38:	f7f3 f9ae 	bl	8000298 <__aeabi_dsub>
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2300      	movs	r3, #0
 800cf40:	4682      	mov	sl, r0
 800cf42:	468b      	mov	fp, r1
 800cf44:	f7f3 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d0c1      	beq.n	800ced0 <_strtod_l+0x8b8>
 800cf4c:	e619      	b.n	800cb82 <_strtod_l+0x56a>
 800cf4e:	4641      	mov	r1, r8
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7ff facd 	bl	800c4f0 <__ratio>
 800cf56:	ec57 6b10 	vmov	r6, r7, d0
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	f7f3 fdcc 	bl	8000b00 <__aeabi_dcmple>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d06f      	beq.n	800d04c <_strtod_l+0xa34>
 800cf6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d17a      	bne.n	800d068 <_strtod_l+0xa50>
 800cf72:	f1ba 0f00 	cmp.w	sl, #0
 800cf76:	d158      	bne.n	800d02a <_strtod_l+0xa12>
 800cf78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d15a      	bne.n	800d038 <_strtod_l+0xa20>
 800cf82:	4b64      	ldr	r3, [pc, #400]	@ (800d114 <_strtod_l+0xafc>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	4630      	mov	r0, r6
 800cf88:	4639      	mov	r1, r7
 800cf8a:	f7f3 fdaf 	bl	8000aec <__aeabi_dcmplt>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d159      	bne.n	800d046 <_strtod_l+0xa2e>
 800cf92:	4630      	mov	r0, r6
 800cf94:	4639      	mov	r1, r7
 800cf96:	4b60      	ldr	r3, [pc, #384]	@ (800d118 <_strtod_l+0xb00>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f7f3 fb35 	bl	8000608 <__aeabi_dmul>
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	460f      	mov	r7, r1
 800cfa2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cfa6:	9606      	str	r6, [sp, #24]
 800cfa8:	9307      	str	r3, [sp, #28]
 800cfaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfae:	4d57      	ldr	r5, [pc, #348]	@ (800d10c <_strtod_l+0xaf4>)
 800cfb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cfb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfb6:	401d      	ands	r5, r3
 800cfb8:	4b58      	ldr	r3, [pc, #352]	@ (800d11c <_strtod_l+0xb04>)
 800cfba:	429d      	cmp	r5, r3
 800cfbc:	f040 80b2 	bne.w	800d124 <_strtod_l+0xb0c>
 800cfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cfc6:	ec4b ab10 	vmov	d0, sl, fp
 800cfca:	f7ff f9c9 	bl	800c360 <__ulp>
 800cfce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfd2:	ec51 0b10 	vmov	r0, r1, d0
 800cfd6:	f7f3 fb17 	bl	8000608 <__aeabi_dmul>
 800cfda:	4652      	mov	r2, sl
 800cfdc:	465b      	mov	r3, fp
 800cfde:	f7f3 f95d 	bl	800029c <__adddf3>
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4949      	ldr	r1, [pc, #292]	@ (800d10c <_strtod_l+0xaf4>)
 800cfe6:	4a4e      	ldr	r2, [pc, #312]	@ (800d120 <_strtod_l+0xb08>)
 800cfe8:	4019      	ands	r1, r3
 800cfea:	4291      	cmp	r1, r2
 800cfec:	4682      	mov	sl, r0
 800cfee:	d942      	bls.n	800d076 <_strtod_l+0xa5e>
 800cff0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cff2:	4b47      	ldr	r3, [pc, #284]	@ (800d110 <_strtod_l+0xaf8>)
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d103      	bne.n	800d000 <_strtod_l+0x9e8>
 800cff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cffa:	3301      	adds	r3, #1
 800cffc:	f43f ad2b 	beq.w	800ca56 <_strtod_l+0x43e>
 800d000:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d110 <_strtod_l+0xaf8>
 800d004:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d008:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d00a:	9805      	ldr	r0, [sp, #20]
 800d00c:	f7fe fe74 	bl	800bcf8 <_Bfree>
 800d010:	9805      	ldr	r0, [sp, #20]
 800d012:	4649      	mov	r1, r9
 800d014:	f7fe fe70 	bl	800bcf8 <_Bfree>
 800d018:	9805      	ldr	r0, [sp, #20]
 800d01a:	4641      	mov	r1, r8
 800d01c:	f7fe fe6c 	bl	800bcf8 <_Bfree>
 800d020:	9805      	ldr	r0, [sp, #20]
 800d022:	4621      	mov	r1, r4
 800d024:	f7fe fe68 	bl	800bcf8 <_Bfree>
 800d028:	e618      	b.n	800cc5c <_strtod_l+0x644>
 800d02a:	f1ba 0f01 	cmp.w	sl, #1
 800d02e:	d103      	bne.n	800d038 <_strtod_l+0xa20>
 800d030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d032:	2b00      	cmp	r3, #0
 800d034:	f43f ada5 	beq.w	800cb82 <_strtod_l+0x56a>
 800d038:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d0e8 <_strtod_l+0xad0>
 800d03c:	4f35      	ldr	r7, [pc, #212]	@ (800d114 <_strtod_l+0xafc>)
 800d03e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d042:	2600      	movs	r6, #0
 800d044:	e7b1      	b.n	800cfaa <_strtod_l+0x992>
 800d046:	4f34      	ldr	r7, [pc, #208]	@ (800d118 <_strtod_l+0xb00>)
 800d048:	2600      	movs	r6, #0
 800d04a:	e7aa      	b.n	800cfa2 <_strtod_l+0x98a>
 800d04c:	4b32      	ldr	r3, [pc, #200]	@ (800d118 <_strtod_l+0xb00>)
 800d04e:	4630      	mov	r0, r6
 800d050:	4639      	mov	r1, r7
 800d052:	2200      	movs	r2, #0
 800d054:	f7f3 fad8 	bl	8000608 <__aeabi_dmul>
 800d058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d05a:	4606      	mov	r6, r0
 800d05c:	460f      	mov	r7, r1
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d09f      	beq.n	800cfa2 <_strtod_l+0x98a>
 800d062:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d066:	e7a0      	b.n	800cfaa <_strtod_l+0x992>
 800d068:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d0f0 <_strtod_l+0xad8>
 800d06c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d070:	ec57 6b17 	vmov	r6, r7, d7
 800d074:	e799      	b.n	800cfaa <_strtod_l+0x992>
 800d076:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d07a:	9b08      	ldr	r3, [sp, #32]
 800d07c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1c1      	bne.n	800d008 <_strtod_l+0x9f0>
 800d084:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d088:	0d1b      	lsrs	r3, r3, #20
 800d08a:	051b      	lsls	r3, r3, #20
 800d08c:	429d      	cmp	r5, r3
 800d08e:	d1bb      	bne.n	800d008 <_strtod_l+0x9f0>
 800d090:	4630      	mov	r0, r6
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 fe18 	bl	8000cc8 <__aeabi_d2lz>
 800d098:	f7f3 fa88 	bl	80005ac <__aeabi_l2d>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	f7f3 f8f8 	bl	8000298 <__aeabi_dsub>
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d0b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0b6:	ea46 060a 	orr.w	r6, r6, sl
 800d0ba:	431e      	orrs	r6, r3
 800d0bc:	d06f      	beq.n	800d19e <_strtod_l+0xb86>
 800d0be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0f8 <_strtod_l+0xae0>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	f7f3 fd12 	bl	8000aec <__aeabi_dcmplt>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	f47f accf 	bne.w	800ca6c <_strtod_l+0x454>
 800d0ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800d100 <_strtod_l+0xae8>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0d8:	f7f3 fd26 	bl	8000b28 <__aeabi_dcmpgt>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d093      	beq.n	800d008 <_strtod_l+0x9f0>
 800d0e0:	e4c4      	b.n	800ca6c <_strtod_l+0x454>
 800d0e2:	bf00      	nop
 800d0e4:	f3af 8000 	nop.w
 800d0e8:	00000000 	.word	0x00000000
 800d0ec:	bff00000 	.word	0xbff00000
 800d0f0:	00000000 	.word	0x00000000
 800d0f4:	3ff00000 	.word	0x3ff00000
 800d0f8:	94a03595 	.word	0x94a03595
 800d0fc:	3fdfffff 	.word	0x3fdfffff
 800d100:	35afe535 	.word	0x35afe535
 800d104:	3fe00000 	.word	0x3fe00000
 800d108:	000fffff 	.word	0x000fffff
 800d10c:	7ff00000 	.word	0x7ff00000
 800d110:	7fefffff 	.word	0x7fefffff
 800d114:	3ff00000 	.word	0x3ff00000
 800d118:	3fe00000 	.word	0x3fe00000
 800d11c:	7fe00000 	.word	0x7fe00000
 800d120:	7c9fffff 	.word	0x7c9fffff
 800d124:	9b08      	ldr	r3, [sp, #32]
 800d126:	b323      	cbz	r3, 800d172 <_strtod_l+0xb5a>
 800d128:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d12c:	d821      	bhi.n	800d172 <_strtod_l+0xb5a>
 800d12e:	a328      	add	r3, pc, #160	@ (adr r3, 800d1d0 <_strtod_l+0xbb8>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 fce2 	bl	8000b00 <__aeabi_dcmple>
 800d13c:	b1a0      	cbz	r0, 800d168 <_strtod_l+0xb50>
 800d13e:	4639      	mov	r1, r7
 800d140:	4630      	mov	r0, r6
 800d142:	f7f3 fd39 	bl	8000bb8 <__aeabi_d2uiz>
 800d146:	2801      	cmp	r0, #1
 800d148:	bf38      	it	cc
 800d14a:	2001      	movcc	r0, #1
 800d14c:	f7f3 f9e2 	bl	8000514 <__aeabi_ui2d>
 800d150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d152:	4606      	mov	r6, r0
 800d154:	460f      	mov	r7, r1
 800d156:	b9fb      	cbnz	r3, 800d198 <_strtod_l+0xb80>
 800d158:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d15c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d15e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d160:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d164:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d168:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d16a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d16e:	1b5b      	subs	r3, r3, r5
 800d170:	9311      	str	r3, [sp, #68]	@ 0x44
 800d172:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d176:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d17a:	f7ff f8f1 	bl	800c360 <__ulp>
 800d17e:	4650      	mov	r0, sl
 800d180:	ec53 2b10 	vmov	r2, r3, d0
 800d184:	4659      	mov	r1, fp
 800d186:	f7f3 fa3f 	bl	8000608 <__aeabi_dmul>
 800d18a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d18e:	f7f3 f885 	bl	800029c <__adddf3>
 800d192:	4682      	mov	sl, r0
 800d194:	468b      	mov	fp, r1
 800d196:	e770      	b.n	800d07a <_strtod_l+0xa62>
 800d198:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d19c:	e7e0      	b.n	800d160 <_strtod_l+0xb48>
 800d19e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d1d8 <_strtod_l+0xbc0>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 fca2 	bl	8000aec <__aeabi_dcmplt>
 800d1a8:	e798      	b.n	800d0dc <_strtod_l+0xac4>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d1b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	f7ff ba6d 	b.w	800c692 <_strtod_l+0x7a>
 800d1b8:	2a65      	cmp	r2, #101	@ 0x65
 800d1ba:	f43f ab66 	beq.w	800c88a <_strtod_l+0x272>
 800d1be:	2a45      	cmp	r2, #69	@ 0x45
 800d1c0:	f43f ab63 	beq.w	800c88a <_strtod_l+0x272>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	f7ff bb9e 	b.w	800c906 <_strtod_l+0x2ee>
 800d1ca:	bf00      	nop
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	ffc00000 	.word	0xffc00000
 800d1d4:	41dfffff 	.word	0x41dfffff
 800d1d8:	94a03595 	.word	0x94a03595
 800d1dc:	3fcfffff 	.word	0x3fcfffff

0800d1e0 <_strtod_r>:
 800d1e0:	4b01      	ldr	r3, [pc, #4]	@ (800d1e8 <_strtod_r+0x8>)
 800d1e2:	f7ff ba19 	b.w	800c618 <_strtod_l>
 800d1e6:	bf00      	nop
 800d1e8:	20000070 	.word	0x20000070

0800d1ec <_strtol_l.constprop.0>:
 800d1ec:	2b24      	cmp	r3, #36	@ 0x24
 800d1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f2:	4686      	mov	lr, r0
 800d1f4:	4690      	mov	r8, r2
 800d1f6:	d801      	bhi.n	800d1fc <_strtol_l.constprop.0+0x10>
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d106      	bne.n	800d20a <_strtol_l.constprop.0+0x1e>
 800d1fc:	f7fd fdae 	bl	800ad5c <__errno>
 800d200:	2316      	movs	r3, #22
 800d202:	6003      	str	r3, [r0, #0]
 800d204:	2000      	movs	r0, #0
 800d206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20a:	4834      	ldr	r0, [pc, #208]	@ (800d2dc <_strtol_l.constprop.0+0xf0>)
 800d20c:	460d      	mov	r5, r1
 800d20e:	462a      	mov	r2, r5
 800d210:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d214:	5d06      	ldrb	r6, [r0, r4]
 800d216:	f016 0608 	ands.w	r6, r6, #8
 800d21a:	d1f8      	bne.n	800d20e <_strtol_l.constprop.0+0x22>
 800d21c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d21e:	d12d      	bne.n	800d27c <_strtol_l.constprop.0+0x90>
 800d220:	782c      	ldrb	r4, [r5, #0]
 800d222:	2601      	movs	r6, #1
 800d224:	1c95      	adds	r5, r2, #2
 800d226:	f033 0210 	bics.w	r2, r3, #16
 800d22a:	d109      	bne.n	800d240 <_strtol_l.constprop.0+0x54>
 800d22c:	2c30      	cmp	r4, #48	@ 0x30
 800d22e:	d12a      	bne.n	800d286 <_strtol_l.constprop.0+0x9a>
 800d230:	782a      	ldrb	r2, [r5, #0]
 800d232:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d236:	2a58      	cmp	r2, #88	@ 0x58
 800d238:	d125      	bne.n	800d286 <_strtol_l.constprop.0+0x9a>
 800d23a:	786c      	ldrb	r4, [r5, #1]
 800d23c:	2310      	movs	r3, #16
 800d23e:	3502      	adds	r5, #2
 800d240:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d244:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d248:	2200      	movs	r2, #0
 800d24a:	fbbc f9f3 	udiv	r9, ip, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	fb03 ca19 	mls	sl, r3, r9, ip
 800d254:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d258:	2f09      	cmp	r7, #9
 800d25a:	d81b      	bhi.n	800d294 <_strtol_l.constprop.0+0xa8>
 800d25c:	463c      	mov	r4, r7
 800d25e:	42a3      	cmp	r3, r4
 800d260:	dd27      	ble.n	800d2b2 <_strtol_l.constprop.0+0xc6>
 800d262:	1c57      	adds	r7, r2, #1
 800d264:	d007      	beq.n	800d276 <_strtol_l.constprop.0+0x8a>
 800d266:	4581      	cmp	r9, r0
 800d268:	d320      	bcc.n	800d2ac <_strtol_l.constprop.0+0xc0>
 800d26a:	d101      	bne.n	800d270 <_strtol_l.constprop.0+0x84>
 800d26c:	45a2      	cmp	sl, r4
 800d26e:	db1d      	blt.n	800d2ac <_strtol_l.constprop.0+0xc0>
 800d270:	fb00 4003 	mla	r0, r0, r3, r4
 800d274:	2201      	movs	r2, #1
 800d276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d27a:	e7eb      	b.n	800d254 <_strtol_l.constprop.0+0x68>
 800d27c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d27e:	bf04      	itt	eq
 800d280:	782c      	ldrbeq	r4, [r5, #0]
 800d282:	1c95      	addeq	r5, r2, #2
 800d284:	e7cf      	b.n	800d226 <_strtol_l.constprop.0+0x3a>
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1da      	bne.n	800d240 <_strtol_l.constprop.0+0x54>
 800d28a:	2c30      	cmp	r4, #48	@ 0x30
 800d28c:	bf0c      	ite	eq
 800d28e:	2308      	moveq	r3, #8
 800d290:	230a      	movne	r3, #10
 800d292:	e7d5      	b.n	800d240 <_strtol_l.constprop.0+0x54>
 800d294:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d298:	2f19      	cmp	r7, #25
 800d29a:	d801      	bhi.n	800d2a0 <_strtol_l.constprop.0+0xb4>
 800d29c:	3c37      	subs	r4, #55	@ 0x37
 800d29e:	e7de      	b.n	800d25e <_strtol_l.constprop.0+0x72>
 800d2a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d2a4:	2f19      	cmp	r7, #25
 800d2a6:	d804      	bhi.n	800d2b2 <_strtol_l.constprop.0+0xc6>
 800d2a8:	3c57      	subs	r4, #87	@ 0x57
 800d2aa:	e7d8      	b.n	800d25e <_strtol_l.constprop.0+0x72>
 800d2ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2b0:	e7e1      	b.n	800d276 <_strtol_l.constprop.0+0x8a>
 800d2b2:	1c53      	adds	r3, r2, #1
 800d2b4:	d108      	bne.n	800d2c8 <_strtol_l.constprop.0+0xdc>
 800d2b6:	2322      	movs	r3, #34	@ 0x22
 800d2b8:	f8ce 3000 	str.w	r3, [lr]
 800d2bc:	4660      	mov	r0, ip
 800d2be:	f1b8 0f00 	cmp.w	r8, #0
 800d2c2:	d0a0      	beq.n	800d206 <_strtol_l.constprop.0+0x1a>
 800d2c4:	1e69      	subs	r1, r5, #1
 800d2c6:	e006      	b.n	800d2d6 <_strtol_l.constprop.0+0xea>
 800d2c8:	b106      	cbz	r6, 800d2cc <_strtol_l.constprop.0+0xe0>
 800d2ca:	4240      	negs	r0, r0
 800d2cc:	f1b8 0f00 	cmp.w	r8, #0
 800d2d0:	d099      	beq.n	800d206 <_strtol_l.constprop.0+0x1a>
 800d2d2:	2a00      	cmp	r2, #0
 800d2d4:	d1f6      	bne.n	800d2c4 <_strtol_l.constprop.0+0xd8>
 800d2d6:	f8c8 1000 	str.w	r1, [r8]
 800d2da:	e794      	b.n	800d206 <_strtol_l.constprop.0+0x1a>
 800d2dc:	0800e839 	.word	0x0800e839

0800d2e0 <_strtol_r>:
 800d2e0:	f7ff bf84 	b.w	800d1ec <_strtol_l.constprop.0>

0800d2e4 <__ssputs_r>:
 800d2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e8:	688e      	ldr	r6, [r1, #8]
 800d2ea:	461f      	mov	r7, r3
 800d2ec:	42be      	cmp	r6, r7
 800d2ee:	680b      	ldr	r3, [r1, #0]
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	4690      	mov	r8, r2
 800d2f6:	d82d      	bhi.n	800d354 <__ssputs_r+0x70>
 800d2f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d300:	d026      	beq.n	800d350 <__ssputs_r+0x6c>
 800d302:	6965      	ldr	r5, [r4, #20]
 800d304:	6909      	ldr	r1, [r1, #16]
 800d306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d30a:	eba3 0901 	sub.w	r9, r3, r1
 800d30e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d312:	1c7b      	adds	r3, r7, #1
 800d314:	444b      	add	r3, r9
 800d316:	106d      	asrs	r5, r5, #1
 800d318:	429d      	cmp	r5, r3
 800d31a:	bf38      	it	cc
 800d31c:	461d      	movcc	r5, r3
 800d31e:	0553      	lsls	r3, r2, #21
 800d320:	d527      	bpl.n	800d372 <__ssputs_r+0x8e>
 800d322:	4629      	mov	r1, r5
 800d324:	f7fe fc1c 	bl	800bb60 <_malloc_r>
 800d328:	4606      	mov	r6, r0
 800d32a:	b360      	cbz	r0, 800d386 <__ssputs_r+0xa2>
 800d32c:	6921      	ldr	r1, [r4, #16]
 800d32e:	464a      	mov	r2, r9
 800d330:	f7fd fd41 	bl	800adb6 <memcpy>
 800d334:	89a3      	ldrh	r3, [r4, #12]
 800d336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	6126      	str	r6, [r4, #16]
 800d342:	6165      	str	r5, [r4, #20]
 800d344:	444e      	add	r6, r9
 800d346:	eba5 0509 	sub.w	r5, r5, r9
 800d34a:	6026      	str	r6, [r4, #0]
 800d34c:	60a5      	str	r5, [r4, #8]
 800d34e:	463e      	mov	r6, r7
 800d350:	42be      	cmp	r6, r7
 800d352:	d900      	bls.n	800d356 <__ssputs_r+0x72>
 800d354:	463e      	mov	r6, r7
 800d356:	6820      	ldr	r0, [r4, #0]
 800d358:	4632      	mov	r2, r6
 800d35a:	4641      	mov	r1, r8
 800d35c:	f000 f9c6 	bl	800d6ec <memmove>
 800d360:	68a3      	ldr	r3, [r4, #8]
 800d362:	1b9b      	subs	r3, r3, r6
 800d364:	60a3      	str	r3, [r4, #8]
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	4433      	add	r3, r6
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	2000      	movs	r0, #0
 800d36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d372:	462a      	mov	r2, r5
 800d374:	f000 fd7d 	bl	800de72 <_realloc_r>
 800d378:	4606      	mov	r6, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d1e0      	bne.n	800d340 <__ssputs_r+0x5c>
 800d37e:	6921      	ldr	r1, [r4, #16]
 800d380:	4650      	mov	r0, sl
 800d382:	f7fe fb79 	bl	800ba78 <_free_r>
 800d386:	230c      	movs	r3, #12
 800d388:	f8ca 3000 	str.w	r3, [sl]
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d392:	81a3      	strh	r3, [r4, #12]
 800d394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d398:	e7e9      	b.n	800d36e <__ssputs_r+0x8a>
	...

0800d39c <_svfiprintf_r>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	4698      	mov	r8, r3
 800d3a2:	898b      	ldrh	r3, [r1, #12]
 800d3a4:	061b      	lsls	r3, r3, #24
 800d3a6:	b09d      	sub	sp, #116	@ 0x74
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	d510      	bpl.n	800d3d2 <_svfiprintf_r+0x36>
 800d3b0:	690b      	ldr	r3, [r1, #16]
 800d3b2:	b973      	cbnz	r3, 800d3d2 <_svfiprintf_r+0x36>
 800d3b4:	2140      	movs	r1, #64	@ 0x40
 800d3b6:	f7fe fbd3 	bl	800bb60 <_malloc_r>
 800d3ba:	6028      	str	r0, [r5, #0]
 800d3bc:	6128      	str	r0, [r5, #16]
 800d3be:	b930      	cbnz	r0, 800d3ce <_svfiprintf_r+0x32>
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3c8:	b01d      	add	sp, #116	@ 0x74
 800d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ce:	2340      	movs	r3, #64	@ 0x40
 800d3d0:	616b      	str	r3, [r5, #20]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d6:	2320      	movs	r3, #32
 800d3d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3e0:	2330      	movs	r3, #48	@ 0x30
 800d3e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d580 <_svfiprintf_r+0x1e4>
 800d3e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3ea:	f04f 0901 	mov.w	r9, #1
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	469a      	mov	sl, r3
 800d3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f6:	b10a      	cbz	r2, 800d3fc <_svfiprintf_r+0x60>
 800d3f8:	2a25      	cmp	r2, #37	@ 0x25
 800d3fa:	d1f9      	bne.n	800d3f0 <_svfiprintf_r+0x54>
 800d3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d400:	d00b      	beq.n	800d41a <_svfiprintf_r+0x7e>
 800d402:	465b      	mov	r3, fp
 800d404:	4622      	mov	r2, r4
 800d406:	4629      	mov	r1, r5
 800d408:	4638      	mov	r0, r7
 800d40a:	f7ff ff6b 	bl	800d2e4 <__ssputs_r>
 800d40e:	3001      	adds	r0, #1
 800d410:	f000 80a7 	beq.w	800d562 <_svfiprintf_r+0x1c6>
 800d414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d416:	445a      	add	r2, fp
 800d418:	9209      	str	r2, [sp, #36]	@ 0x24
 800d41a:	f89a 3000 	ldrb.w	r3, [sl]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 809f 	beq.w	800d562 <_svfiprintf_r+0x1c6>
 800d424:	2300      	movs	r3, #0
 800d426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42e:	f10a 0a01 	add.w	sl, sl, #1
 800d432:	9304      	str	r3, [sp, #16]
 800d434:	9307      	str	r3, [sp, #28]
 800d436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d43a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d43c:	4654      	mov	r4, sl
 800d43e:	2205      	movs	r2, #5
 800d440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d444:	484e      	ldr	r0, [pc, #312]	@ (800d580 <_svfiprintf_r+0x1e4>)
 800d446:	f7f2 fecb 	bl	80001e0 <memchr>
 800d44a:	9a04      	ldr	r2, [sp, #16]
 800d44c:	b9d8      	cbnz	r0, 800d486 <_svfiprintf_r+0xea>
 800d44e:	06d0      	lsls	r0, r2, #27
 800d450:	bf44      	itt	mi
 800d452:	2320      	movmi	r3, #32
 800d454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d458:	0711      	lsls	r1, r2, #28
 800d45a:	bf44      	itt	mi
 800d45c:	232b      	movmi	r3, #43	@ 0x2b
 800d45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d462:	f89a 3000 	ldrb.w	r3, [sl]
 800d466:	2b2a      	cmp	r3, #42	@ 0x2a
 800d468:	d015      	beq.n	800d496 <_svfiprintf_r+0xfa>
 800d46a:	9a07      	ldr	r2, [sp, #28]
 800d46c:	4654      	mov	r4, sl
 800d46e:	2000      	movs	r0, #0
 800d470:	f04f 0c0a 	mov.w	ip, #10
 800d474:	4621      	mov	r1, r4
 800d476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d47a:	3b30      	subs	r3, #48	@ 0x30
 800d47c:	2b09      	cmp	r3, #9
 800d47e:	d94b      	bls.n	800d518 <_svfiprintf_r+0x17c>
 800d480:	b1b0      	cbz	r0, 800d4b0 <_svfiprintf_r+0x114>
 800d482:	9207      	str	r2, [sp, #28]
 800d484:	e014      	b.n	800d4b0 <_svfiprintf_r+0x114>
 800d486:	eba0 0308 	sub.w	r3, r0, r8
 800d48a:	fa09 f303 	lsl.w	r3, r9, r3
 800d48e:	4313      	orrs	r3, r2
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	46a2      	mov	sl, r4
 800d494:	e7d2      	b.n	800d43c <_svfiprintf_r+0xa0>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	1d19      	adds	r1, r3, #4
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	9103      	str	r1, [sp, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	bfbb      	ittet	lt
 800d4a2:	425b      	neglt	r3, r3
 800d4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4a8:	9307      	strge	r3, [sp, #28]
 800d4aa:	9307      	strlt	r3, [sp, #28]
 800d4ac:	bfb8      	it	lt
 800d4ae:	9204      	strlt	r2, [sp, #16]
 800d4b0:	7823      	ldrb	r3, [r4, #0]
 800d4b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4b4:	d10a      	bne.n	800d4cc <_svfiprintf_r+0x130>
 800d4b6:	7863      	ldrb	r3, [r4, #1]
 800d4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ba:	d132      	bne.n	800d522 <_svfiprintf_r+0x186>
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	1d1a      	adds	r2, r3, #4
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	9203      	str	r2, [sp, #12]
 800d4c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4c8:	3402      	adds	r4, #2
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d590 <_svfiprintf_r+0x1f4>
 800d4d0:	7821      	ldrb	r1, [r4, #0]
 800d4d2:	2203      	movs	r2, #3
 800d4d4:	4650      	mov	r0, sl
 800d4d6:	f7f2 fe83 	bl	80001e0 <memchr>
 800d4da:	b138      	cbz	r0, 800d4ec <_svfiprintf_r+0x150>
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	eba0 000a 	sub.w	r0, r0, sl
 800d4e2:	2240      	movs	r2, #64	@ 0x40
 800d4e4:	4082      	lsls	r2, r0
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	3401      	adds	r4, #1
 800d4ea:	9304      	str	r3, [sp, #16]
 800d4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f0:	4824      	ldr	r0, [pc, #144]	@ (800d584 <_svfiprintf_r+0x1e8>)
 800d4f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4f6:	2206      	movs	r2, #6
 800d4f8:	f7f2 fe72 	bl	80001e0 <memchr>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d036      	beq.n	800d56e <_svfiprintf_r+0x1d2>
 800d500:	4b21      	ldr	r3, [pc, #132]	@ (800d588 <_svfiprintf_r+0x1ec>)
 800d502:	bb1b      	cbnz	r3, 800d54c <_svfiprintf_r+0x1b0>
 800d504:	9b03      	ldr	r3, [sp, #12]
 800d506:	3307      	adds	r3, #7
 800d508:	f023 0307 	bic.w	r3, r3, #7
 800d50c:	3308      	adds	r3, #8
 800d50e:	9303      	str	r3, [sp, #12]
 800d510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d512:	4433      	add	r3, r6
 800d514:	9309      	str	r3, [sp, #36]	@ 0x24
 800d516:	e76a      	b.n	800d3ee <_svfiprintf_r+0x52>
 800d518:	fb0c 3202 	mla	r2, ip, r2, r3
 800d51c:	460c      	mov	r4, r1
 800d51e:	2001      	movs	r0, #1
 800d520:	e7a8      	b.n	800d474 <_svfiprintf_r+0xd8>
 800d522:	2300      	movs	r3, #0
 800d524:	3401      	adds	r4, #1
 800d526:	9305      	str	r3, [sp, #20]
 800d528:	4619      	mov	r1, r3
 800d52a:	f04f 0c0a 	mov.w	ip, #10
 800d52e:	4620      	mov	r0, r4
 800d530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d534:	3a30      	subs	r2, #48	@ 0x30
 800d536:	2a09      	cmp	r2, #9
 800d538:	d903      	bls.n	800d542 <_svfiprintf_r+0x1a6>
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0c6      	beq.n	800d4cc <_svfiprintf_r+0x130>
 800d53e:	9105      	str	r1, [sp, #20]
 800d540:	e7c4      	b.n	800d4cc <_svfiprintf_r+0x130>
 800d542:	fb0c 2101 	mla	r1, ip, r1, r2
 800d546:	4604      	mov	r4, r0
 800d548:	2301      	movs	r3, #1
 800d54a:	e7f0      	b.n	800d52e <_svfiprintf_r+0x192>
 800d54c:	ab03      	add	r3, sp, #12
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	462a      	mov	r2, r5
 800d552:	4b0e      	ldr	r3, [pc, #56]	@ (800d58c <_svfiprintf_r+0x1f0>)
 800d554:	a904      	add	r1, sp, #16
 800d556:	4638      	mov	r0, r7
 800d558:	f7fc fc66 	bl	8009e28 <_printf_float>
 800d55c:	1c42      	adds	r2, r0, #1
 800d55e:	4606      	mov	r6, r0
 800d560:	d1d6      	bne.n	800d510 <_svfiprintf_r+0x174>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	065b      	lsls	r3, r3, #25
 800d566:	f53f af2d 	bmi.w	800d3c4 <_svfiprintf_r+0x28>
 800d56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d56c:	e72c      	b.n	800d3c8 <_svfiprintf_r+0x2c>
 800d56e:	ab03      	add	r3, sp, #12
 800d570:	9300      	str	r3, [sp, #0]
 800d572:	462a      	mov	r2, r5
 800d574:	4b05      	ldr	r3, [pc, #20]	@ (800d58c <_svfiprintf_r+0x1f0>)
 800d576:	a904      	add	r1, sp, #16
 800d578:	4638      	mov	r0, r7
 800d57a:	f7fc feed 	bl	800a358 <_printf_i>
 800d57e:	e7ed      	b.n	800d55c <_svfiprintf_r+0x1c0>
 800d580:	0800e939 	.word	0x0800e939
 800d584:	0800e943 	.word	0x0800e943
 800d588:	08009e29 	.word	0x08009e29
 800d58c:	0800d2e5 	.word	0x0800d2e5
 800d590:	0800e93f 	.word	0x0800e93f

0800d594 <__sflush_r>:
 800d594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59c:	0716      	lsls	r6, r2, #28
 800d59e:	4605      	mov	r5, r0
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	d454      	bmi.n	800d64e <__sflush_r+0xba>
 800d5a4:	684b      	ldr	r3, [r1, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	dc02      	bgt.n	800d5b0 <__sflush_r+0x1c>
 800d5aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dd48      	ble.n	800d642 <__sflush_r+0xae>
 800d5b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5b2:	2e00      	cmp	r6, #0
 800d5b4:	d045      	beq.n	800d642 <__sflush_r+0xae>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5bc:	682f      	ldr	r7, [r5, #0]
 800d5be:	6a21      	ldr	r1, [r4, #32]
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	d030      	beq.n	800d626 <__sflush_r+0x92>
 800d5c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	0759      	lsls	r1, r3, #29
 800d5ca:	d505      	bpl.n	800d5d8 <__sflush_r+0x44>
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5d2:	b10b      	cbz	r3, 800d5d8 <__sflush_r+0x44>
 800d5d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5d6:	1ad2      	subs	r2, r2, r3
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5dc:	6a21      	ldr	r1, [r4, #32]
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b0      	blx	r6
 800d5e2:	1c43      	adds	r3, r0, #1
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	d106      	bne.n	800d5f6 <__sflush_r+0x62>
 800d5e8:	6829      	ldr	r1, [r5, #0]
 800d5ea:	291d      	cmp	r1, #29
 800d5ec:	d82b      	bhi.n	800d646 <__sflush_r+0xb2>
 800d5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d698 <__sflush_r+0x104>)
 800d5f0:	410a      	asrs	r2, r1
 800d5f2:	07d6      	lsls	r6, r2, #31
 800d5f4:	d427      	bmi.n	800d646 <__sflush_r+0xb2>
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	6062      	str	r2, [r4, #4]
 800d5fa:	04d9      	lsls	r1, r3, #19
 800d5fc:	6922      	ldr	r2, [r4, #16]
 800d5fe:	6022      	str	r2, [r4, #0]
 800d600:	d504      	bpl.n	800d60c <__sflush_r+0x78>
 800d602:	1c42      	adds	r2, r0, #1
 800d604:	d101      	bne.n	800d60a <__sflush_r+0x76>
 800d606:	682b      	ldr	r3, [r5, #0]
 800d608:	b903      	cbnz	r3, 800d60c <__sflush_r+0x78>
 800d60a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d60e:	602f      	str	r7, [r5, #0]
 800d610:	b1b9      	cbz	r1, 800d642 <__sflush_r+0xae>
 800d612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d616:	4299      	cmp	r1, r3
 800d618:	d002      	beq.n	800d620 <__sflush_r+0x8c>
 800d61a:	4628      	mov	r0, r5
 800d61c:	f7fe fa2c 	bl	800ba78 <_free_r>
 800d620:	2300      	movs	r3, #0
 800d622:	6363      	str	r3, [r4, #52]	@ 0x34
 800d624:	e00d      	b.n	800d642 <__sflush_r+0xae>
 800d626:	2301      	movs	r3, #1
 800d628:	4628      	mov	r0, r5
 800d62a:	47b0      	blx	r6
 800d62c:	4602      	mov	r2, r0
 800d62e:	1c50      	adds	r0, r2, #1
 800d630:	d1c9      	bne.n	800d5c6 <__sflush_r+0x32>
 800d632:	682b      	ldr	r3, [r5, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0c6      	beq.n	800d5c6 <__sflush_r+0x32>
 800d638:	2b1d      	cmp	r3, #29
 800d63a:	d001      	beq.n	800d640 <__sflush_r+0xac>
 800d63c:	2b16      	cmp	r3, #22
 800d63e:	d11e      	bne.n	800d67e <__sflush_r+0xea>
 800d640:	602f      	str	r7, [r5, #0]
 800d642:	2000      	movs	r0, #0
 800d644:	e022      	b.n	800d68c <__sflush_r+0xf8>
 800d646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d64a:	b21b      	sxth	r3, r3
 800d64c:	e01b      	b.n	800d686 <__sflush_r+0xf2>
 800d64e:	690f      	ldr	r7, [r1, #16]
 800d650:	2f00      	cmp	r7, #0
 800d652:	d0f6      	beq.n	800d642 <__sflush_r+0xae>
 800d654:	0793      	lsls	r3, r2, #30
 800d656:	680e      	ldr	r6, [r1, #0]
 800d658:	bf08      	it	eq
 800d65a:	694b      	ldreq	r3, [r1, #20]
 800d65c:	600f      	str	r7, [r1, #0]
 800d65e:	bf18      	it	ne
 800d660:	2300      	movne	r3, #0
 800d662:	eba6 0807 	sub.w	r8, r6, r7
 800d666:	608b      	str	r3, [r1, #8]
 800d668:	f1b8 0f00 	cmp.w	r8, #0
 800d66c:	dde9      	ble.n	800d642 <__sflush_r+0xae>
 800d66e:	6a21      	ldr	r1, [r4, #32]
 800d670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d672:	4643      	mov	r3, r8
 800d674:	463a      	mov	r2, r7
 800d676:	4628      	mov	r0, r5
 800d678:	47b0      	blx	r6
 800d67a:	2800      	cmp	r0, #0
 800d67c:	dc08      	bgt.n	800d690 <__sflush_r+0xfc>
 800d67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d686:	81a3      	strh	r3, [r4, #12]
 800d688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d690:	4407      	add	r7, r0
 800d692:	eba8 0800 	sub.w	r8, r8, r0
 800d696:	e7e7      	b.n	800d668 <__sflush_r+0xd4>
 800d698:	dfbffffe 	.word	0xdfbffffe

0800d69c <_fflush_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	690b      	ldr	r3, [r1, #16]
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	b913      	cbnz	r3, 800d6ac <_fflush_r+0x10>
 800d6a6:	2500      	movs	r5, #0
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	bd38      	pop	{r3, r4, r5, pc}
 800d6ac:	b118      	cbz	r0, 800d6b6 <_fflush_r+0x1a>
 800d6ae:	6a03      	ldr	r3, [r0, #32]
 800d6b0:	b90b      	cbnz	r3, 800d6b6 <_fflush_r+0x1a>
 800d6b2:	f7fd fa11 	bl	800aad8 <__sinit>
 800d6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0f3      	beq.n	800d6a6 <_fflush_r+0xa>
 800d6be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6c0:	07d0      	lsls	r0, r2, #31
 800d6c2:	d404      	bmi.n	800d6ce <_fflush_r+0x32>
 800d6c4:	0599      	lsls	r1, r3, #22
 800d6c6:	d402      	bmi.n	800d6ce <_fflush_r+0x32>
 800d6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ca:	f7fd fb72 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	f7ff ff5f 	bl	800d594 <__sflush_r>
 800d6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6d8:	07da      	lsls	r2, r3, #31
 800d6da:	4605      	mov	r5, r0
 800d6dc:	d4e4      	bmi.n	800d6a8 <_fflush_r+0xc>
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	059b      	lsls	r3, r3, #22
 800d6e2:	d4e1      	bmi.n	800d6a8 <_fflush_r+0xc>
 800d6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6e6:	f7fd fb65 	bl	800adb4 <__retarget_lock_release_recursive>
 800d6ea:	e7dd      	b.n	800d6a8 <_fflush_r+0xc>

0800d6ec <memmove>:
 800d6ec:	4288      	cmp	r0, r1
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	eb01 0402 	add.w	r4, r1, r2
 800d6f4:	d902      	bls.n	800d6fc <memmove+0x10>
 800d6f6:	4284      	cmp	r4, r0
 800d6f8:	4623      	mov	r3, r4
 800d6fa:	d807      	bhi.n	800d70c <memmove+0x20>
 800d6fc:	1e43      	subs	r3, r0, #1
 800d6fe:	42a1      	cmp	r1, r4
 800d700:	d008      	beq.n	800d714 <memmove+0x28>
 800d702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d70a:	e7f8      	b.n	800d6fe <memmove+0x12>
 800d70c:	4402      	add	r2, r0
 800d70e:	4601      	mov	r1, r0
 800d710:	428a      	cmp	r2, r1
 800d712:	d100      	bne.n	800d716 <memmove+0x2a>
 800d714:	bd10      	pop	{r4, pc}
 800d716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d71e:	e7f7      	b.n	800d710 <memmove+0x24>

0800d720 <strncmp>:
 800d720:	b510      	push	{r4, lr}
 800d722:	b16a      	cbz	r2, 800d740 <strncmp+0x20>
 800d724:	3901      	subs	r1, #1
 800d726:	1884      	adds	r4, r0, r2
 800d728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d72c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d730:	429a      	cmp	r2, r3
 800d732:	d103      	bne.n	800d73c <strncmp+0x1c>
 800d734:	42a0      	cmp	r0, r4
 800d736:	d001      	beq.n	800d73c <strncmp+0x1c>
 800d738:	2a00      	cmp	r2, #0
 800d73a:	d1f5      	bne.n	800d728 <strncmp+0x8>
 800d73c:	1ad0      	subs	r0, r2, r3
 800d73e:	bd10      	pop	{r4, pc}
 800d740:	4610      	mov	r0, r2
 800d742:	e7fc      	b.n	800d73e <strncmp+0x1e>

0800d744 <_sbrk_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d06      	ldr	r5, [pc, #24]	@ (800d760 <_sbrk_r+0x1c>)
 800d748:	2300      	movs	r3, #0
 800d74a:	4604      	mov	r4, r0
 800d74c:	4608      	mov	r0, r1
 800d74e:	602b      	str	r3, [r5, #0]
 800d750:	f7f4 fbfe 	bl	8001f50 <_sbrk>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d102      	bne.n	800d75e <_sbrk_r+0x1a>
 800d758:	682b      	ldr	r3, [r5, #0]
 800d75a:	b103      	cbz	r3, 800d75e <_sbrk_r+0x1a>
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	20004fb8 	.word	0x20004fb8
 800d764:	00000000 	.word	0x00000000

0800d768 <nan>:
 800d768:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d770 <nan+0x8>
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	00000000 	.word	0x00000000
 800d774:	7ff80000 	.word	0x7ff80000

0800d778 <__assert_func>:
 800d778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d77a:	4614      	mov	r4, r2
 800d77c:	461a      	mov	r2, r3
 800d77e:	4b09      	ldr	r3, [pc, #36]	@ (800d7a4 <__assert_func+0x2c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4605      	mov	r5, r0
 800d784:	68d8      	ldr	r0, [r3, #12]
 800d786:	b954      	cbnz	r4, 800d79e <__assert_func+0x26>
 800d788:	4b07      	ldr	r3, [pc, #28]	@ (800d7a8 <__assert_func+0x30>)
 800d78a:	461c      	mov	r4, r3
 800d78c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d790:	9100      	str	r1, [sp, #0]
 800d792:	462b      	mov	r3, r5
 800d794:	4905      	ldr	r1, [pc, #20]	@ (800d7ac <__assert_func+0x34>)
 800d796:	f000 fba7 	bl	800dee8 <fiprintf>
 800d79a:	f000 fbb7 	bl	800df0c <abort>
 800d79e:	4b04      	ldr	r3, [pc, #16]	@ (800d7b0 <__assert_func+0x38>)
 800d7a0:	e7f4      	b.n	800d78c <__assert_func+0x14>
 800d7a2:	bf00      	nop
 800d7a4:	20000020 	.word	0x20000020
 800d7a8:	0800e98d 	.word	0x0800e98d
 800d7ac:	0800e95f 	.word	0x0800e95f
 800d7b0:	0800e952 	.word	0x0800e952

0800d7b4 <_calloc_r>:
 800d7b4:	b570      	push	{r4, r5, r6, lr}
 800d7b6:	fba1 5402 	umull	r5, r4, r1, r2
 800d7ba:	b93c      	cbnz	r4, 800d7cc <_calloc_r+0x18>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7fe f9cf 	bl	800bb60 <_malloc_r>
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	b928      	cbnz	r0, 800d7d2 <_calloc_r+0x1e>
 800d7c6:	2600      	movs	r6, #0
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	bd70      	pop	{r4, r5, r6, pc}
 800d7cc:	220c      	movs	r2, #12
 800d7ce:	6002      	str	r2, [r0, #0]
 800d7d0:	e7f9      	b.n	800d7c6 <_calloc_r+0x12>
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f7fd fa18 	bl	800ac0a <memset>
 800d7da:	e7f5      	b.n	800d7c8 <_calloc_r+0x14>

0800d7dc <rshift>:
 800d7dc:	6903      	ldr	r3, [r0, #16]
 800d7de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7ea:	f100 0414 	add.w	r4, r0, #20
 800d7ee:	dd45      	ble.n	800d87c <rshift+0xa0>
 800d7f0:	f011 011f 	ands.w	r1, r1, #31
 800d7f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7fc:	d10c      	bne.n	800d818 <rshift+0x3c>
 800d7fe:	f100 0710 	add.w	r7, r0, #16
 800d802:	4629      	mov	r1, r5
 800d804:	42b1      	cmp	r1, r6
 800d806:	d334      	bcc.n	800d872 <rshift+0x96>
 800d808:	1a9b      	subs	r3, r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	1eea      	subs	r2, r5, #3
 800d80e:	4296      	cmp	r6, r2
 800d810:	bf38      	it	cc
 800d812:	2300      	movcc	r3, #0
 800d814:	4423      	add	r3, r4
 800d816:	e015      	b.n	800d844 <rshift+0x68>
 800d818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d81c:	f1c1 0820 	rsb	r8, r1, #32
 800d820:	40cf      	lsrs	r7, r1
 800d822:	f105 0e04 	add.w	lr, r5, #4
 800d826:	46a1      	mov	r9, r4
 800d828:	4576      	cmp	r6, lr
 800d82a:	46f4      	mov	ip, lr
 800d82c:	d815      	bhi.n	800d85a <rshift+0x7e>
 800d82e:	1a9a      	subs	r2, r3, r2
 800d830:	0092      	lsls	r2, r2, #2
 800d832:	3a04      	subs	r2, #4
 800d834:	3501      	adds	r5, #1
 800d836:	42ae      	cmp	r6, r5
 800d838:	bf38      	it	cc
 800d83a:	2200      	movcc	r2, #0
 800d83c:	18a3      	adds	r3, r4, r2
 800d83e:	50a7      	str	r7, [r4, r2]
 800d840:	b107      	cbz	r7, 800d844 <rshift+0x68>
 800d842:	3304      	adds	r3, #4
 800d844:	1b1a      	subs	r2, r3, r4
 800d846:	42a3      	cmp	r3, r4
 800d848:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d84c:	bf08      	it	eq
 800d84e:	2300      	moveq	r3, #0
 800d850:	6102      	str	r2, [r0, #16]
 800d852:	bf08      	it	eq
 800d854:	6143      	streq	r3, [r0, #20]
 800d856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85a:	f8dc c000 	ldr.w	ip, [ip]
 800d85e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d862:	ea4c 0707 	orr.w	r7, ip, r7
 800d866:	f849 7b04 	str.w	r7, [r9], #4
 800d86a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d86e:	40cf      	lsrs	r7, r1
 800d870:	e7da      	b.n	800d828 <rshift+0x4c>
 800d872:	f851 cb04 	ldr.w	ip, [r1], #4
 800d876:	f847 cf04 	str.w	ip, [r7, #4]!
 800d87a:	e7c3      	b.n	800d804 <rshift+0x28>
 800d87c:	4623      	mov	r3, r4
 800d87e:	e7e1      	b.n	800d844 <rshift+0x68>

0800d880 <__hexdig_fun>:
 800d880:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d884:	2b09      	cmp	r3, #9
 800d886:	d802      	bhi.n	800d88e <__hexdig_fun+0xe>
 800d888:	3820      	subs	r0, #32
 800d88a:	b2c0      	uxtb	r0, r0
 800d88c:	4770      	bx	lr
 800d88e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d892:	2b05      	cmp	r3, #5
 800d894:	d801      	bhi.n	800d89a <__hexdig_fun+0x1a>
 800d896:	3847      	subs	r0, #71	@ 0x47
 800d898:	e7f7      	b.n	800d88a <__hexdig_fun+0xa>
 800d89a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d89e:	2b05      	cmp	r3, #5
 800d8a0:	d801      	bhi.n	800d8a6 <__hexdig_fun+0x26>
 800d8a2:	3827      	subs	r0, #39	@ 0x27
 800d8a4:	e7f1      	b.n	800d88a <__hexdig_fun+0xa>
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	4770      	bx	lr
	...

0800d8ac <__gethex>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	b085      	sub	sp, #20
 800d8b2:	468a      	mov	sl, r1
 800d8b4:	9302      	str	r3, [sp, #8]
 800d8b6:	680b      	ldr	r3, [r1, #0]
 800d8b8:	9001      	str	r0, [sp, #4]
 800d8ba:	4690      	mov	r8, r2
 800d8bc:	1c9c      	adds	r4, r3, #2
 800d8be:	46a1      	mov	r9, r4
 800d8c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d8c4:	2830      	cmp	r0, #48	@ 0x30
 800d8c6:	d0fa      	beq.n	800d8be <__gethex+0x12>
 800d8c8:	eba9 0303 	sub.w	r3, r9, r3
 800d8cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d8d0:	f7ff ffd6 	bl	800d880 <__hexdig_fun>
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d168      	bne.n	800d9ac <__gethex+0x100>
 800d8da:	49a0      	ldr	r1, [pc, #640]	@ (800db5c <__gethex+0x2b0>)
 800d8dc:	2201      	movs	r2, #1
 800d8de:	4648      	mov	r0, r9
 800d8e0:	f7ff ff1e 	bl	800d720 <strncmp>
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d167      	bne.n	800d9ba <__gethex+0x10e>
 800d8ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d8ee:	4626      	mov	r6, r4
 800d8f0:	f7ff ffc6 	bl	800d880 <__hexdig_fun>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d062      	beq.n	800d9be <__gethex+0x112>
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	7818      	ldrb	r0, [r3, #0]
 800d8fc:	2830      	cmp	r0, #48	@ 0x30
 800d8fe:	4699      	mov	r9, r3
 800d900:	f103 0301 	add.w	r3, r3, #1
 800d904:	d0f9      	beq.n	800d8fa <__gethex+0x4e>
 800d906:	f7ff ffbb 	bl	800d880 <__hexdig_fun>
 800d90a:	fab0 f580 	clz	r5, r0
 800d90e:	096d      	lsrs	r5, r5, #5
 800d910:	f04f 0b01 	mov.w	fp, #1
 800d914:	464a      	mov	r2, r9
 800d916:	4616      	mov	r6, r2
 800d918:	3201      	adds	r2, #1
 800d91a:	7830      	ldrb	r0, [r6, #0]
 800d91c:	f7ff ffb0 	bl	800d880 <__hexdig_fun>
 800d920:	2800      	cmp	r0, #0
 800d922:	d1f8      	bne.n	800d916 <__gethex+0x6a>
 800d924:	498d      	ldr	r1, [pc, #564]	@ (800db5c <__gethex+0x2b0>)
 800d926:	2201      	movs	r2, #1
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff fef9 	bl	800d720 <strncmp>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d13f      	bne.n	800d9b2 <__gethex+0x106>
 800d932:	b944      	cbnz	r4, 800d946 <__gethex+0x9a>
 800d934:	1c74      	adds	r4, r6, #1
 800d936:	4622      	mov	r2, r4
 800d938:	4616      	mov	r6, r2
 800d93a:	3201      	adds	r2, #1
 800d93c:	7830      	ldrb	r0, [r6, #0]
 800d93e:	f7ff ff9f 	bl	800d880 <__hexdig_fun>
 800d942:	2800      	cmp	r0, #0
 800d944:	d1f8      	bne.n	800d938 <__gethex+0x8c>
 800d946:	1ba4      	subs	r4, r4, r6
 800d948:	00a7      	lsls	r7, r4, #2
 800d94a:	7833      	ldrb	r3, [r6, #0]
 800d94c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d950:	2b50      	cmp	r3, #80	@ 0x50
 800d952:	d13e      	bne.n	800d9d2 <__gethex+0x126>
 800d954:	7873      	ldrb	r3, [r6, #1]
 800d956:	2b2b      	cmp	r3, #43	@ 0x2b
 800d958:	d033      	beq.n	800d9c2 <__gethex+0x116>
 800d95a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d95c:	d034      	beq.n	800d9c8 <__gethex+0x11c>
 800d95e:	1c71      	adds	r1, r6, #1
 800d960:	2400      	movs	r4, #0
 800d962:	7808      	ldrb	r0, [r1, #0]
 800d964:	f7ff ff8c 	bl	800d880 <__hexdig_fun>
 800d968:	1e43      	subs	r3, r0, #1
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	2b18      	cmp	r3, #24
 800d96e:	d830      	bhi.n	800d9d2 <__gethex+0x126>
 800d970:	f1a0 0210 	sub.w	r2, r0, #16
 800d974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d978:	f7ff ff82 	bl	800d880 <__hexdig_fun>
 800d97c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d980:	fa5f fc8c 	uxtb.w	ip, ip
 800d984:	f1bc 0f18 	cmp.w	ip, #24
 800d988:	f04f 030a 	mov.w	r3, #10
 800d98c:	d91e      	bls.n	800d9cc <__gethex+0x120>
 800d98e:	b104      	cbz	r4, 800d992 <__gethex+0xe6>
 800d990:	4252      	negs	r2, r2
 800d992:	4417      	add	r7, r2
 800d994:	f8ca 1000 	str.w	r1, [sl]
 800d998:	b1ed      	cbz	r5, 800d9d6 <__gethex+0x12a>
 800d99a:	f1bb 0f00 	cmp.w	fp, #0
 800d99e:	bf0c      	ite	eq
 800d9a0:	2506      	moveq	r5, #6
 800d9a2:	2500      	movne	r5, #0
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	b005      	add	sp, #20
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	462c      	mov	r4, r5
 800d9b0:	e7b0      	b.n	800d914 <__gethex+0x68>
 800d9b2:	2c00      	cmp	r4, #0
 800d9b4:	d1c7      	bne.n	800d946 <__gethex+0x9a>
 800d9b6:	4627      	mov	r7, r4
 800d9b8:	e7c7      	b.n	800d94a <__gethex+0x9e>
 800d9ba:	464e      	mov	r6, r9
 800d9bc:	462f      	mov	r7, r5
 800d9be:	2501      	movs	r5, #1
 800d9c0:	e7c3      	b.n	800d94a <__gethex+0x9e>
 800d9c2:	2400      	movs	r4, #0
 800d9c4:	1cb1      	adds	r1, r6, #2
 800d9c6:	e7cc      	b.n	800d962 <__gethex+0xb6>
 800d9c8:	2401      	movs	r4, #1
 800d9ca:	e7fb      	b.n	800d9c4 <__gethex+0x118>
 800d9cc:	fb03 0002 	mla	r0, r3, r2, r0
 800d9d0:	e7ce      	b.n	800d970 <__gethex+0xc4>
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	e7de      	b.n	800d994 <__gethex+0xe8>
 800d9d6:	eba6 0309 	sub.w	r3, r6, r9
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	4629      	mov	r1, r5
 800d9de:	2b07      	cmp	r3, #7
 800d9e0:	dc0a      	bgt.n	800d9f8 <__gethex+0x14c>
 800d9e2:	9801      	ldr	r0, [sp, #4]
 800d9e4:	f7fe f948 	bl	800bc78 <_Balloc>
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	b940      	cbnz	r0, 800d9fe <__gethex+0x152>
 800d9ec:	4b5c      	ldr	r3, [pc, #368]	@ (800db60 <__gethex+0x2b4>)
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	21e4      	movs	r1, #228	@ 0xe4
 800d9f2:	485c      	ldr	r0, [pc, #368]	@ (800db64 <__gethex+0x2b8>)
 800d9f4:	f7ff fec0 	bl	800d778 <__assert_func>
 800d9f8:	3101      	adds	r1, #1
 800d9fa:	105b      	asrs	r3, r3, #1
 800d9fc:	e7ef      	b.n	800d9de <__gethex+0x132>
 800d9fe:	f100 0a14 	add.w	sl, r0, #20
 800da02:	2300      	movs	r3, #0
 800da04:	4655      	mov	r5, sl
 800da06:	469b      	mov	fp, r3
 800da08:	45b1      	cmp	r9, r6
 800da0a:	d337      	bcc.n	800da7c <__gethex+0x1d0>
 800da0c:	f845 bb04 	str.w	fp, [r5], #4
 800da10:	eba5 050a 	sub.w	r5, r5, sl
 800da14:	10ad      	asrs	r5, r5, #2
 800da16:	6125      	str	r5, [r4, #16]
 800da18:	4658      	mov	r0, fp
 800da1a:	f7fe fa1f 	bl	800be5c <__hi0bits>
 800da1e:	016d      	lsls	r5, r5, #5
 800da20:	f8d8 6000 	ldr.w	r6, [r8]
 800da24:	1a2d      	subs	r5, r5, r0
 800da26:	42b5      	cmp	r5, r6
 800da28:	dd54      	ble.n	800dad4 <__gethex+0x228>
 800da2a:	1bad      	subs	r5, r5, r6
 800da2c:	4629      	mov	r1, r5
 800da2e:	4620      	mov	r0, r4
 800da30:	f7fe fdb3 	bl	800c59a <__any_on>
 800da34:	4681      	mov	r9, r0
 800da36:	b178      	cbz	r0, 800da58 <__gethex+0x1ac>
 800da38:	1e6b      	subs	r3, r5, #1
 800da3a:	1159      	asrs	r1, r3, #5
 800da3c:	f003 021f 	and.w	r2, r3, #31
 800da40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da44:	f04f 0901 	mov.w	r9, #1
 800da48:	fa09 f202 	lsl.w	r2, r9, r2
 800da4c:	420a      	tst	r2, r1
 800da4e:	d003      	beq.n	800da58 <__gethex+0x1ac>
 800da50:	454b      	cmp	r3, r9
 800da52:	dc36      	bgt.n	800dac2 <__gethex+0x216>
 800da54:	f04f 0902 	mov.w	r9, #2
 800da58:	4629      	mov	r1, r5
 800da5a:	4620      	mov	r0, r4
 800da5c:	f7ff febe 	bl	800d7dc <rshift>
 800da60:	442f      	add	r7, r5
 800da62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da66:	42bb      	cmp	r3, r7
 800da68:	da42      	bge.n	800daf0 <__gethex+0x244>
 800da6a:	9801      	ldr	r0, [sp, #4]
 800da6c:	4621      	mov	r1, r4
 800da6e:	f7fe f943 	bl	800bcf8 <_Bfree>
 800da72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da74:	2300      	movs	r3, #0
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	25a3      	movs	r5, #163	@ 0xa3
 800da7a:	e793      	b.n	800d9a4 <__gethex+0xf8>
 800da7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800da80:	2a2e      	cmp	r2, #46	@ 0x2e
 800da82:	d012      	beq.n	800daaa <__gethex+0x1fe>
 800da84:	2b20      	cmp	r3, #32
 800da86:	d104      	bne.n	800da92 <__gethex+0x1e6>
 800da88:	f845 bb04 	str.w	fp, [r5], #4
 800da8c:	f04f 0b00 	mov.w	fp, #0
 800da90:	465b      	mov	r3, fp
 800da92:	7830      	ldrb	r0, [r6, #0]
 800da94:	9303      	str	r3, [sp, #12]
 800da96:	f7ff fef3 	bl	800d880 <__hexdig_fun>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	f000 000f 	and.w	r0, r0, #15
 800daa0:	4098      	lsls	r0, r3
 800daa2:	ea4b 0b00 	orr.w	fp, fp, r0
 800daa6:	3304      	adds	r3, #4
 800daa8:	e7ae      	b.n	800da08 <__gethex+0x15c>
 800daaa:	45b1      	cmp	r9, r6
 800daac:	d8ea      	bhi.n	800da84 <__gethex+0x1d8>
 800daae:	492b      	ldr	r1, [pc, #172]	@ (800db5c <__gethex+0x2b0>)
 800dab0:	9303      	str	r3, [sp, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff fe33 	bl	800d720 <strncmp>
 800daba:	9b03      	ldr	r3, [sp, #12]
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d1e1      	bne.n	800da84 <__gethex+0x1d8>
 800dac0:	e7a2      	b.n	800da08 <__gethex+0x15c>
 800dac2:	1ea9      	subs	r1, r5, #2
 800dac4:	4620      	mov	r0, r4
 800dac6:	f7fe fd68 	bl	800c59a <__any_on>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0c2      	beq.n	800da54 <__gethex+0x1a8>
 800dace:	f04f 0903 	mov.w	r9, #3
 800dad2:	e7c1      	b.n	800da58 <__gethex+0x1ac>
 800dad4:	da09      	bge.n	800daea <__gethex+0x23e>
 800dad6:	1b75      	subs	r5, r6, r5
 800dad8:	4621      	mov	r1, r4
 800dada:	9801      	ldr	r0, [sp, #4]
 800dadc:	462a      	mov	r2, r5
 800dade:	f7fe fb23 	bl	800c128 <__lshift>
 800dae2:	1b7f      	subs	r7, r7, r5
 800dae4:	4604      	mov	r4, r0
 800dae6:	f100 0a14 	add.w	sl, r0, #20
 800daea:	f04f 0900 	mov.w	r9, #0
 800daee:	e7b8      	b.n	800da62 <__gethex+0x1b6>
 800daf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800daf4:	42bd      	cmp	r5, r7
 800daf6:	dd6f      	ble.n	800dbd8 <__gethex+0x32c>
 800daf8:	1bed      	subs	r5, r5, r7
 800dafa:	42ae      	cmp	r6, r5
 800dafc:	dc34      	bgt.n	800db68 <__gethex+0x2bc>
 800dafe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d022      	beq.n	800db4c <__gethex+0x2a0>
 800db06:	2b03      	cmp	r3, #3
 800db08:	d024      	beq.n	800db54 <__gethex+0x2a8>
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d115      	bne.n	800db3a <__gethex+0x28e>
 800db0e:	42ae      	cmp	r6, r5
 800db10:	d113      	bne.n	800db3a <__gethex+0x28e>
 800db12:	2e01      	cmp	r6, #1
 800db14:	d10b      	bne.n	800db2e <__gethex+0x282>
 800db16:	9a02      	ldr	r2, [sp, #8]
 800db18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	2301      	movs	r3, #1
 800db20:	6123      	str	r3, [r4, #16]
 800db22:	f8ca 3000 	str.w	r3, [sl]
 800db26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db28:	2562      	movs	r5, #98	@ 0x62
 800db2a:	601c      	str	r4, [r3, #0]
 800db2c:	e73a      	b.n	800d9a4 <__gethex+0xf8>
 800db2e:	1e71      	subs	r1, r6, #1
 800db30:	4620      	mov	r0, r4
 800db32:	f7fe fd32 	bl	800c59a <__any_on>
 800db36:	2800      	cmp	r0, #0
 800db38:	d1ed      	bne.n	800db16 <__gethex+0x26a>
 800db3a:	9801      	ldr	r0, [sp, #4]
 800db3c:	4621      	mov	r1, r4
 800db3e:	f7fe f8db 	bl	800bcf8 <_Bfree>
 800db42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db44:	2300      	movs	r3, #0
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	2550      	movs	r5, #80	@ 0x50
 800db4a:	e72b      	b.n	800d9a4 <__gethex+0xf8>
 800db4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1f3      	bne.n	800db3a <__gethex+0x28e>
 800db52:	e7e0      	b.n	800db16 <__gethex+0x26a>
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1dd      	bne.n	800db16 <__gethex+0x26a>
 800db5a:	e7ee      	b.n	800db3a <__gethex+0x28e>
 800db5c:	0800e7e0 	.word	0x0800e7e0
 800db60:	0800e679 	.word	0x0800e679
 800db64:	0800e98e 	.word	0x0800e98e
 800db68:	1e6f      	subs	r7, r5, #1
 800db6a:	f1b9 0f00 	cmp.w	r9, #0
 800db6e:	d130      	bne.n	800dbd2 <__gethex+0x326>
 800db70:	b127      	cbz	r7, 800db7c <__gethex+0x2d0>
 800db72:	4639      	mov	r1, r7
 800db74:	4620      	mov	r0, r4
 800db76:	f7fe fd10 	bl	800c59a <__any_on>
 800db7a:	4681      	mov	r9, r0
 800db7c:	117a      	asrs	r2, r7, #5
 800db7e:	2301      	movs	r3, #1
 800db80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800db84:	f007 071f 	and.w	r7, r7, #31
 800db88:	40bb      	lsls	r3, r7
 800db8a:	4213      	tst	r3, r2
 800db8c:	4629      	mov	r1, r5
 800db8e:	4620      	mov	r0, r4
 800db90:	bf18      	it	ne
 800db92:	f049 0902 	orrne.w	r9, r9, #2
 800db96:	f7ff fe21 	bl	800d7dc <rshift>
 800db9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db9e:	1b76      	subs	r6, r6, r5
 800dba0:	2502      	movs	r5, #2
 800dba2:	f1b9 0f00 	cmp.w	r9, #0
 800dba6:	d047      	beq.n	800dc38 <__gethex+0x38c>
 800dba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d015      	beq.n	800dbdc <__gethex+0x330>
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d017      	beq.n	800dbe4 <__gethex+0x338>
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d109      	bne.n	800dbcc <__gethex+0x320>
 800dbb8:	f019 0f02 	tst.w	r9, #2
 800dbbc:	d006      	beq.n	800dbcc <__gethex+0x320>
 800dbbe:	f8da 3000 	ldr.w	r3, [sl]
 800dbc2:	ea49 0903 	orr.w	r9, r9, r3
 800dbc6:	f019 0f01 	tst.w	r9, #1
 800dbca:	d10e      	bne.n	800dbea <__gethex+0x33e>
 800dbcc:	f045 0510 	orr.w	r5, r5, #16
 800dbd0:	e032      	b.n	800dc38 <__gethex+0x38c>
 800dbd2:	f04f 0901 	mov.w	r9, #1
 800dbd6:	e7d1      	b.n	800db7c <__gethex+0x2d0>
 800dbd8:	2501      	movs	r5, #1
 800dbda:	e7e2      	b.n	800dba2 <__gethex+0x2f6>
 800dbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbde:	f1c3 0301 	rsb	r3, r3, #1
 800dbe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0f0      	beq.n	800dbcc <__gethex+0x320>
 800dbea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbee:	f104 0314 	add.w	r3, r4, #20
 800dbf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbfa:	f04f 0c00 	mov.w	ip, #0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc04:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800dc08:	d01b      	beq.n	800dc42 <__gethex+0x396>
 800dc0a:	3201      	adds	r2, #1
 800dc0c:	6002      	str	r2, [r0, #0]
 800dc0e:	2d02      	cmp	r5, #2
 800dc10:	f104 0314 	add.w	r3, r4, #20
 800dc14:	d13c      	bne.n	800dc90 <__gethex+0x3e4>
 800dc16:	f8d8 2000 	ldr.w	r2, [r8]
 800dc1a:	3a01      	subs	r2, #1
 800dc1c:	42b2      	cmp	r2, r6
 800dc1e:	d109      	bne.n	800dc34 <__gethex+0x388>
 800dc20:	1171      	asrs	r1, r6, #5
 800dc22:	2201      	movs	r2, #1
 800dc24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc28:	f006 061f 	and.w	r6, r6, #31
 800dc2c:	fa02 f606 	lsl.w	r6, r2, r6
 800dc30:	421e      	tst	r6, r3
 800dc32:	d13a      	bne.n	800dcaa <__gethex+0x3fe>
 800dc34:	f045 0520 	orr.w	r5, r5, #32
 800dc38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc3a:	601c      	str	r4, [r3, #0]
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	601f      	str	r7, [r3, #0]
 800dc40:	e6b0      	b.n	800d9a4 <__gethex+0xf8>
 800dc42:	4299      	cmp	r1, r3
 800dc44:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc48:	d8d9      	bhi.n	800dbfe <__gethex+0x352>
 800dc4a:	68a3      	ldr	r3, [r4, #8]
 800dc4c:	459b      	cmp	fp, r3
 800dc4e:	db17      	blt.n	800dc80 <__gethex+0x3d4>
 800dc50:	6861      	ldr	r1, [r4, #4]
 800dc52:	9801      	ldr	r0, [sp, #4]
 800dc54:	3101      	adds	r1, #1
 800dc56:	f7fe f80f 	bl	800bc78 <_Balloc>
 800dc5a:	4681      	mov	r9, r0
 800dc5c:	b918      	cbnz	r0, 800dc66 <__gethex+0x3ba>
 800dc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800dcc8 <__gethex+0x41c>)
 800dc60:	4602      	mov	r2, r0
 800dc62:	2184      	movs	r1, #132	@ 0x84
 800dc64:	e6c5      	b.n	800d9f2 <__gethex+0x146>
 800dc66:	6922      	ldr	r2, [r4, #16]
 800dc68:	3202      	adds	r2, #2
 800dc6a:	f104 010c 	add.w	r1, r4, #12
 800dc6e:	0092      	lsls	r2, r2, #2
 800dc70:	300c      	adds	r0, #12
 800dc72:	f7fd f8a0 	bl	800adb6 <memcpy>
 800dc76:	4621      	mov	r1, r4
 800dc78:	9801      	ldr	r0, [sp, #4]
 800dc7a:	f7fe f83d 	bl	800bcf8 <_Bfree>
 800dc7e:	464c      	mov	r4, r9
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc88:	6122      	str	r2, [r4, #16]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	615a      	str	r2, [r3, #20]
 800dc8e:	e7be      	b.n	800dc0e <__gethex+0x362>
 800dc90:	6922      	ldr	r2, [r4, #16]
 800dc92:	455a      	cmp	r2, fp
 800dc94:	dd0b      	ble.n	800dcae <__gethex+0x402>
 800dc96:	2101      	movs	r1, #1
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff fd9f 	bl	800d7dc <rshift>
 800dc9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dca2:	3701      	adds	r7, #1
 800dca4:	42bb      	cmp	r3, r7
 800dca6:	f6ff aee0 	blt.w	800da6a <__gethex+0x1be>
 800dcaa:	2501      	movs	r5, #1
 800dcac:	e7c2      	b.n	800dc34 <__gethex+0x388>
 800dcae:	f016 061f 	ands.w	r6, r6, #31
 800dcb2:	d0fa      	beq.n	800dcaa <__gethex+0x3fe>
 800dcb4:	4453      	add	r3, sl
 800dcb6:	f1c6 0620 	rsb	r6, r6, #32
 800dcba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcbe:	f7fe f8cd 	bl	800be5c <__hi0bits>
 800dcc2:	42b0      	cmp	r0, r6
 800dcc4:	dbe7      	blt.n	800dc96 <__gethex+0x3ea>
 800dcc6:	e7f0      	b.n	800dcaa <__gethex+0x3fe>
 800dcc8:	0800e679 	.word	0x0800e679

0800dccc <L_shift>:
 800dccc:	f1c2 0208 	rsb	r2, r2, #8
 800dcd0:	0092      	lsls	r2, r2, #2
 800dcd2:	b570      	push	{r4, r5, r6, lr}
 800dcd4:	f1c2 0620 	rsb	r6, r2, #32
 800dcd8:	6843      	ldr	r3, [r0, #4]
 800dcda:	6804      	ldr	r4, [r0, #0]
 800dcdc:	fa03 f506 	lsl.w	r5, r3, r6
 800dce0:	432c      	orrs	r4, r5
 800dce2:	40d3      	lsrs	r3, r2
 800dce4:	6004      	str	r4, [r0, #0]
 800dce6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcea:	4288      	cmp	r0, r1
 800dcec:	d3f4      	bcc.n	800dcd8 <L_shift+0xc>
 800dcee:	bd70      	pop	{r4, r5, r6, pc}

0800dcf0 <__match>:
 800dcf0:	b530      	push	{r4, r5, lr}
 800dcf2:	6803      	ldr	r3, [r0, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfa:	b914      	cbnz	r4, 800dd02 <__match+0x12>
 800dcfc:	6003      	str	r3, [r0, #0]
 800dcfe:	2001      	movs	r0, #1
 800dd00:	bd30      	pop	{r4, r5, pc}
 800dd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd0a:	2d19      	cmp	r5, #25
 800dd0c:	bf98      	it	ls
 800dd0e:	3220      	addls	r2, #32
 800dd10:	42a2      	cmp	r2, r4
 800dd12:	d0f0      	beq.n	800dcf6 <__match+0x6>
 800dd14:	2000      	movs	r0, #0
 800dd16:	e7f3      	b.n	800dd00 <__match+0x10>

0800dd18 <__hexnan>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	680b      	ldr	r3, [r1, #0]
 800dd1e:	6801      	ldr	r1, [r0, #0]
 800dd20:	115e      	asrs	r6, r3, #5
 800dd22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd26:	f013 031f 	ands.w	r3, r3, #31
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	bf18      	it	ne
 800dd2e:	3604      	addne	r6, #4
 800dd30:	2500      	movs	r5, #0
 800dd32:	1f37      	subs	r7, r6, #4
 800dd34:	4682      	mov	sl, r0
 800dd36:	4690      	mov	r8, r2
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd3e:	46b9      	mov	r9, r7
 800dd40:	463c      	mov	r4, r7
 800dd42:	9502      	str	r5, [sp, #8]
 800dd44:	46ab      	mov	fp, r5
 800dd46:	784a      	ldrb	r2, [r1, #1]
 800dd48:	1c4b      	adds	r3, r1, #1
 800dd4a:	9303      	str	r3, [sp, #12]
 800dd4c:	b342      	cbz	r2, 800dda0 <__hexnan+0x88>
 800dd4e:	4610      	mov	r0, r2
 800dd50:	9105      	str	r1, [sp, #20]
 800dd52:	9204      	str	r2, [sp, #16]
 800dd54:	f7ff fd94 	bl	800d880 <__hexdig_fun>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d151      	bne.n	800de00 <__hexnan+0xe8>
 800dd5c:	9a04      	ldr	r2, [sp, #16]
 800dd5e:	9905      	ldr	r1, [sp, #20]
 800dd60:	2a20      	cmp	r2, #32
 800dd62:	d818      	bhi.n	800dd96 <__hexnan+0x7e>
 800dd64:	9b02      	ldr	r3, [sp, #8]
 800dd66:	459b      	cmp	fp, r3
 800dd68:	dd13      	ble.n	800dd92 <__hexnan+0x7a>
 800dd6a:	454c      	cmp	r4, r9
 800dd6c:	d206      	bcs.n	800dd7c <__hexnan+0x64>
 800dd6e:	2d07      	cmp	r5, #7
 800dd70:	dc04      	bgt.n	800dd7c <__hexnan+0x64>
 800dd72:	462a      	mov	r2, r5
 800dd74:	4649      	mov	r1, r9
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7ff ffa8 	bl	800dccc <L_shift>
 800dd7c:	4544      	cmp	r4, r8
 800dd7e:	d952      	bls.n	800de26 <__hexnan+0x10e>
 800dd80:	2300      	movs	r3, #0
 800dd82:	f1a4 0904 	sub.w	r9, r4, #4
 800dd86:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd8a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd8e:	464c      	mov	r4, r9
 800dd90:	461d      	mov	r5, r3
 800dd92:	9903      	ldr	r1, [sp, #12]
 800dd94:	e7d7      	b.n	800dd46 <__hexnan+0x2e>
 800dd96:	2a29      	cmp	r2, #41	@ 0x29
 800dd98:	d157      	bne.n	800de4a <__hexnan+0x132>
 800dd9a:	3102      	adds	r1, #2
 800dd9c:	f8ca 1000 	str.w	r1, [sl]
 800dda0:	f1bb 0f00 	cmp.w	fp, #0
 800dda4:	d051      	beq.n	800de4a <__hexnan+0x132>
 800dda6:	454c      	cmp	r4, r9
 800dda8:	d206      	bcs.n	800ddb8 <__hexnan+0xa0>
 800ddaa:	2d07      	cmp	r5, #7
 800ddac:	dc04      	bgt.n	800ddb8 <__hexnan+0xa0>
 800ddae:	462a      	mov	r2, r5
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f7ff ff8a 	bl	800dccc <L_shift>
 800ddb8:	4544      	cmp	r4, r8
 800ddba:	d936      	bls.n	800de2a <__hexnan+0x112>
 800ddbc:	f1a8 0204 	sub.w	r2, r8, #4
 800ddc0:	4623      	mov	r3, r4
 800ddc2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddc6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddca:	429f      	cmp	r7, r3
 800ddcc:	d2f9      	bcs.n	800ddc2 <__hexnan+0xaa>
 800ddce:	1b3b      	subs	r3, r7, r4
 800ddd0:	f023 0303 	bic.w	r3, r3, #3
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	3401      	adds	r4, #1
 800ddd8:	3e03      	subs	r6, #3
 800ddda:	42b4      	cmp	r4, r6
 800dddc:	bf88      	it	hi
 800ddde:	2304      	movhi	r3, #4
 800dde0:	4443      	add	r3, r8
 800dde2:	2200      	movs	r2, #0
 800dde4:	f843 2b04 	str.w	r2, [r3], #4
 800dde8:	429f      	cmp	r7, r3
 800ddea:	d2fb      	bcs.n	800dde4 <__hexnan+0xcc>
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	b91b      	cbnz	r3, 800ddf8 <__hexnan+0xe0>
 800ddf0:	4547      	cmp	r7, r8
 800ddf2:	d128      	bne.n	800de46 <__hexnan+0x12e>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	603b      	str	r3, [r7, #0]
 800ddf8:	2005      	movs	r0, #5
 800ddfa:	b007      	add	sp, #28
 800ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de00:	3501      	adds	r5, #1
 800de02:	2d08      	cmp	r5, #8
 800de04:	f10b 0b01 	add.w	fp, fp, #1
 800de08:	dd06      	ble.n	800de18 <__hexnan+0x100>
 800de0a:	4544      	cmp	r4, r8
 800de0c:	d9c1      	bls.n	800dd92 <__hexnan+0x7a>
 800de0e:	2300      	movs	r3, #0
 800de10:	f844 3c04 	str.w	r3, [r4, #-4]
 800de14:	2501      	movs	r5, #1
 800de16:	3c04      	subs	r4, #4
 800de18:	6822      	ldr	r2, [r4, #0]
 800de1a:	f000 000f 	and.w	r0, r0, #15
 800de1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de22:	6020      	str	r0, [r4, #0]
 800de24:	e7b5      	b.n	800dd92 <__hexnan+0x7a>
 800de26:	2508      	movs	r5, #8
 800de28:	e7b3      	b.n	800dd92 <__hexnan+0x7a>
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0dd      	beq.n	800ddec <__hexnan+0xd4>
 800de30:	f1c3 0320 	rsb	r3, r3, #32
 800de34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de38:	40da      	lsrs	r2, r3
 800de3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de3e:	4013      	ands	r3, r2
 800de40:	f846 3c04 	str.w	r3, [r6, #-4]
 800de44:	e7d2      	b.n	800ddec <__hexnan+0xd4>
 800de46:	3f04      	subs	r7, #4
 800de48:	e7d0      	b.n	800ddec <__hexnan+0xd4>
 800de4a:	2004      	movs	r0, #4
 800de4c:	e7d5      	b.n	800ddfa <__hexnan+0xe2>

0800de4e <__ascii_mbtowc>:
 800de4e:	b082      	sub	sp, #8
 800de50:	b901      	cbnz	r1, 800de54 <__ascii_mbtowc+0x6>
 800de52:	a901      	add	r1, sp, #4
 800de54:	b142      	cbz	r2, 800de68 <__ascii_mbtowc+0x1a>
 800de56:	b14b      	cbz	r3, 800de6c <__ascii_mbtowc+0x1e>
 800de58:	7813      	ldrb	r3, [r2, #0]
 800de5a:	600b      	str	r3, [r1, #0]
 800de5c:	7812      	ldrb	r2, [r2, #0]
 800de5e:	1e10      	subs	r0, r2, #0
 800de60:	bf18      	it	ne
 800de62:	2001      	movne	r0, #1
 800de64:	b002      	add	sp, #8
 800de66:	4770      	bx	lr
 800de68:	4610      	mov	r0, r2
 800de6a:	e7fb      	b.n	800de64 <__ascii_mbtowc+0x16>
 800de6c:	f06f 0001 	mvn.w	r0, #1
 800de70:	e7f8      	b.n	800de64 <__ascii_mbtowc+0x16>

0800de72 <_realloc_r>:
 800de72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de76:	4680      	mov	r8, r0
 800de78:	4615      	mov	r5, r2
 800de7a:	460c      	mov	r4, r1
 800de7c:	b921      	cbnz	r1, 800de88 <_realloc_r+0x16>
 800de7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de82:	4611      	mov	r1, r2
 800de84:	f7fd be6c 	b.w	800bb60 <_malloc_r>
 800de88:	b92a      	cbnz	r2, 800de96 <_realloc_r+0x24>
 800de8a:	f7fd fdf5 	bl	800ba78 <_free_r>
 800de8e:	2400      	movs	r4, #0
 800de90:	4620      	mov	r0, r4
 800de92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de96:	f000 f840 	bl	800df1a <_malloc_usable_size_r>
 800de9a:	4285      	cmp	r5, r0
 800de9c:	4606      	mov	r6, r0
 800de9e:	d802      	bhi.n	800dea6 <_realloc_r+0x34>
 800dea0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dea4:	d8f4      	bhi.n	800de90 <_realloc_r+0x1e>
 800dea6:	4629      	mov	r1, r5
 800dea8:	4640      	mov	r0, r8
 800deaa:	f7fd fe59 	bl	800bb60 <_malloc_r>
 800deae:	4607      	mov	r7, r0
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d0ec      	beq.n	800de8e <_realloc_r+0x1c>
 800deb4:	42b5      	cmp	r5, r6
 800deb6:	462a      	mov	r2, r5
 800deb8:	4621      	mov	r1, r4
 800deba:	bf28      	it	cs
 800debc:	4632      	movcs	r2, r6
 800debe:	f7fc ff7a 	bl	800adb6 <memcpy>
 800dec2:	4621      	mov	r1, r4
 800dec4:	4640      	mov	r0, r8
 800dec6:	f7fd fdd7 	bl	800ba78 <_free_r>
 800deca:	463c      	mov	r4, r7
 800decc:	e7e0      	b.n	800de90 <_realloc_r+0x1e>

0800dece <__ascii_wctomb>:
 800dece:	4603      	mov	r3, r0
 800ded0:	4608      	mov	r0, r1
 800ded2:	b141      	cbz	r1, 800dee6 <__ascii_wctomb+0x18>
 800ded4:	2aff      	cmp	r2, #255	@ 0xff
 800ded6:	d904      	bls.n	800dee2 <__ascii_wctomb+0x14>
 800ded8:	228a      	movs	r2, #138	@ 0x8a
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dee0:	4770      	bx	lr
 800dee2:	700a      	strb	r2, [r1, #0]
 800dee4:	2001      	movs	r0, #1
 800dee6:	4770      	bx	lr

0800dee8 <fiprintf>:
 800dee8:	b40e      	push	{r1, r2, r3}
 800deea:	b503      	push	{r0, r1, lr}
 800deec:	4601      	mov	r1, r0
 800deee:	ab03      	add	r3, sp, #12
 800def0:	4805      	ldr	r0, [pc, #20]	@ (800df08 <fiprintf+0x20>)
 800def2:	f853 2b04 	ldr.w	r2, [r3], #4
 800def6:	6800      	ldr	r0, [r0, #0]
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	f000 f83f 	bl	800df7c <_vfiprintf_r>
 800defe:	b002      	add	sp, #8
 800df00:	f85d eb04 	ldr.w	lr, [sp], #4
 800df04:	b003      	add	sp, #12
 800df06:	4770      	bx	lr
 800df08:	20000020 	.word	0x20000020

0800df0c <abort>:
 800df0c:	b508      	push	{r3, lr}
 800df0e:	2006      	movs	r0, #6
 800df10:	f000 fa08 	bl	800e324 <raise>
 800df14:	2001      	movs	r0, #1
 800df16:	f7f3 ffa3 	bl	8001e60 <_exit>

0800df1a <_malloc_usable_size_r>:
 800df1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1e:	1f18      	subs	r0, r3, #4
 800df20:	2b00      	cmp	r3, #0
 800df22:	bfbc      	itt	lt
 800df24:	580b      	ldrlt	r3, [r1, r0]
 800df26:	18c0      	addlt	r0, r0, r3
 800df28:	4770      	bx	lr

0800df2a <__sfputc_r>:
 800df2a:	6893      	ldr	r3, [r2, #8]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	2b00      	cmp	r3, #0
 800df30:	b410      	push	{r4}
 800df32:	6093      	str	r3, [r2, #8]
 800df34:	da08      	bge.n	800df48 <__sfputc_r+0x1e>
 800df36:	6994      	ldr	r4, [r2, #24]
 800df38:	42a3      	cmp	r3, r4
 800df3a:	db01      	blt.n	800df40 <__sfputc_r+0x16>
 800df3c:	290a      	cmp	r1, #10
 800df3e:	d103      	bne.n	800df48 <__sfputc_r+0x1e>
 800df40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df44:	f000 b932 	b.w	800e1ac <__swbuf_r>
 800df48:	6813      	ldr	r3, [r2, #0]
 800df4a:	1c58      	adds	r0, r3, #1
 800df4c:	6010      	str	r0, [r2, #0]
 800df4e:	7019      	strb	r1, [r3, #0]
 800df50:	4608      	mov	r0, r1
 800df52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <__sfputs_r>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	4606      	mov	r6, r0
 800df5c:	460f      	mov	r7, r1
 800df5e:	4614      	mov	r4, r2
 800df60:	18d5      	adds	r5, r2, r3
 800df62:	42ac      	cmp	r4, r5
 800df64:	d101      	bne.n	800df6a <__sfputs_r+0x12>
 800df66:	2000      	movs	r0, #0
 800df68:	e007      	b.n	800df7a <__sfputs_r+0x22>
 800df6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6e:	463a      	mov	r2, r7
 800df70:	4630      	mov	r0, r6
 800df72:	f7ff ffda 	bl	800df2a <__sfputc_r>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	d1f3      	bne.n	800df62 <__sfputs_r+0xa>
 800df7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df7c <_vfiprintf_r>:
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	460d      	mov	r5, r1
 800df82:	b09d      	sub	sp, #116	@ 0x74
 800df84:	4614      	mov	r4, r2
 800df86:	4698      	mov	r8, r3
 800df88:	4606      	mov	r6, r0
 800df8a:	b118      	cbz	r0, 800df94 <_vfiprintf_r+0x18>
 800df8c:	6a03      	ldr	r3, [r0, #32]
 800df8e:	b90b      	cbnz	r3, 800df94 <_vfiprintf_r+0x18>
 800df90:	f7fc fda2 	bl	800aad8 <__sinit>
 800df94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df96:	07d9      	lsls	r1, r3, #31
 800df98:	d405      	bmi.n	800dfa6 <_vfiprintf_r+0x2a>
 800df9a:	89ab      	ldrh	r3, [r5, #12]
 800df9c:	059a      	lsls	r2, r3, #22
 800df9e:	d402      	bmi.n	800dfa6 <_vfiprintf_r+0x2a>
 800dfa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfa2:	f7fc ff06 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800dfa6:	89ab      	ldrh	r3, [r5, #12]
 800dfa8:	071b      	lsls	r3, r3, #28
 800dfaa:	d501      	bpl.n	800dfb0 <_vfiprintf_r+0x34>
 800dfac:	692b      	ldr	r3, [r5, #16]
 800dfae:	b99b      	cbnz	r3, 800dfd8 <_vfiprintf_r+0x5c>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f000 f938 	bl	800e228 <__swsetup_r>
 800dfb8:	b170      	cbz	r0, 800dfd8 <_vfiprintf_r+0x5c>
 800dfba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfbc:	07dc      	lsls	r4, r3, #31
 800dfbe:	d504      	bpl.n	800dfca <_vfiprintf_r+0x4e>
 800dfc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfc4:	b01d      	add	sp, #116	@ 0x74
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	0598      	lsls	r0, r3, #22
 800dfce:	d4f7      	bmi.n	800dfc0 <_vfiprintf_r+0x44>
 800dfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfd2:	f7fc feef 	bl	800adb4 <__retarget_lock_release_recursive>
 800dfd6:	e7f3      	b.n	800dfc0 <_vfiprintf_r+0x44>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfe6:	2330      	movs	r3, #48	@ 0x30
 800dfe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e198 <_vfiprintf_r+0x21c>
 800dfec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dff0:	f04f 0901 	mov.w	r9, #1
 800dff4:	4623      	mov	r3, r4
 800dff6:	469a      	mov	sl, r3
 800dff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dffc:	b10a      	cbz	r2, 800e002 <_vfiprintf_r+0x86>
 800dffe:	2a25      	cmp	r2, #37	@ 0x25
 800e000:	d1f9      	bne.n	800dff6 <_vfiprintf_r+0x7a>
 800e002:	ebba 0b04 	subs.w	fp, sl, r4
 800e006:	d00b      	beq.n	800e020 <_vfiprintf_r+0xa4>
 800e008:	465b      	mov	r3, fp
 800e00a:	4622      	mov	r2, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	4630      	mov	r0, r6
 800e010:	f7ff ffa2 	bl	800df58 <__sfputs_r>
 800e014:	3001      	adds	r0, #1
 800e016:	f000 80a7 	beq.w	800e168 <_vfiprintf_r+0x1ec>
 800e01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e01c:	445a      	add	r2, fp
 800e01e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e020:	f89a 3000 	ldrb.w	r3, [sl]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 809f 	beq.w	800e168 <_vfiprintf_r+0x1ec>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e034:	f10a 0a01 	add.w	sl, sl, #1
 800e038:	9304      	str	r3, [sp, #16]
 800e03a:	9307      	str	r3, [sp, #28]
 800e03c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e040:	931a      	str	r3, [sp, #104]	@ 0x68
 800e042:	4654      	mov	r4, sl
 800e044:	2205      	movs	r2, #5
 800e046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e04a:	4853      	ldr	r0, [pc, #332]	@ (800e198 <_vfiprintf_r+0x21c>)
 800e04c:	f7f2 f8c8 	bl	80001e0 <memchr>
 800e050:	9a04      	ldr	r2, [sp, #16]
 800e052:	b9d8      	cbnz	r0, 800e08c <_vfiprintf_r+0x110>
 800e054:	06d1      	lsls	r1, r2, #27
 800e056:	bf44      	itt	mi
 800e058:	2320      	movmi	r3, #32
 800e05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e05e:	0713      	lsls	r3, r2, #28
 800e060:	bf44      	itt	mi
 800e062:	232b      	movmi	r3, #43	@ 0x2b
 800e064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e068:	f89a 3000 	ldrb.w	r3, [sl]
 800e06c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e06e:	d015      	beq.n	800e09c <_vfiprintf_r+0x120>
 800e070:	9a07      	ldr	r2, [sp, #28]
 800e072:	4654      	mov	r4, sl
 800e074:	2000      	movs	r0, #0
 800e076:	f04f 0c0a 	mov.w	ip, #10
 800e07a:	4621      	mov	r1, r4
 800e07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e080:	3b30      	subs	r3, #48	@ 0x30
 800e082:	2b09      	cmp	r3, #9
 800e084:	d94b      	bls.n	800e11e <_vfiprintf_r+0x1a2>
 800e086:	b1b0      	cbz	r0, 800e0b6 <_vfiprintf_r+0x13a>
 800e088:	9207      	str	r2, [sp, #28]
 800e08a:	e014      	b.n	800e0b6 <_vfiprintf_r+0x13a>
 800e08c:	eba0 0308 	sub.w	r3, r0, r8
 800e090:	fa09 f303 	lsl.w	r3, r9, r3
 800e094:	4313      	orrs	r3, r2
 800e096:	9304      	str	r3, [sp, #16]
 800e098:	46a2      	mov	sl, r4
 800e09a:	e7d2      	b.n	800e042 <_vfiprintf_r+0xc6>
 800e09c:	9b03      	ldr	r3, [sp, #12]
 800e09e:	1d19      	adds	r1, r3, #4
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	9103      	str	r1, [sp, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	bfbb      	ittet	lt
 800e0a8:	425b      	neglt	r3, r3
 800e0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ae:	9307      	strge	r3, [sp, #28]
 800e0b0:	9307      	strlt	r3, [sp, #28]
 800e0b2:	bfb8      	it	lt
 800e0b4:	9204      	strlt	r2, [sp, #16]
 800e0b6:	7823      	ldrb	r3, [r4, #0]
 800e0b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ba:	d10a      	bne.n	800e0d2 <_vfiprintf_r+0x156>
 800e0bc:	7863      	ldrb	r3, [r4, #1]
 800e0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0c0:	d132      	bne.n	800e128 <_vfiprintf_r+0x1ac>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	1d1a      	adds	r2, r3, #4
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	9203      	str	r2, [sp, #12]
 800e0ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0ce:	3402      	adds	r4, #2
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1a8 <_vfiprintf_r+0x22c>
 800e0d6:	7821      	ldrb	r1, [r4, #0]
 800e0d8:	2203      	movs	r2, #3
 800e0da:	4650      	mov	r0, sl
 800e0dc:	f7f2 f880 	bl	80001e0 <memchr>
 800e0e0:	b138      	cbz	r0, 800e0f2 <_vfiprintf_r+0x176>
 800e0e2:	9b04      	ldr	r3, [sp, #16]
 800e0e4:	eba0 000a 	sub.w	r0, r0, sl
 800e0e8:	2240      	movs	r2, #64	@ 0x40
 800e0ea:	4082      	lsls	r2, r0
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f6:	4829      	ldr	r0, [pc, #164]	@ (800e19c <_vfiprintf_r+0x220>)
 800e0f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0fc:	2206      	movs	r2, #6
 800e0fe:	f7f2 f86f 	bl	80001e0 <memchr>
 800e102:	2800      	cmp	r0, #0
 800e104:	d03f      	beq.n	800e186 <_vfiprintf_r+0x20a>
 800e106:	4b26      	ldr	r3, [pc, #152]	@ (800e1a0 <_vfiprintf_r+0x224>)
 800e108:	bb1b      	cbnz	r3, 800e152 <_vfiprintf_r+0x1d6>
 800e10a:	9b03      	ldr	r3, [sp, #12]
 800e10c:	3307      	adds	r3, #7
 800e10e:	f023 0307 	bic.w	r3, r3, #7
 800e112:	3308      	adds	r3, #8
 800e114:	9303      	str	r3, [sp, #12]
 800e116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e118:	443b      	add	r3, r7
 800e11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11c:	e76a      	b.n	800dff4 <_vfiprintf_r+0x78>
 800e11e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e122:	460c      	mov	r4, r1
 800e124:	2001      	movs	r0, #1
 800e126:	e7a8      	b.n	800e07a <_vfiprintf_r+0xfe>
 800e128:	2300      	movs	r3, #0
 800e12a:	3401      	adds	r4, #1
 800e12c:	9305      	str	r3, [sp, #20]
 800e12e:	4619      	mov	r1, r3
 800e130:	f04f 0c0a 	mov.w	ip, #10
 800e134:	4620      	mov	r0, r4
 800e136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13a:	3a30      	subs	r2, #48	@ 0x30
 800e13c:	2a09      	cmp	r2, #9
 800e13e:	d903      	bls.n	800e148 <_vfiprintf_r+0x1cc>
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0c6      	beq.n	800e0d2 <_vfiprintf_r+0x156>
 800e144:	9105      	str	r1, [sp, #20]
 800e146:	e7c4      	b.n	800e0d2 <_vfiprintf_r+0x156>
 800e148:	fb0c 2101 	mla	r1, ip, r1, r2
 800e14c:	4604      	mov	r4, r0
 800e14e:	2301      	movs	r3, #1
 800e150:	e7f0      	b.n	800e134 <_vfiprintf_r+0x1b8>
 800e152:	ab03      	add	r3, sp, #12
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	462a      	mov	r2, r5
 800e158:	4b12      	ldr	r3, [pc, #72]	@ (800e1a4 <_vfiprintf_r+0x228>)
 800e15a:	a904      	add	r1, sp, #16
 800e15c:	4630      	mov	r0, r6
 800e15e:	f7fb fe63 	bl	8009e28 <_printf_float>
 800e162:	4607      	mov	r7, r0
 800e164:	1c78      	adds	r0, r7, #1
 800e166:	d1d6      	bne.n	800e116 <_vfiprintf_r+0x19a>
 800e168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e16a:	07d9      	lsls	r1, r3, #31
 800e16c:	d405      	bmi.n	800e17a <_vfiprintf_r+0x1fe>
 800e16e:	89ab      	ldrh	r3, [r5, #12]
 800e170:	059a      	lsls	r2, r3, #22
 800e172:	d402      	bmi.n	800e17a <_vfiprintf_r+0x1fe>
 800e174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e176:	f7fc fe1d 	bl	800adb4 <__retarget_lock_release_recursive>
 800e17a:	89ab      	ldrh	r3, [r5, #12]
 800e17c:	065b      	lsls	r3, r3, #25
 800e17e:	f53f af1f 	bmi.w	800dfc0 <_vfiprintf_r+0x44>
 800e182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e184:	e71e      	b.n	800dfc4 <_vfiprintf_r+0x48>
 800e186:	ab03      	add	r3, sp, #12
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	462a      	mov	r2, r5
 800e18c:	4b05      	ldr	r3, [pc, #20]	@ (800e1a4 <_vfiprintf_r+0x228>)
 800e18e:	a904      	add	r1, sp, #16
 800e190:	4630      	mov	r0, r6
 800e192:	f7fc f8e1 	bl	800a358 <_printf_i>
 800e196:	e7e4      	b.n	800e162 <_vfiprintf_r+0x1e6>
 800e198:	0800e939 	.word	0x0800e939
 800e19c:	0800e943 	.word	0x0800e943
 800e1a0:	08009e29 	.word	0x08009e29
 800e1a4:	0800df59 	.word	0x0800df59
 800e1a8:	0800e93f 	.word	0x0800e93f

0800e1ac <__swbuf_r>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	4614      	mov	r4, r2
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	b118      	cbz	r0, 800e1be <__swbuf_r+0x12>
 800e1b6:	6a03      	ldr	r3, [r0, #32]
 800e1b8:	b90b      	cbnz	r3, 800e1be <__swbuf_r+0x12>
 800e1ba:	f7fc fc8d 	bl	800aad8 <__sinit>
 800e1be:	69a3      	ldr	r3, [r4, #24]
 800e1c0:	60a3      	str	r3, [r4, #8]
 800e1c2:	89a3      	ldrh	r3, [r4, #12]
 800e1c4:	071a      	lsls	r2, r3, #28
 800e1c6:	d501      	bpl.n	800e1cc <__swbuf_r+0x20>
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	b943      	cbnz	r3, 800e1de <__swbuf_r+0x32>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 f82a 	bl	800e228 <__swsetup_r>
 800e1d4:	b118      	cbz	r0, 800e1de <__swbuf_r+0x32>
 800e1d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e1da:	4638      	mov	r0, r7
 800e1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	6922      	ldr	r2, [r4, #16]
 800e1e2:	1a98      	subs	r0, r3, r2
 800e1e4:	6963      	ldr	r3, [r4, #20]
 800e1e6:	b2f6      	uxtb	r6, r6
 800e1e8:	4283      	cmp	r3, r0
 800e1ea:	4637      	mov	r7, r6
 800e1ec:	dc05      	bgt.n	800e1fa <__swbuf_r+0x4e>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f7ff fa53 	bl	800d69c <_fflush_r>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d1ed      	bne.n	800e1d6 <__swbuf_r+0x2a>
 800e1fa:	68a3      	ldr	r3, [r4, #8]
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	60a3      	str	r3, [r4, #8]
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	6022      	str	r2, [r4, #0]
 800e206:	701e      	strb	r6, [r3, #0]
 800e208:	6962      	ldr	r2, [r4, #20]
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d004      	beq.n	800e21a <__swbuf_r+0x6e>
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	07db      	lsls	r3, r3, #31
 800e214:	d5e1      	bpl.n	800e1da <__swbuf_r+0x2e>
 800e216:	2e0a      	cmp	r6, #10
 800e218:	d1df      	bne.n	800e1da <__swbuf_r+0x2e>
 800e21a:	4621      	mov	r1, r4
 800e21c:	4628      	mov	r0, r5
 800e21e:	f7ff fa3d 	bl	800d69c <_fflush_r>
 800e222:	2800      	cmp	r0, #0
 800e224:	d0d9      	beq.n	800e1da <__swbuf_r+0x2e>
 800e226:	e7d6      	b.n	800e1d6 <__swbuf_r+0x2a>

0800e228 <__swsetup_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4b29      	ldr	r3, [pc, #164]	@ (800e2d0 <__swsetup_r+0xa8>)
 800e22c:	4605      	mov	r5, r0
 800e22e:	6818      	ldr	r0, [r3, #0]
 800e230:	460c      	mov	r4, r1
 800e232:	b118      	cbz	r0, 800e23c <__swsetup_r+0x14>
 800e234:	6a03      	ldr	r3, [r0, #32]
 800e236:	b90b      	cbnz	r3, 800e23c <__swsetup_r+0x14>
 800e238:	f7fc fc4e 	bl	800aad8 <__sinit>
 800e23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e240:	0719      	lsls	r1, r3, #28
 800e242:	d422      	bmi.n	800e28a <__swsetup_r+0x62>
 800e244:	06da      	lsls	r2, r3, #27
 800e246:	d407      	bmi.n	800e258 <__swsetup_r+0x30>
 800e248:	2209      	movs	r2, #9
 800e24a:	602a      	str	r2, [r5, #0]
 800e24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e250:	81a3      	strh	r3, [r4, #12]
 800e252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e256:	e033      	b.n	800e2c0 <__swsetup_r+0x98>
 800e258:	0758      	lsls	r0, r3, #29
 800e25a:	d512      	bpl.n	800e282 <__swsetup_r+0x5a>
 800e25c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e25e:	b141      	cbz	r1, 800e272 <__swsetup_r+0x4a>
 800e260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e264:	4299      	cmp	r1, r3
 800e266:	d002      	beq.n	800e26e <__swsetup_r+0x46>
 800e268:	4628      	mov	r0, r5
 800e26a:	f7fd fc05 	bl	800ba78 <_free_r>
 800e26e:	2300      	movs	r3, #0
 800e270:	6363      	str	r3, [r4, #52]	@ 0x34
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	2300      	movs	r3, #0
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	6923      	ldr	r3, [r4, #16]
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f043 0308 	orr.w	r3, r3, #8
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	b94b      	cbnz	r3, 800e2a2 <__swsetup_r+0x7a>
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e298:	d003      	beq.n	800e2a2 <__swsetup_r+0x7a>
 800e29a:	4621      	mov	r1, r4
 800e29c:	4628      	mov	r0, r5
 800e29e:	f000 f883 	bl	800e3a8 <__smakebuf_r>
 800e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a6:	f013 0201 	ands.w	r2, r3, #1
 800e2aa:	d00a      	beq.n	800e2c2 <__swsetup_r+0x9a>
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	60a2      	str	r2, [r4, #8]
 800e2b0:	6962      	ldr	r2, [r4, #20]
 800e2b2:	4252      	negs	r2, r2
 800e2b4:	61a2      	str	r2, [r4, #24]
 800e2b6:	6922      	ldr	r2, [r4, #16]
 800e2b8:	b942      	cbnz	r2, 800e2cc <__swsetup_r+0xa4>
 800e2ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2be:	d1c5      	bne.n	800e24c <__swsetup_r+0x24>
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
 800e2c2:	0799      	lsls	r1, r3, #30
 800e2c4:	bf58      	it	pl
 800e2c6:	6962      	ldrpl	r2, [r4, #20]
 800e2c8:	60a2      	str	r2, [r4, #8]
 800e2ca:	e7f4      	b.n	800e2b6 <__swsetup_r+0x8e>
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e7f7      	b.n	800e2c0 <__swsetup_r+0x98>
 800e2d0:	20000020 	.word	0x20000020

0800e2d4 <_raise_r>:
 800e2d4:	291f      	cmp	r1, #31
 800e2d6:	b538      	push	{r3, r4, r5, lr}
 800e2d8:	4605      	mov	r5, r0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	d904      	bls.n	800e2e8 <_raise_r+0x14>
 800e2de:	2316      	movs	r3, #22
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2ea:	b112      	cbz	r2, 800e2f2 <_raise_r+0x1e>
 800e2ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2f0:	b94b      	cbnz	r3, 800e306 <_raise_r+0x32>
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f000 f830 	bl	800e358 <_getpid_r>
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e302:	f000 b817 	b.w	800e334 <_kill_r>
 800e306:	2b01      	cmp	r3, #1
 800e308:	d00a      	beq.n	800e320 <_raise_r+0x4c>
 800e30a:	1c59      	adds	r1, r3, #1
 800e30c:	d103      	bne.n	800e316 <_raise_r+0x42>
 800e30e:	2316      	movs	r3, #22
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	2001      	movs	r0, #1
 800e314:	e7e7      	b.n	800e2e6 <_raise_r+0x12>
 800e316:	2100      	movs	r1, #0
 800e318:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e31c:	4620      	mov	r0, r4
 800e31e:	4798      	blx	r3
 800e320:	2000      	movs	r0, #0
 800e322:	e7e0      	b.n	800e2e6 <_raise_r+0x12>

0800e324 <raise>:
 800e324:	4b02      	ldr	r3, [pc, #8]	@ (800e330 <raise+0xc>)
 800e326:	4601      	mov	r1, r0
 800e328:	6818      	ldr	r0, [r3, #0]
 800e32a:	f7ff bfd3 	b.w	800e2d4 <_raise_r>
 800e32e:	bf00      	nop
 800e330:	20000020 	.word	0x20000020

0800e334 <_kill_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	@ (800e354 <_kill_r+0x20>)
 800e338:	2300      	movs	r3, #0
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	4611      	mov	r1, r2
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	f7f3 fd7d 	bl	8001e40 <_kill>
 800e346:	1c43      	adds	r3, r0, #1
 800e348:	d102      	bne.n	800e350 <_kill_r+0x1c>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	b103      	cbz	r3, 800e350 <_kill_r+0x1c>
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	bf00      	nop
 800e354:	20004fb8 	.word	0x20004fb8

0800e358 <_getpid_r>:
 800e358:	f7f3 bd6a 	b.w	8001e30 <_getpid>

0800e35c <__swhatbuf_r>:
 800e35c:	b570      	push	{r4, r5, r6, lr}
 800e35e:	460c      	mov	r4, r1
 800e360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e364:	2900      	cmp	r1, #0
 800e366:	b096      	sub	sp, #88	@ 0x58
 800e368:	4615      	mov	r5, r2
 800e36a:	461e      	mov	r6, r3
 800e36c:	da0d      	bge.n	800e38a <__swhatbuf_r+0x2e>
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e374:	f04f 0100 	mov.w	r1, #0
 800e378:	bf14      	ite	ne
 800e37a:	2340      	movne	r3, #64	@ 0x40
 800e37c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e380:	2000      	movs	r0, #0
 800e382:	6031      	str	r1, [r6, #0]
 800e384:	602b      	str	r3, [r5, #0]
 800e386:	b016      	add	sp, #88	@ 0x58
 800e388:	bd70      	pop	{r4, r5, r6, pc}
 800e38a:	466a      	mov	r2, sp
 800e38c:	f000 f848 	bl	800e420 <_fstat_r>
 800e390:	2800      	cmp	r0, #0
 800e392:	dbec      	blt.n	800e36e <__swhatbuf_r+0x12>
 800e394:	9901      	ldr	r1, [sp, #4]
 800e396:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e39a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e39e:	4259      	negs	r1, r3
 800e3a0:	4159      	adcs	r1, r3
 800e3a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3a6:	e7eb      	b.n	800e380 <__swhatbuf_r+0x24>

0800e3a8 <__smakebuf_r>:
 800e3a8:	898b      	ldrh	r3, [r1, #12]
 800e3aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3ac:	079d      	lsls	r5, r3, #30
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	d507      	bpl.n	800e3c4 <__smakebuf_r+0x1c>
 800e3b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	2301      	movs	r3, #1
 800e3be:	6163      	str	r3, [r4, #20]
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c4:	ab01      	add	r3, sp, #4
 800e3c6:	466a      	mov	r2, sp
 800e3c8:	f7ff ffc8 	bl	800e35c <__swhatbuf_r>
 800e3cc:	9f00      	ldr	r7, [sp, #0]
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7fd fbc4 	bl	800bb60 <_malloc_r>
 800e3d8:	b948      	cbnz	r0, 800e3ee <__smakebuf_r+0x46>
 800e3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3de:	059a      	lsls	r2, r3, #22
 800e3e0:	d4ee      	bmi.n	800e3c0 <__smakebuf_r+0x18>
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	f043 0302 	orr.w	r3, r3, #2
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	e7e2      	b.n	800e3b4 <__smakebuf_r+0xc>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	6020      	str	r0, [r4, #0]
 800e3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	9b01      	ldr	r3, [sp, #4]
 800e3fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3fe:	b15b      	cbz	r3, 800e418 <__smakebuf_r+0x70>
 800e400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e404:	4630      	mov	r0, r6
 800e406:	f000 f81d 	bl	800e444 <_isatty_r>
 800e40a:	b128      	cbz	r0, 800e418 <__smakebuf_r+0x70>
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	f023 0303 	bic.w	r3, r3, #3
 800e412:	f043 0301 	orr.w	r3, r3, #1
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	431d      	orrs	r5, r3
 800e41c:	81a5      	strh	r5, [r4, #12]
 800e41e:	e7cf      	b.n	800e3c0 <__smakebuf_r+0x18>

0800e420 <_fstat_r>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	4d07      	ldr	r5, [pc, #28]	@ (800e440 <_fstat_r+0x20>)
 800e424:	2300      	movs	r3, #0
 800e426:	4604      	mov	r4, r0
 800e428:	4608      	mov	r0, r1
 800e42a:	4611      	mov	r1, r2
 800e42c:	602b      	str	r3, [r5, #0]
 800e42e:	f7f3 fd67 	bl	8001f00 <_fstat>
 800e432:	1c43      	adds	r3, r0, #1
 800e434:	d102      	bne.n	800e43c <_fstat_r+0x1c>
 800e436:	682b      	ldr	r3, [r5, #0]
 800e438:	b103      	cbz	r3, 800e43c <_fstat_r+0x1c>
 800e43a:	6023      	str	r3, [r4, #0]
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	bf00      	nop
 800e440:	20004fb8 	.word	0x20004fb8

0800e444 <_isatty_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4d06      	ldr	r5, [pc, #24]	@ (800e460 <_isatty_r+0x1c>)
 800e448:	2300      	movs	r3, #0
 800e44a:	4604      	mov	r4, r0
 800e44c:	4608      	mov	r0, r1
 800e44e:	602b      	str	r3, [r5, #0]
 800e450:	f7f3 fd66 	bl	8001f20 <_isatty>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d102      	bne.n	800e45e <_isatty_r+0x1a>
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	b103      	cbz	r3, 800e45e <_isatty_r+0x1a>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	20004fb8 	.word	0x20004fb8

0800e464 <_init>:
 800e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e466:	bf00      	nop
 800e468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e46a:	bc08      	pop	{r3}
 800e46c:	469e      	mov	lr, r3
 800e46e:	4770      	bx	lr

0800e470 <_fini>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	bf00      	nop
 800e474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e476:	bc08      	pop	{r3}
 800e478:	469e      	mov	lr, r3
 800e47a:	4770      	bx	lr
